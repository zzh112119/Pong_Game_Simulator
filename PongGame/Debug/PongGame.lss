
PongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000048a  00800100  00002c36  00002cca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080058a  0080058a  00003154  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003154  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000031b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000031f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f1b  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d48  00000000  00000000  0000629b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012bc  00000000  00000000  00006fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000578  00000000  00000000  000082a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083f  00000000  00000000  00008818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024fe  00000000  00000000  00009057  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000b555  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 03 	jmp	0x666	; 0x666 <__ctors_end>
       4:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
       8:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
       c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      10:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      14:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      18:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      1c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      20:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      24:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      28:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      2c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      30:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      34:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      38:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      3c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      40:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      44:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      48:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      4c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      50:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      54:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      58:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      5c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      60:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>
      64:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2332>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <font>:
     16a:	00 00 00 00 00 7c da f2 da 7c 7c d6 f2 d6 7c 38     .....|...||...|8
     17a:	7c 3e 7c 38 18 3c 7e 3c 18 38 ea be ea 38 38 7a     |>|8.<~<.8...88z
     18a:	fe 7a 38 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .z8..<.........$
     19a:	18 00 ff e7 db e7 ff 0c 12 5c 60 70 64 94 9e 94     .........\`pd...
     1aa:	64 02 fe a0 a0 e0 02 fe a0 a4 fc 5a 3c e7 3c 5a     d..........Z<.<Z
     1ba:	fe 7c 38 38 10 10 38 38 7c fe 28 44 fe 44 28 fa     .|88..88|.(D.D(.
     1ca:	fa 00 fa fa 60 90 fe 80 fe 00 66 91 a9 56 06 06     ....`.....f..V..
     1da:	06 06 06 29 45 ff 45 29 10 20 7e 20 10 08 04 7e     ...)E.E). ~ ...~
     1ea:	04 08 10 10 54 38 10 10 38 54 10 10 78 08 08 08     ....T8..8T..x...
     1fa:	08 30 78 30 78 30 0c 1c 7c 1c 0c 60 70 7c 70 60     .0x0x0..|..`p|p`
     20a:	00 00 00 00 00 00 00 fa 00 00 00 e0 00 e0 00 28     ...............(
     21a:	fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26 46 6c 92     .(.($T.TH...&Fl.
     22a:	6a 04 0a 00 10 e0 c0 00 00 38 44 82 00 00 82 44     j........8D....D
     23a:	38 00 54 38 fe 38 54 10 10 7c 10 10 00 01 0e 0c     8.T8.8T..|......
     24a:	00 10 10 10 10 10 00 00 06 06 00 04 08 10 20 40     .............. @
     25a:	7c 8a 92 a2 7c 00 42 fe 02 00 4e 92 92 92 62 84     |...|.B...N...b.
     26a:	82 92 b2 cc 18 28 48 fe 08 e4 a2 a2 a2 9c 3c 52     .....(H.......<R
     27a:	92 92 8c 82 84 88 90 e0 6c 92 92 92 6c 62 92 92     ........l...lb..
     28a:	94 78 00 00 28 00 00 00 02 2c 00 00 00 10 28 44     .x..(....,....(D
     29a:	82 28 28 28 28 28 00 82 44 28 10 40 80 9a 90 60     .(((((..D(.@...`
     2aa:	7c 82 ba 9a 72 3e 48 88 48 3e fe 92 92 92 6c 7c     |...r>H.H>....l|
     2ba:	82 82 82 44 fe 82 82 82 7c fe 92 92 92 82 fe 90     ...D....|.......
     2ca:	90 90 80 7c 82 82 8a ce fe 10 10 10 fe 00 82 fe     ...|............
     2da:	82 00 04 02 82 fc 80 fe 10 28 44 82 fe 02 02 02     .........(D.....
     2ea:	02 fe 40 38 40 fe fe 20 10 08 fe 7c 82 82 82 7c     ..@8@.. ...|...|
     2fa:	fe 90 90 90 60 7c 82 8a 84 7a fe 90 98 94 62 64     ....`|...z....bd
     30a:	92 92 92 4c c0 80 fe 80 c0 fc 02 02 02 fc f8 04     ...L............
     31a:	02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6 c0 20 1e     .........(.(.. .
     32a:	20 c0 86 9a 92 b2 c2 00 fe 82 82 82 40 20 10 08      ...........@ ..
     33a:	04 00 82 82 82 fe 20 40 80 40 20 02 02 02 02 02     ...... @.@ .....
     34a:	00 c0 e0 10 00 04 2a 2a 1e 02 fe 14 22 22 1c 1c     ......**....""..
     35a:	22 22 22 14 1c 22 22 14 fe 1c 2a 2a 2a 18 00 10     """..""...***...
     36a:	7e 90 40 18 25 25 39 1e fe 10 20 20 1e 00 22 be     ~.@.%%9...  ..".
     37a:	02 00 04 02 02 bc 00 fe 08 14 22 00 00 82 fe 02     ..........".....
     38a:	00 3e 20 1e 20 1e 3e 10 20 20 1e 1c 22 22 22 1c     .> . .>.  ..""".
     39a:	3f 18 24 24 18 18 24 24 18 3f 3e 10 20 20 10 12     ?.$$..$$.?>.  ..
     3aa:	2a 2a 2a 24 20 20 fc 22 24 3c 02 02 04 3e 38 04     ***$  ."$<...>8.
     3ba:	02 04 38 3c 02 0c 02 3c 22 14 08 14 22 32 09 09     ..8<...<"..."2..
     3ca:	09 3e 22 26 2a 32 22 00 10 6c 82 00 00 00 ee 00     .>"&*2"..l......
     3da:	00 00 82 6c 10 00 40 80 40 20 40 3c 64 c4 64 3c     ...l..@.@ @<d.d<
     3ea:	78 85 85 86 48 5c 02 02 04 5e 1c 2a 2a aa 9a 84     x...H\...^.**...
     3fa:	aa aa 9e 82 84 2a 2a 1e 82 84 aa 2a 1e 02 04 2a     .....**....*...*
     40a:	aa 9e 02 30 78 4a 4e 48 9c aa aa aa 9a 9c 2a 2a     ...0xJNH......**
     41a:	2a 9a 9c aa 2a 2a 1a 00 00 a2 3e 82 00 40 a2 be     *...**....>..@..
     42a:	42 00 80 a2 3e 02 0f 94 24 94 0f 0f 14 a4 14 0f     B...>...$.......
     43a:	3e 2a aa a2 00 04 2a 2a 3e 2a 3e 50 90 fe 92 4c     >*....**>*>P...L
     44a:	92 92 92 4c 4c 12 12 12 4c 4c 52 12 12 0c 5c 82     ...LL...LLR...\.
     45a:	82 84 5e 5c 42 02 04 1e 00 b9 05 05 be 9c 22 22     ..^\B.........""
     46a:	22 9c bc 02 02 02 bc 3c 24 ff 24 24 12 7e 92 c2     "......<$.$$.~..
     47a:	66 d4 f4 3f f4 d4 ff 90 94 6f 04 03 11 7e 90 c0     f..?.....o...~..
     48a:	04 2a 2a 9e 82 00 00 22 be 82 0c 12 12 52 4c 1c     .**....".....RL.
     49a:	02 02 44 5e 00 5e 50 50 4e be b0 98 8c be 64 94     ..D^.^PPN.....d.
     4aa:	94 f4 14 64 94 94 94 64 0c 12 b2 02 04 1c 10 10     ...d...d........
     4ba:	10 10 10 10 10 10 1c f4 08 13 35 5d f4 08 14 2c     ..........5]...,
     4ca:	5f 00 00 de 00 00 10 28 54 28 44 44 28 54 28 10     _......(T(DD(T(.
     4da:	55 00 aa 00 55 55 aa 55 aa 55 aa 55 aa 55 aa 00     U...UU.U.U.U.U..
     4ea:	00 00 ff 00 08 08 08 ff 00 28 28 28 ff 00 08 08     .........(((....
     4fa:	ff 00 ff 08 08 0f 08 0f 28 28 28 3f 00 28 28 ef     ........(((?.((.
     50a:	00 ff 00 00 ff 00 ff 28 28 2f 20 3f 28 28 e8 08     .......((/ ?((..
     51a:	f8 08 08 f8 08 f8 28 28 28 f8 00 08 08 08 0f 00     ......(((.......
     52a:	00 00 00 f8 08 08 08 08 f8 08 08 08 08 0f 08 00     ................
     53a:	00 00 ff 08 08 08 08 08 08 08 08 08 ff 08 00 00     ................
     54a:	00 ff 28 00 00 ff 00 ff 00 00 f8 08 e8 00 00 3f     ..(............?
     55a:	20 2f 28 28 e8 08 e8 28 28 2f 20 2f 00 00 ff 00      /((...((/ /....
     56a:	ef 28 28 28 28 28 28 28 ef 00 ef 28 28 28 e8 28     .(((((((...(((.(
     57a:	08 08 f8 08 f8 28 28 28 2f 28 08 08 0f 08 0f 00     .....(((/(......
     58a:	00 f8 08 f8 00 00 00 f8 28 00 00 00 3f 28 00 00     ........(...?(..
     59a:	0f 08 0f 08 08 ff 08 ff 28 28 28 ff 28 08 08 08     ........(((.(...
     5aa:	f8 00 00 00 00 0f 08 ff ff ff ff ff 0f 0f 0f 0f     ................
     5ba:	0f ff ff ff 00 00 00 00 00 ff ff f0 f0 f0 f0 f0     ................
     5ca:	1c 22 22 1c 22 3e 54 54 7c 28 7e 40 40 60 60 40     ."".">TT|(~@@``@
     5da:	7e 40 7e 40 c6 aa 92 82 c6 1c 22 22 3c 20 02 7e     ~@~@......""< .~
     5ea:	04 78 04 60 40 7e 40 40 99 a5 e7 a5 99 38 54 92     .x.`@~@@.....8T.
     5fa:	54 38 32 4e 80 4e 32 0c 52 b2 b2 0c 0c 12 1e 12     T82N.N2.R.......
     60a:	0c 3d 46 5a 62 bc 7c 92 92 92 00 7e 80 80 80 7e     .=FZb.|....~...~
     61a:	54 54 54 54 54 22 22 fa 22 22 02 8a 52 22 02 02     TTTTT"".""..R"..
     62a:	22 52 8a 02 00 00 ff 80 c0 07 01 ff 00 00 10 10     "R..............
     63a:	d6 d6 10 6c 48 6c 24 6c 60 f0 90 f0 60 00 00 18     ...lHl$l`...`...
     64a:	18 00 00 00 08 08 00 0c 02 ff 80 80 00 f8 80 80     ................
     65a:	78 00 98 b8 e8 48 00 3c 3c 3c 3c 00                 x....H.<<<<.

00000666 <__ctors_end>:
     666:	11 24       	eor	r1, r1
     668:	1f be       	out	0x3f, r1	; 63
     66a:	cf ef       	ldi	r28, 0xFF	; 255
     66c:	d8 e0       	ldi	r29, 0x08	; 8
     66e:	de bf       	out	0x3e, r29	; 62
     670:	cd bf       	out	0x3d, r28	; 61

00000672 <__do_copy_data>:
     672:	15 e0       	ldi	r17, 0x05	; 5
     674:	a0 e0       	ldi	r26, 0x00	; 0
     676:	b1 e0       	ldi	r27, 0x01	; 1
     678:	e6 e3       	ldi	r30, 0x36	; 54
     67a:	fc e2       	ldi	r31, 0x2C	; 44
     67c:	02 c0       	rjmp	.+4      	; 0x682 <__do_copy_data+0x10>
     67e:	05 90       	lpm	r0, Z+
     680:	0d 92       	st	X+, r0
     682:	aa 38       	cpi	r26, 0x8A	; 138
     684:	b1 07       	cpc	r27, r17
     686:	d9 f7       	brne	.-10     	; 0x67e <__do_copy_data+0xc>

00000688 <__do_clear_bss>:
     688:	25 e0       	ldi	r18, 0x05	; 5
     68a:	aa e8       	ldi	r26, 0x8A	; 138
     68c:	b5 e0       	ldi	r27, 0x05	; 5
     68e:	01 c0       	rjmp	.+2      	; 0x692 <.do_clear_bss_start>

00000690 <.do_clear_bss_loop>:
     690:	1d 92       	st	X+, r1

00000692 <.do_clear_bss_start>:
     692:	ae 3a       	cpi	r26, 0xAE	; 174
     694:	b2 07       	cpc	r27, r18
     696:	e1 f7       	brne	.-8      	; 0x690 <.do_clear_bss_loop>
     698:	0e 94 b1 0a 	call	0x1562	; 0x1562 <main>
     69c:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <_exit>

000006a0 <__bad_interrupt>:
     6a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a4 <lcd_command>:
	buff[x + y / 8 * 128] |= (0x80 >> (y % 8));
}

// function to clear a single pixel
void clearpixel(uint8_t *buff, uint8_t x, uint8_t y) {
	buff[x + y / 8 * 128] &= ~(0x80 >> (y % 8));
     6a4:	5c 98       	cbi	0x0b, 4	; 11
     6a6:	27 e0       	ldi	r18, 0x07	; 7
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	5d 98       	cbi	0x0b, 5	; 11
     6ae:	ac 01       	movw	r20, r24
     6b0:	02 2e       	mov	r0, r18
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <lcd_command+0x14>
     6b4:	55 95       	asr	r21
     6b6:	47 95       	ror	r20
     6b8:	0a 94       	dec	r0
     6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <lcd_command+0x10>
     6bc:	40 ff       	sbrs	r20, 0
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <lcd_command+0x20>
     6c0:	5e 9a       	sbi	0x0b, 6	; 11
     6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <lcd_command+0x22>
     6c4:	5e 98       	cbi	0x0b, 6	; 11
     6c6:	5d 9a       	sbi	0x0b, 5	; 11
     6c8:	21 50       	subi	r18, 0x01	; 1
     6ca:	31 09       	sbc	r19, r1
     6cc:	78 f7       	brcc	.-34     	; 0x6ac <lcd_command+0x8>
     6ce:	08 95       	ret

000006d0 <lcd_init>:
     6d0:	56 9a       	sbi	0x0a, 6	; 10
     6d2:	55 9a       	sbi	0x0a, 5	; 10
     6d4:	54 9a       	sbi	0x0a, 4	; 10
     6d6:	53 9a       	sbi	0x0a, 3	; 10
     6d8:	52 9a       	sbi	0x0a, 2	; 10
     6da:	5a 98       	cbi	0x0b, 2	; 11
     6dc:	5b 98       	cbi	0x0b, 3	; 11
     6de:	2f e9       	ldi	r18, 0x9F	; 159
     6e0:	86 e8       	ldi	r24, 0x86	; 134
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	21 50       	subi	r18, 0x01	; 1
     6e6:	80 40       	sbci	r24, 0x00	; 0
     6e8:	90 40       	sbci	r25, 0x00	; 0
     6ea:	e1 f7       	brne	.-8      	; 0x6e4 <lcd_init+0x14>
     6ec:	00 c0       	rjmp	.+0      	; 0x6ee <lcd_init+0x1e>
     6ee:	00 00       	nop
     6f0:	5b 9a       	sbi	0x0b, 3	; 11
     6f2:	83 ea       	ldi	r24, 0xA3	; 163
     6f4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcd_command>
     6f8:	80 ea       	ldi	r24, 0xA0	; 160
     6fa:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcd_command>
     6fe:	80 ec       	ldi	r24, 0xC0	; 192
     700:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcd_command>
     704:	80 e4       	ldi	r24, 0x40	; 64
     706:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcd_command>
     70a:	8c e2       	ldi	r24, 0x2C	; 44
     70c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcd_command>
     710:	83 ed       	ldi	r24, 0xD3	; 211
     712:	90 e3       	ldi	r25, 0x30	; 48
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <lcd_init+0x44>
     718:	00 c0       	rjmp	.+0      	; 0x71a <lcd_init+0x4a>
     71a:	00 00       	nop
     71c:	8e e2       	ldi	r24, 0x2E	; 46
     71e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcd_command>
     722:	83 ed       	ldi	r24, 0xD3	; 211
     724:	90 e3       	ldi	r25, 0x30	; 48
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <lcd_init+0x56>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <lcd_init+0x5c>
     72c:	00 00       	nop
     72e:	8f e2       	ldi	r24, 0x2F	; 47
     730:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcd_command>
     734:	83 ec       	ldi	r24, 0xC3	; 195
     736:	99 e0       	ldi	r25, 0x09	; 9
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	f1 f7       	brne	.-4      	; 0x738 <lcd_init+0x68>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <lcd_init+0x6e>
     73e:	00 00       	nop
     740:	86 e2       	ldi	r24, 0x26	; 38
     742:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcd_command>
     746:	08 95       	ret

00000748 <lcd_data>:
     748:	5c 9a       	sbi	0x0b, 4	; 11
     74a:	27 e0       	ldi	r18, 0x07	; 7
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	5d 98       	cbi	0x0b, 5	; 11
     752:	ac 01       	movw	r20, r24
     754:	02 2e       	mov	r0, r18
     756:	02 c0       	rjmp	.+4      	; 0x75c <lcd_data+0x14>
     758:	55 95       	asr	r21
     75a:	47 95       	ror	r20
     75c:	0a 94       	dec	r0
     75e:	e2 f7       	brpl	.-8      	; 0x758 <lcd_data+0x10>
     760:	40 ff       	sbrs	r20, 0
     762:	02 c0       	rjmp	.+4      	; 0x768 <lcd_data+0x20>
     764:	5e 9a       	sbi	0x0b, 6	; 11
     766:	01 c0       	rjmp	.+2      	; 0x76a <lcd_data+0x22>
     768:	5e 98       	cbi	0x0b, 6	; 11
     76a:	5d 9a       	sbi	0x0b, 5	; 11
     76c:	21 50       	subi	r18, 0x01	; 1
     76e:	31 09       	sbc	r19, r1
     770:	78 f7       	brcc	.-34     	; 0x750 <lcd_data+0x8>
     772:	08 95       	ret

00000774 <lcd_set_brightness>:
     774:	cf 93       	push	r28
     776:	c8 2f       	mov	r28, r24
     778:	81 e8       	ldi	r24, 0x81	; 129
     77a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcd_command>
     77e:	8c 2f       	mov	r24, r28
     780:	8f 73       	andi	r24, 0x3F	; 63
     782:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcd_command>
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <write_buffer>:
     78a:	cf 92       	push	r12
     78c:	df 92       	push	r13
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	0f 2e       	mov	r0, r31
     79c:	f4 e0       	ldi	r31, 0x04	; 4
     79e:	ef 2e       	mov	r14, r31
     7a0:	f5 e0       	ldi	r31, 0x05	; 5
     7a2:	ff 2e       	mov	r15, r31
     7a4:	f0 2d       	mov	r31, r0
     7a6:	ec 01       	movw	r28, r24
     7a8:	0f 2e       	mov	r0, r31
     7aa:	f4 e1       	ldi	r31, 0x14	; 20
     7ac:	cf 2e       	mov	r12, r31
     7ae:	f5 e0       	ldi	r31, 0x05	; 5
     7b0:	df 2e       	mov	r13, r31
     7b2:	f0 2d       	mov	r31, r0
     7b4:	f7 01       	movw	r30, r14
     7b6:	80 81       	ld	r24, Z
     7b8:	f2 e0       	ldi	r31, 0x02	; 2
     7ba:	ef 0e       	add	r14, r31
     7bc:	f1 1c       	adc	r15, r1
     7be:	80 6b       	ori	r24, 0xB0	; 176
     7c0:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcd_command>
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcd_command>
     7ca:	80 e1       	ldi	r24, 0x10	; 16
     7cc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcd_command>
     7d0:	80 ee       	ldi	r24, 0xE0	; 224
     7d2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcd_command>
     7d6:	8f ef       	ldi	r24, 0xFF	; 255
     7d8:	0e 94 a4 03 	call	0x748	; 0x748 <lcd_data>
     7dc:	8e 01       	movw	r16, r28
     7de:	00 58       	subi	r16, 0x80	; 128
     7e0:	1f 4f       	sbci	r17, 0xFF	; 255
     7e2:	89 91       	ld	r24, Y+
     7e4:	0e 94 a4 03 	call	0x748	; 0x748 <lcd_data>
     7e8:	c0 17       	cp	r28, r16
     7ea:	d1 07       	cpc	r29, r17
     7ec:	d1 f7       	brne	.-12     	; 0x7e2 <write_buffer+0x58>
     7ee:	e8 01       	movw	r28, r16
     7f0:	ce 14       	cp	r12, r14
     7f2:	df 04       	cpc	r13, r15
     7f4:	f9 f6       	brne	.-66     	; 0x7b4 <write_buffer+0x2a>
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	ff 90       	pop	r15
     800:	ef 90       	pop	r14
     802:	df 90       	pop	r13
     804:	cf 90       	pop	r12
     806:	08 95       	ret

00000808 <clear_buffer>:
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	34 e0       	ldi	r19, 0x04	; 4
     80c:	fc 01       	movw	r30, r24
     80e:	a9 01       	movw	r20, r18
     810:	11 92       	st	Z+, r1
     812:	41 50       	subi	r20, 0x01	; 1
     814:	50 40       	sbci	r21, 0x00	; 0
     816:	e1 f7       	brne	.-8      	; 0x810 <clear_buffer+0x8>
     818:	08 95       	ret

0000081a <drawchar>:
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	f9 01       	movw	r30, r18
     81e:	ee 0f       	add	r30, r30
     820:	ff 1f       	adc	r31, r31
     822:	ee 0f       	add	r30, r30
     824:	ff 1f       	adc	r31, r31
     826:	e2 0f       	add	r30, r18
     828:	f3 1f       	adc	r31, r19
     82a:	e6 59       	subi	r30, 0x96	; 150
     82c:	fe 4f       	sbci	r31, 0xFE	; 254
     82e:	55 e0       	ldi	r21, 0x05	; 5
     830:	56 0f       	add	r21, r22
     832:	9c 01       	movw	r18, r24
     834:	70 e8       	ldi	r23, 0x80	; 128
     836:	47 9f       	mul	r20, r23
     838:	20 0d       	add	r18, r0
     83a:	31 1d       	adc	r19, r1
     83c:	11 24       	eor	r1, r1
     83e:	94 91       	lpm	r25, Z
     840:	d9 01       	movw	r26, r18
     842:	a6 0f       	add	r26, r22
     844:	b1 1d       	adc	r27, r1
     846:	9c 93       	st	X, r25
     848:	6f 5f       	subi	r22, 0xFF	; 255
     84a:	31 96       	adiw	r30, 0x01	; 1
     84c:	65 13       	cpse	r22, r21
     84e:	f7 cf       	rjmp	.-18     	; 0x83e <drawchar+0x24>
     850:	08 95       	ret

00000852 <setpixel>:
     852:	24 2f       	mov	r18, r20
     854:	26 95       	lsr	r18
     856:	26 95       	lsr	r18
     858:	26 95       	lsr	r18
     85a:	e6 2f       	mov	r30, r22
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	30 e8       	ldi	r19, 0x80	; 128
     860:	23 9f       	mul	r18, r19
     862:	e0 0d       	add	r30, r0
     864:	f1 1d       	adc	r31, r1
     866:	11 24       	eor	r1, r1
     868:	e8 0f       	add	r30, r24
     86a:	f9 1f       	adc	r31, r25
     86c:	47 70       	andi	r20, 0x07	; 7
     86e:	80 e8       	ldi	r24, 0x80	; 128
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	02 c0       	rjmp	.+4      	; 0x878 <setpixel+0x26>
     874:	95 95       	asr	r25
     876:	87 95       	ror	r24
     878:	4a 95       	dec	r20
     87a:	e2 f7       	brpl	.-8      	; 0x874 <setpixel+0x22>
     87c:	90 81       	ld	r25, Z
     87e:	89 2b       	or	r24, r25
     880:	80 83       	st	Z, r24
     882:	08 95       	ret

00000884 <drawstring>:
}

// function to write a string on the lcd
void drawstring(uint8_t *buff, uint8_t x, uint8_t line, uint8_t *c) {
     884:	ef 92       	push	r14
     886:	ff 92       	push	r15
     888:	0f 93       	push	r16
     88a:	1f 93       	push	r17
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	7c 01       	movw	r14, r24
     892:	c6 2f       	mov	r28, r22
     894:	d4 2f       	mov	r29, r20
     896:	f9 01       	movw	r30, r18
	while(*c){
     898:	20 81       	ld	r18, Z
     89a:	22 23       	and	r18, r18
     89c:	71 f0       	breq	.+28     	; 0x8ba <drawstring+0x36>
     89e:	8f 01       	movw	r16, r30
     8a0:	0f 5f       	subi	r16, 0xFF	; 255
     8a2:	1f 4f       	sbci	r17, 0xFF	; 255
		drawchar(buff, x, line, *c);
     8a4:	4d 2f       	mov	r20, r29
     8a6:	6c 2f       	mov	r22, r28
     8a8:	c7 01       	movw	r24, r14
     8aa:	0e 94 0d 04 	call	0x81a	; 0x81a <drawchar>
		x += 5;
     8ae:	cb 5f       	subi	r28, 0xFB	; 251
	buff[x + y / 8 * 128] &= ~(0x80 >> (y % 8));
}

// function to write a string on the lcd
void drawstring(uint8_t *buff, uint8_t x, uint8_t line, uint8_t *c) {
	while(*c){
     8b0:	f8 01       	movw	r30, r16
     8b2:	21 91       	ld	r18, Z+
     8b4:	8f 01       	movw	r16, r30
     8b6:	21 11       	cpse	r18, r1
     8b8:	f5 cf       	rjmp	.-22     	; 0x8a4 <drawstring+0x20>
		drawchar(buff, x, line, *c);
		x += 5;
		c++;
	}
}
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	ff 90       	pop	r15
     8c4:	ef 90       	pop	r14
     8c6:	08 95       	ret

000008c8 <drawline>:

// use bresenham's algorithm to write this function to draw a line
void drawline(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,uint8_t color) {
     8c8:	4f 92       	push	r4
     8ca:	5f 92       	push	r5
     8cc:	6f 92       	push	r6
     8ce:	7f 92       	push	r7
     8d0:	8f 92       	push	r8
     8d2:	9f 92       	push	r9
     8d4:	af 92       	push	r10
     8d6:	bf 92       	push	r11
     8d8:	cf 92       	push	r12
     8da:	df 92       	push	r13
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	6c 01       	movw	r12, r24
     8ea:	c6 2f       	mov	r28, r22
     8ec:	12 2f       	mov	r17, r18

	uint8_t dx = abs(x1 - x0);
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	26 1b       	sub	r18, r22
     8f2:	31 09       	sbc	r19, r1
     8f4:	c9 01       	movw	r24, r18
     8f6:	99 23       	and	r25, r25
     8f8:	24 f4       	brge	.+8      	; 0x902 <__stack+0x3>
     8fa:	88 27       	eor	r24, r24
     8fc:	99 27       	eor	r25, r25
     8fe:	82 1b       	sub	r24, r18
     900:	93 0b       	sbc	r25, r19
     902:	5c 01       	movw	r10, r24
	uint8_t dy = abs(y1 - y0);
	float D = (float) dy/dx;
	float err = 0.0; // No error at start
	
	if (x0 > x1) {
     904:	1c 17       	cp	r17, r28
     906:	30 f4       	brcc	.+12     	; 0x914 <__stack+0x15>
		swap(x0, x1);
		swap(y0, y1);
     908:	f4 2e       	mov	r15, r20
     90a:	d0 2f       	mov	r29, r16
	uint8_t dx = abs(x1 - x0);
	uint8_t dy = abs(y1 - y0);
	float D = (float) dy/dx;
	float err = 0.0; // No error at start
	
	if (x0 > x1) {
     90c:	9c 2f       	mov	r25, r28
		swap(x0, x1);
     90e:	c1 2f       	mov	r28, r17
     910:	19 2f       	mov	r17, r25
     912:	02 c0       	rjmp	.+4      	; 0x918 <__stack+0x19>
     914:	f0 2e       	mov	r15, r16
     916:	d4 2f       	mov	r29, r20
	}
	
	uint8_t	y_min = y0;
	uint8_t	y_max = y1;
	
	if(dx == 0){
     918:	81 11       	cpse	r24, r1
     91a:	0f c0       	rjmp	.+30     	; 0x93a <__stack+0x3b>
		if(y0 > y1){
     91c:	fd 16       	cp	r15, r29
     91e:	18 f4       	brcc	.+6      	; 0x926 <__stack+0x27>
     920:	8d 2f       	mov	r24, r29
			y_max = y0;
			y_min = y1;
     922:	df 2d       	mov	r29, r15
	uint8_t	y_min = y0;
	uint8_t	y_max = y1;
	
	if(dx == 0){
		if(y0 > y1){
			y_max = y0;
     924:	f8 2e       	mov	r15, r24
			y_min = y1;
		}
		for (uint8_t y = y_min; y <= y_max ; y++){
			setpixel(buff, x0, y, color);
     926:	2e 2d       	mov	r18, r14
     928:	4d 2f       	mov	r20, r29
     92a:	6c 2f       	mov	r22, r28
     92c:	c6 01       	movw	r24, r12
     92e:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
	if(dx == 0){
		if(y0 > y1){
			y_max = y0;
			y_min = y1;
		}
		for (uint8_t y = y_min; y <= y_max ; y++){
     932:	df 5f       	subi	r29, 0xFF	; 255
     934:	fd 16       	cp	r15, r29
     936:	b8 f7       	brcc	.-18     	; 0x926 <__stack+0x27>
     938:	5f c0       	rjmp	.+190    	; 0x9f8 <__stack+0xf9>

// use bresenham's algorithm to write this function to draw a line
void drawline(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,uint8_t color) {

	uint8_t dx = abs(x1 - x0);
	uint8_t dy = abs(y1 - y0);
     93a:	80 2f       	mov	r24, r16
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	84 1b       	sub	r24, r20
     940:	91 09       	sbc	r25, r1
     942:	bc 01       	movw	r22, r24
     944:	22 f4       	brpl	.+8      	; 0x94e <__stack+0x4f>
     946:	66 27       	eor	r22, r22
     948:	77 27       	eor	r23, r23
     94a:	68 1b       	sub	r22, r24
     94c:	79 0b       	sbc	r23, r25
		}
		for (uint8_t y = y_min; y <= y_max ; y++){
			setpixel(buff, x0, y, color);
		}
	}
	else if(dy == 0){
     94e:	66 23       	and	r22, r22
     950:	19 f0       	breq	.+6      	; 0x958 <__stack+0x59>
		for (uint8_t x = x0; x <= x1 ; x++){
			setpixel(buff, x, y0, color);
		}
	}
	else{
		for (uint8_t x = x0; x <= x1 ; x++){
     952:	1c 17       	cp	r17, r28
     954:	70 f4       	brcc	.+28     	; 0x972 <__stack+0x73>
     956:	50 c0       	rjmp	.+160    	; 0x9f8 <__stack+0xf9>
		for (uint8_t y = y_min; y <= y_max ; y++){
			setpixel(buff, x0, y, color);
		}
	}
	else if(dy == 0){
		for (uint8_t x = x0; x <= x1 ; x++){
     958:	1c 17       	cp	r17, r28
     95a:	08 f4       	brcc	.+2      	; 0x95e <__stack+0x5f>
     95c:	4d c0       	rjmp	.+154    	; 0x9f8 <__stack+0xf9>
			setpixel(buff, x, y0, color);
     95e:	2e 2d       	mov	r18, r14
     960:	4d 2f       	mov	r20, r29
     962:	6c 2f       	mov	r22, r28
     964:	c6 01       	movw	r24, r12
     966:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
		for (uint8_t y = y_min; y <= y_max ; y++){
			setpixel(buff, x0, y, color);
		}
	}
	else if(dy == 0){
		for (uint8_t x = x0; x <= x1 ; x++){
     96a:	cf 5f       	subi	r28, 0xFF	; 255
     96c:	1c 17       	cp	r17, r28
     96e:	b8 f7       	brcc	.-18     	; 0x95e <__stack+0x5f>
     970:	43 c0       	rjmp	.+134    	; 0x9f8 <__stack+0xf9>
// use bresenham's algorithm to write this function to draw a line
void drawline(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,uint8_t color) {

	uint8_t dx = abs(x1 - x0);
	uint8_t dy = abs(y1 - y0);
	float D = (float) dy/dx;
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__floatunsisf>
     97c:	2b 01       	movw	r4, r22
     97e:	3c 01       	movw	r6, r24
     980:	b5 01       	movw	r22, r10
     982:	77 27       	eor	r23, r23
     984:	07 2e       	mov	r0, r23
     986:	00 0c       	add	r0, r0
     988:	88 0b       	sbc	r24, r24
     98a:	99 0b       	sbc	r25, r25
     98c:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__floatsisf>
     990:	9b 01       	movw	r18, r22
     992:	ac 01       	movw	r20, r24
     994:	c3 01       	movw	r24, r6
     996:	b2 01       	movw	r22, r4
     998:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__divsf3>
     99c:	2b 01       	movw	r4, r22
     99e:	3c 01       	movw	r6, r24
     9a0:	0d 2f       	mov	r16, r29
     9a2:	81 2c       	mov	r8, r1
     9a4:	91 2c       	mov	r9, r1
     9a6:	54 01       	movw	r10, r8
			setpixel(buff, x, y0, color);
		}
	}
	else{
		for (uint8_t x = x0; x <= x1 ; x++){
			err = err + D;
     9a8:	a3 01       	movw	r20, r6
     9aa:	92 01       	movw	r18, r4
     9ac:	c5 01       	movw	r24, r10
     9ae:	b4 01       	movw	r22, r8
     9b0:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__addsf3>
     9b4:	4b 01       	movw	r8, r22
     9b6:	5c 01       	movw	r10, r24
			if (err >= 0.5){
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	5f e3       	ldi	r21, 0x3F	; 63
     9c0:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__gesf2>
     9c4:	88 23       	and	r24, r24
     9c6:	7c f0       	brlt	.+30     	; 0x9e6 <__stack+0xe7>
				if(y0 > y1){
     9c8:	fd 16       	cp	r15, r29
     9ca:	10 f4       	brcc	.+4      	; 0x9d0 <__stack+0xd1>
					y_min -= 1;
     9cc:	01 50       	subi	r16, 0x01	; 1
     9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <__stack+0xd3>
				}
				else{
					y_min += 1;
     9d0:	0f 5f       	subi	r16, 0xFF	; 255
				}
				err -= 1.0;
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	40 e8       	ldi	r20, 0x80	; 128
     9d8:	5f e3       	ldi	r21, 0x3F	; 63
     9da:	c5 01       	movw	r24, r10
     9dc:	b4 01       	movw	r22, r8
     9de:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__subsf3>
     9e2:	4b 01       	movw	r8, r22
     9e4:	5c 01       	movw	r10, r24
			}
			setpixel(buff, x, y_min, color);
     9e6:	2e 2d       	mov	r18, r14
     9e8:	40 2f       	mov	r20, r16
     9ea:	6c 2f       	mov	r22, r28
     9ec:	c6 01       	movw	r24, r12
     9ee:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
		for (uint8_t x = x0; x <= x1 ; x++){
			setpixel(buff, x, y0, color);
		}
	}
	else{
		for (uint8_t x = x0; x <= x1 ; x++){
     9f2:	cf 5f       	subi	r28, 0xFF	; 255
     9f4:	1c 17       	cp	r17, r28
     9f6:	c0 f6       	brcc	.-80     	; 0x9a8 <__stack+0xa9>
			}
			setpixel(buff, x, y_min, color);
		}
	}

}
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	bf 90       	pop	r11
     a0a:	af 90       	pop	r10
     a0c:	9f 90       	pop	r9
     a0e:	8f 90       	pop	r8
     a10:	7f 90       	pop	r7
     a12:	6f 90       	pop	r6
     a14:	5f 90       	pop	r5
     a16:	4f 90       	pop	r4
     a18:	08 95       	ret

00000a1a <fillrect>:

// function to draw a filled rectangle
void fillrect(uint8_t *buff,uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
     a1a:	8f 92       	push	r8
     a1c:	9f 92       	push	r9
     a1e:	af 92       	push	r10
     a20:	bf 92       	push	r11
     a22:	cf 92       	push	r12
     a24:	df 92       	push	r13
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	6c 01       	movw	r12, r24
     a34:	d6 2f       	mov	r29, r22
     a36:	f4 2e       	mov	r15, r20
	for(uint8_t x_dot = x; x_dot < (x + w); x_dot++){
     a38:	86 2f       	mov	r24, r22
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	4c 01       	movw	r8, r24
     a3e:	82 0e       	add	r8, r18
     a40:	91 1c       	adc	r9, r1
     a42:	88 15       	cp	r24, r8
     a44:	99 05       	cpc	r25, r9
     a46:	ac f0       	brlt	.+42     	; 0xa72 <fillrect+0x58>
     a48:	1e c0       	rjmp	.+60     	; 0xa86 <fillrect+0x6c>
		for(uint8_t y_dot = y; y_dot < (y + h); y_dot++){
     a4a:	cf 2d       	mov	r28, r15
			setpixel(buff, x_dot, y_dot, color);
     a4c:	2e 2d       	mov	r18, r14
     a4e:	4c 2f       	mov	r20, r28
     a50:	6d 2f       	mov	r22, r29
     a52:	c6 01       	movw	r24, r12
     a54:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
}

// function to draw a filled rectangle
void fillrect(uint8_t *buff,uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	for(uint8_t x_dot = x; x_dot < (x + w); x_dot++){
		for(uint8_t y_dot = y; y_dot < (y + h); y_dot++){
     a58:	cf 5f       	subi	r28, 0xFF	; 255
     a5a:	8c 2f       	mov	r24, r28
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	80 17       	cp	r24, r16
     a60:	91 07       	cpc	r25, r17
     a62:	a4 f3       	brlt	.-24     	; 0xa4c <fillrect+0x32>

}

// function to draw a filled rectangle
void fillrect(uint8_t *buff,uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	for(uint8_t x_dot = x; x_dot < (x + w); x_dot++){
     a64:	df 5f       	subi	r29, 0xFF	; 255
     a66:	8d 2f       	mov	r24, r29
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	88 15       	cp	r24, r8
     a6c:	99 05       	cpc	r25, r9
     a6e:	3c f0       	brlt	.+14     	; 0xa7e <fillrect+0x64>
     a70:	0a c0       	rjmp	.+20     	; 0xa86 <fillrect+0x6c>
		for(uint8_t y_dot = y; y_dot < (y + h); y_dot++){
     a72:	a4 2e       	mov	r10, r20
     a74:	b1 2c       	mov	r11, r1
     a76:	c5 01       	movw	r24, r10
     a78:	80 0f       	add	r24, r16
     a7a:	91 1d       	adc	r25, r1
     a7c:	8c 01       	movw	r16, r24
     a7e:	a0 16       	cp	r10, r16
     a80:	b1 06       	cpc	r11, r17
     a82:	1c f3       	brlt	.-58     	; 0xa4a <fillrect+0x30>
     a84:	ef cf       	rjmp	.-34     	; 0xa64 <fillrect+0x4a>
			setpixel(buff, x_dot, y_dot, color);
		}
	}
}
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	df 90       	pop	r13
     a94:	cf 90       	pop	r12
     a96:	bf 90       	pop	r11
     a98:	af 90       	pop	r10
     a9a:	9f 90       	pop	r9
     a9c:	8f 90       	pop	r8
     a9e:	08 95       	ret

00000aa0 <drawrect>:


// function to draw a rectangle
void drawrect(uint8_t *buff,uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
     aa0:	bf 92       	push	r11
     aa2:	cf 92       	push	r12
     aa4:	df 92       	push	r13
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	6c 01       	movw	r12, r24
     ab4:	16 2f       	mov	r17, r22
     ab6:	f4 2e       	mov	r15, r20
     ab8:	d2 2f       	mov	r29, r18
	drawline(buff, x, y, x, (y + h), color);
     aba:	c4 2f       	mov	r28, r20
     abc:	c0 0f       	add	r28, r16
     abe:	0c 2f       	mov	r16, r28
     ac0:	26 2f       	mov	r18, r22
     ac2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <drawline>
	drawline(buff, x, y, (x + w), y, color);
     ac6:	d1 0f       	add	r29, r17
     ac8:	0f 2d       	mov	r16, r15
     aca:	2d 2f       	mov	r18, r29
     acc:	4f 2d       	mov	r20, r15
     ace:	61 2f       	mov	r22, r17
     ad0:	c6 01       	movw	r24, r12
     ad2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <drawline>
	drawline(buff, (x + w), y, (x + w), (y + h), color);
     ad6:	0c 2f       	mov	r16, r28
     ad8:	2d 2f       	mov	r18, r29
     ada:	4f 2d       	mov	r20, r15
     adc:	6d 2f       	mov	r22, r29
     ade:	c6 01       	movw	r24, r12
     ae0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <drawline>
	drawline(buff, x, (y + h), (x + w), (y + h), color);
     ae4:	2d 2f       	mov	r18, r29
     ae6:	4c 2f       	mov	r20, r28
     ae8:	61 2f       	mov	r22, r17
     aea:	c6 01       	movw	r24, r12
     aec:	0e 94 64 04 	call	0x8c8	; 0x8c8 <drawline>
}
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	df 90       	pop	r13
     afe:	cf 90       	pop	r12
     b00:	bf 90       	pop	r11
     b02:	08 95       	ret

00000b04 <drawcircle>:


// function to draw a circle
void drawcircle(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t r,uint8_t color) {
     b04:	6f 92       	push	r6
     b06:	7f 92       	push	r7
     b08:	8f 92       	push	r8
     b0a:	9f 92       	push	r9
     b0c:	af 92       	push	r10
     b0e:	bf 92       	push	r11
     b10:	cf 92       	push	r12
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	ec 01       	movw	r28, r24
     b22:	96 2e       	mov	r9, r22
     b24:	84 2e       	mov	r8, r20
     b26:	a2 2e       	mov	r10, r18

	int8_t x = 0;
	int8_t y = r;
     b28:	f2 2e       	mov	r15, r18
	int8_t err = 3 - 2 * r;
     b2a:	82 2f       	mov	r24, r18
     b2c:	88 0f       	add	r24, r24
     b2e:	93 e0       	ldi	r25, 0x03	; 3
     b30:	e9 2e       	mov	r14, r25
     b32:	e8 1a       	sub	r14, r24
	setpixel(buff, x0 - x, y0 - y, color);
     b34:	14 2f       	mov	r17, r20
     b36:	12 1b       	sub	r17, r18
     b38:	20 2f       	mov	r18, r16
     b3a:	41 2f       	mov	r20, r17
     b3c:	ce 01       	movw	r24, r28
     b3e:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
	setpixel(buff, x0 + x, y0 - y, color);
     b42:	20 2f       	mov	r18, r16
     b44:	41 2f       	mov	r20, r17
     b46:	69 2d       	mov	r22, r9
     b48:	ce 01       	movw	r24, r28
     b4a:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
	setpixel(buff, x0 - x, y0 + y, color);
     b4e:	1a 2d       	mov	r17, r10
     b50:	18 0d       	add	r17, r8
     b52:	20 2f       	mov	r18, r16
     b54:	41 2f       	mov	r20, r17
     b56:	69 2d       	mov	r22, r9
     b58:	ce 01       	movw	r24, r28
     b5a:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
	setpixel(buff, x0 + x, y0 + y, color);
     b5e:	20 2f       	mov	r18, r16
     b60:	41 2f       	mov	r20, r17
     b62:	69 2d       	mov	r22, r9
     b64:	ce 01       	movw	r24, r28
     b66:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
	setpixel(buff, x0 - y, y0 - x, color);
     b6a:	d9 2c       	mov	r13, r9
     b6c:	da 18       	sub	r13, r10
     b6e:	20 2f       	mov	r18, r16
     b70:	48 2d       	mov	r20, r8
     b72:	6d 2d       	mov	r22, r13
     b74:	ce 01       	movw	r24, r28
     b76:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
	setpixel(buff, x0 + y, y0 - x, color);
     b7a:	1a 2d       	mov	r17, r10
     b7c:	19 0d       	add	r17, r9
     b7e:	20 2f       	mov	r18, r16
     b80:	48 2d       	mov	r20, r8
     b82:	61 2f       	mov	r22, r17
     b84:	ce 01       	movw	r24, r28
     b86:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
	setpixel(buff, x0 - y, y0 + x, color);
     b8a:	20 2f       	mov	r18, r16
     b8c:	48 2d       	mov	r20, r8
     b8e:	6d 2d       	mov	r22, r13
     b90:	ce 01       	movw	r24, r28
     b92:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
	setpixel(buff, x0 + y,y0 + x, color);
     b96:	20 2f       	mov	r18, r16
     b98:	48 2d       	mov	r20, r8
     b9a:	61 2f       	mov	r22, r17
     b9c:	ce 01       	movw	r24, r28
     b9e:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
	
	while(x < r){
     ba2:	b1 2c       	mov	r11, r1
     ba4:	1a 14       	cp	r1, r10
     ba6:	1b 04       	cpc	r1, r11
     ba8:	0c f0       	brlt	.+2      	; 0xbac <drawcircle+0xa8>
     baa:	62 c0       	rjmp	.+196    	; 0xc70 <drawcircle+0x16c>
     bac:	71 2c       	mov	r7, r1
     bae:	11 e0       	ldi	r17, 0x01	; 1
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0

		if(err < 0){
     bb4:	ee 20       	and	r14, r14
     bb6:	44 f4       	brge	.+16     	; 0xbc8 <drawcircle+0xc4>
			err += 4 * x + 6;
     bb8:	8e 2d       	mov	r24, r14
     bba:	87 0d       	add	r24, r7
     bbc:	0f 2e       	mov	r0, r31
     bbe:	f6 e0       	ldi	r31, 0x06	; 6
     bc0:	ef 2e       	mov	r14, r31
     bc2:	f0 2d       	mov	r31, r0
     bc4:	e8 0e       	add	r14, r24
     bc6:	09 c0       	rjmp	.+18     	; 0xbda <drawcircle+0xd6>
		}
		else{

			err += 4 * (x - y) + 10;
     bc8:	8f 19       	sub	r24, r15
     bca:	9a e0       	ldi	r25, 0x0A	; 10
     bcc:	9e 0d       	add	r25, r14
     bce:	e9 2e       	mov	r14, r25
     bd0:	24 e0       	ldi	r18, 0x04	; 4
     bd2:	82 9f       	mul	r24, r18
     bd4:	e0 0c       	add	r14, r0
     bd6:	11 24       	eor	r1, r1
			y--;
     bd8:	fa 94       	dec	r15
     bda:	69 2c       	mov	r6, r9
     bdc:	61 1a       	sub	r6, r17
		}
		x++;
		setpixel(buff, x0 - x, y0 - y, color);
     bde:	20 2f       	mov	r18, r16
     be0:	d8 2c       	mov	r13, r8
     be2:	df 18       	sub	r13, r15
     be4:	4d 2d       	mov	r20, r13
     be6:	66 2d       	mov	r22, r6
     be8:	ce 01       	movw	r24, r28
     bea:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
     bee:	c9 2c       	mov	r12, r9
     bf0:	c1 0e       	add	r12, r17
		setpixel(buff, x0 + x, y0 - y, color);
     bf2:	20 2f       	mov	r18, r16
     bf4:	4d 2d       	mov	r20, r13
     bf6:	6c 2d       	mov	r22, r12
     bf8:	ce 01       	movw	r24, r28
     bfa:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
		setpixel(buff, x0 - x, y0 + y, color);
     bfe:	20 2f       	mov	r18, r16
     c00:	d8 2c       	mov	r13, r8
     c02:	df 0c       	add	r13, r15
     c04:	4d 2d       	mov	r20, r13
     c06:	66 2d       	mov	r22, r6
     c08:	ce 01       	movw	r24, r28
     c0a:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
		setpixel(buff, x0 + x, y0 + y, color);
     c0e:	20 2f       	mov	r18, r16
     c10:	4d 2d       	mov	r20, r13
     c12:	6c 2d       	mov	r22, r12
     c14:	ce 01       	movw	r24, r28
     c16:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
     c1a:	d8 2c       	mov	r13, r8
     c1c:	d1 1a       	sub	r13, r17
		setpixel(buff, x0 - y, y0 - x, color);
     c1e:	20 2f       	mov	r18, r16
     c20:	4d 2d       	mov	r20, r13
     c22:	c9 2c       	mov	r12, r9
     c24:	cf 18       	sub	r12, r15
     c26:	6c 2d       	mov	r22, r12
     c28:	ce 01       	movw	r24, r28
     c2a:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
		setpixel(buff, x0 + y, y0 - x, color);
     c2e:	20 2f       	mov	r18, r16
     c30:	4d 2d       	mov	r20, r13
     c32:	d9 2c       	mov	r13, r9
     c34:	df 0c       	add	r13, r15
     c36:	6d 2d       	mov	r22, r13
     c38:	ce 01       	movw	r24, r28
     c3a:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
     c3e:	68 2c       	mov	r6, r8
     c40:	61 0e       	add	r6, r17
		setpixel(buff, x0 - y, y0 + x, color);
     c42:	20 2f       	mov	r18, r16
     c44:	46 2d       	mov	r20, r6
     c46:	6c 2d       	mov	r22, r12
     c48:	ce 01       	movw	r24, r28
     c4a:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
		setpixel(buff, x0 + y,y0 + x, color);
     c4e:	20 2f       	mov	r18, r16
     c50:	46 2d       	mov	r20, r6
     c52:	6d 2d       	mov	r22, r13
     c54:	ce 01       	movw	r24, r28
     c56:	0e 94 29 04 	call	0x852	; 0x852 <setpixel>
	setpixel(buff, x0 - y, y0 - x, color);
	setpixel(buff, x0 + y, y0 - x, color);
	setpixel(buff, x0 - y, y0 + x, color);
	setpixel(buff, x0 + y,y0 + x, color);
	
	while(x < r){
     c5a:	81 2f       	mov	r24, r17
     c5c:	01 2e       	mov	r0, r17
     c5e:	00 0c       	add	r0, r0
     c60:	99 0b       	sbc	r25, r25
     c62:	1f 5f       	subi	r17, 0xFF	; 255
     c64:	24 e0       	ldi	r18, 0x04	; 4
     c66:	72 0e       	add	r7, r18
     c68:	8a 15       	cp	r24, r10
     c6a:	9b 05       	cpc	r25, r11
     c6c:	0c f4       	brge	.+2      	; 0xc70 <drawcircle+0x16c>
     c6e:	a2 cf       	rjmp	.-188    	; 0xbb4 <drawcircle+0xb0>
		setpixel(buff, x0 - y, y0 - x, color);
		setpixel(buff, x0 + y, y0 - x, color);
		setpixel(buff, x0 - y, y0 + x, color);
		setpixel(buff, x0 + y,y0 + x, color);
	}
}
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	ff 90       	pop	r15
     c7a:	ef 90       	pop	r14
     c7c:	df 90       	pop	r13
     c7e:	cf 90       	pop	r12
     c80:	bf 90       	pop	r11
     c82:	af 90       	pop	r10
     c84:	9f 90       	pop	r9
     c86:	8f 90       	pop	r8
     c88:	7f 90       	pop	r7
     c8a:	6f 90       	pop	r6
     c8c:	08 95       	ret

00000c8e <uart_putchar>:
void uart_init(void);

static FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
static FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

int uart_putchar(char c, FILE *stream) {
     c8e:	cf 93       	push	r28
     c90:	c8 2f       	mov	r28, r24
	if (c == '\n') {
     c92:	8a 30       	cpi	r24, 0x0A	; 10
     c94:	19 f4       	brne	.+6      	; 0xc9c <uart_putchar+0xe>
		uart_putchar('\r', stream);
     c96:	8d e0       	ldi	r24, 0x0D	; 13
     c98:	0e 94 47 06 	call	0xc8e	; 0xc8e <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
     c9c:	e0 ec       	ldi	r30, 0xC0	; 192
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	85 ff       	sbrs	r24, 5
     ca4:	fd cf       	rjmp	.-6      	; 0xca0 <uart_putchar+0x12>
	UDR0 = c;
     ca6:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <uart_getchar>:

int uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
     cb2:	e0 ec       	ldi	r30, 0xC0	; 192
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	88 23       	and	r24, r24
     cba:	ec f7       	brge	.-6      	; 0xcb6 <uart_getchar+0x4>
	return UDR0;
     cbc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	08 95       	ret

00000cc4 <compare_function>:
/*** accelerator ***/
int compare_function(const void *a, const void *b)
{
	int *x = (int*)a;
	int *y = (int*)b;
	return *x-*y;
     cc4:	fc 01       	movw	r30, r24
     cc6:	80 81       	ld	r24, Z
     cc8:	91 81       	ldd	r25, Z+1	; 0x01
     cca:	fb 01       	movw	r30, r22
     ccc:	20 81       	ld	r18, Z
     cce:	31 81       	ldd	r19, Z+1	; 0x01
}
     cd0:	82 1b       	sub	r24, r18
     cd2:	93 0b       	sbc	r25, r19
     cd4:	08 95       	ret

00000cd6 <uart_init>:

void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
     cd6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
     cda:	87 e6       	ldi	r24, 0x67	; 103
     cdc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
     ce0:	e0 ec       	ldi	r30, 0xC0	; 192
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	8d 7f       	andi	r24, 0xFD	; 253
     ce8:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
     cea:	86 e0       	ldi	r24, 0x06	; 6
     cec:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
     cf0:	88 e1       	ldi	r24, 0x18	; 24
     cf2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    // Redirect stdin and stdout so functions like printf and getchar work.
	stdout = &uart_output;
     cf6:	e8 ea       	ldi	r30, 0xA8	; 168
     cf8:	f5 e0       	ldi	r31, 0x05	; 5
     cfa:	82 e2       	ldi	r24, 0x22	; 34
     cfc:	95 e0       	ldi	r25, 0x05	; 5
     cfe:	93 83       	std	Z+3, r25	; 0x03
     d00:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
     d02:	84 e1       	ldi	r24, 0x14	; 20
     d04:	95 e0       	ldi	r25, 0x05	; 5
     d06:	91 83       	std	Z+1, r25	; 0x01
     d08:	80 83       	st	Z, r24
     d0a:	08 95       	ret

00000d0c <init>:

struct Balls ball;

void init(void){
	//setting up the GPIO for back light
	DDRD |= 0x80;
     d0c:	57 9a       	sbi	0x0a, 7	; 10
	PORTD &= ~0x80;
     d0e:	5f 98       	cbi	0x0b, 7	; 11
	PORTD |= 0x00;
     d10:	8b b1       	in	r24, 0x0b	; 11
     d12:	8b b9       	out	0x0b, r24	; 11
	
	DDRB |= 0x05;
     d14:	84 b1       	in	r24, 0x04	; 4
     d16:	85 60       	ori	r24, 0x05	; 5
     d18:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~0x05;
     d1a:	85 b1       	in	r24, 0x05	; 5
     d1c:	8a 7f       	andi	r24, 0xFA	; 250
     d1e:	85 b9       	out	0x05, r24	; 5
	PORTB |= 0x00;
     d20:	85 b1       	in	r24, 0x05	; 5
     d22:	85 b9       	out	0x05, r24	; 5
	
	
	//LCD initialization
	lcd_init();
     d24:	0e 94 68 03 	call	0x6d0	; 0x6d0 <lcd_init>
	lcd_command(CMD_DISPLAY_ON);
     d28:	8f ea       	ldi	r24, 0xAF	; 175
     d2a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcd_command>
	lcd_set_brightness(0x20);
     d2e:	80 e2       	ldi	r24, 0x20	; 32
     d30:	0e 94 ba 03 	call	0x774	; 0x774 <lcd_set_brightness>
	//range: x:0-127,y:0-7
	write_buffer(buff);
     d34:	84 e0       	ldi	r24, 0x04	; 4
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	0e 94 c5 03 	call	0x78a	; 0x78a <write_buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d3c:	2a ea       	ldi	r18, 0xAA	; 170
     d3e:	36 ee       	ldi	r19, 0xE6	; 230
     d40:	86 e9       	ldi	r24, 0x96	; 150
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	21 50       	subi	r18, 0x01	; 1
     d46:	30 40       	sbci	r19, 0x00	; 0
     d48:	80 40       	sbci	r24, 0x00	; 0
     d4a:	90 40       	sbci	r25, 0x00	; 0
     d4c:	d9 f7       	brne	.-10     	; 0xd44 <init+0x38>
     d4e:	00 00       	nop
	_delay_ms(10000);
	clear_buffer(buff);
     d50:	84 e0       	ldi	r24, 0x04	; 4
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	0e 94 04 04 	call	0x808	; 0x808 <clear_buffer>
     d58:	2f ef       	ldi	r18, 0xFF	; 255
     d5a:	33 e2       	ldi	r19, 0x23	; 35
     d5c:	84 ef       	ldi	r24, 0xF4	; 244
     d5e:	21 50       	subi	r18, 0x01	; 1
     d60:	30 40       	sbci	r19, 0x00	; 0
     d62:	80 40       	sbci	r24, 0x00	; 0
     d64:	e1 f7       	brne	.-8      	; 0xd5e <init+0x52>
     d66:	00 c0       	rjmp	.+0      	; 0xd68 <init+0x5c>
     d68:	00 00       	nop
	_delay_ms(5000);
	displayChar++;
     d6a:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <displayChar>
     d6e:	8f 5f       	subi	r24, 0xFF	; 255
     d70:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <displayChar>
     d74:	08 95       	ret

00000d76 <ball_init>:
}

void ball_init(void){
	ball.x	= 63;
     d76:	e1 ea       	ldi	r30, 0xA1	; 161
     d78:	f5 e0       	ldi	r31, 0x05	; 5
     d7a:	8f e3       	ldi	r24, 0x3F	; 63
     d7c:	80 83       	st	Z, r24
	ball.y	= 13;
     d7e:	8d e0       	ldi	r24, 0x0D	; 13
     d80:	81 83       	std	Z+1, r24	; 0x01
	ball.dx = ((rand() % 2) & 1) ? 1 : -1;
     d82:	0e 94 08 14 	call	0x2810	; 0x2810 <rand>
     d86:	81 70       	andi	r24, 0x01	; 1
     d88:	90 78       	andi	r25, 0x80	; 128
     d8a:	99 23       	and	r25, r25
     d8c:	24 f4       	brge	.+8      	; 0xd96 <ball_init+0x20>
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	8e 6f       	ori	r24, 0xFE	; 254
     d92:	9f 6f       	ori	r25, 0xFF	; 255
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	80 fd       	sbrc	r24, 0
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <ball_init+0x28>
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <ball_init+0x2a>
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <ball+0x2>
	ball.dy = ((rand() % 2) & 1) ? 1 : -1;
     da4:	0e 94 08 14 	call	0x2810	; 0x2810 <rand>
     da8:	81 70       	andi	r24, 0x01	; 1
     daa:	90 78       	andi	r25, 0x80	; 128
     dac:	99 23       	and	r25, r25
     dae:	24 f4       	brge	.+8      	; 0xdb8 <ball_init+0x42>
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	8e 6f       	ori	r24, 0xFE	; 254
     db4:	9f 6f       	ori	r25, 0xFF	; 255
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	80 fd       	sbrc	r24, 0
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <ball_init+0x4a>
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	01 c0       	rjmp	.+2      	; 0xdc2 <ball_init+0x4c>
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	e1 ea       	ldi	r30, 0xA1	; 161
     dc4:	f5 e0       	ldi	r31, 0x05	; 5
     dc6:	83 83       	std	Z+3, r24	; 0x03
	ball.r	= 3;
     dc8:	83 e0       	ldi	r24, 0x03	; 3
     dca:	84 83       	std	Z+4, r24	; 0x04
     dcc:	08 95       	ret

00000dce <draw_background>:
}

void draw_background(void)
{
     dce:	ef 92       	push	r14
     dd0:	0f 93       	push	r16

	drawline(buff, 0 , 0, 127, 0, BLACK);
     dd2:	ee 24       	eor	r14, r14
     dd4:	e3 94       	inc	r14
     dd6:	00 e0       	ldi	r16, 0x00	; 0
     dd8:	2f e7       	ldi	r18, 0x7F	; 127
     dda:	40 e0       	ldi	r20, 0x00	; 0
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	84 e0       	ldi	r24, 0x04	; 4
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <drawline>
	drawline(buff, 0 , 0, 0, 63, BLACK);
     de6:	0f e3       	ldi	r16, 0x3F	; 63
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	84 e0       	ldi	r24, 0x04	; 4
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <drawline>
	drawline(buff, 0 , 63, 127, 63, BLACK);
     df6:	2f e7       	ldi	r18, 0x7F	; 127
     df8:	4f e3       	ldi	r20, 0x3F	; 63
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	84 e0       	ldi	r24, 0x04	; 4
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	0e 94 64 04 	call	0x8c8	; 0x8c8 <drawline>
	drawline(buff, 127 , 0, 127, 63, BLACK);
     e04:	2f e7       	ldi	r18, 0x7F	; 127
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	6f e7       	ldi	r22, 0x7F	; 127
     e0a:	84 e0       	ldi	r24, 0x04	; 4
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <drawline>
	
	drawline(buff, 63 , 0, 63, 4, BLACK);
     e12:	04 e0       	ldi	r16, 0x04	; 4
     e14:	2f e3       	ldi	r18, 0x3F	; 63
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	6f e3       	ldi	r22, 0x3F	; 63
     e1a:	84 e0       	ldi	r24, 0x04	; 4
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <drawline>
	drawline(buff, 63 , 8, 63, 12, BLACK);
     e22:	0c e0       	ldi	r16, 0x0C	; 12
     e24:	2f e3       	ldi	r18, 0x3F	; 63
     e26:	48 e0       	ldi	r20, 0x08	; 8
     e28:	6f e3       	ldi	r22, 0x3F	; 63
     e2a:	84 e0       	ldi	r24, 0x04	; 4
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <drawline>
	drawline(buff, 63 , 16, 63, 20, BLACK);
     e32:	04 e1       	ldi	r16, 0x14	; 20
     e34:	2f e3       	ldi	r18, 0x3F	; 63
     e36:	40 e1       	ldi	r20, 0x10	; 16
     e38:	6f e3       	ldi	r22, 0x3F	; 63
     e3a:	84 e0       	ldi	r24, 0x04	; 4
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <drawline>
	drawline(buff, 63 , 24, 63, 28, BLACK);
     e42:	0c e1       	ldi	r16, 0x1C	; 28
     e44:	2f e3       	ldi	r18, 0x3F	; 63
     e46:	48 e1       	ldi	r20, 0x18	; 24
     e48:	6f e3       	ldi	r22, 0x3F	; 63
     e4a:	84 e0       	ldi	r24, 0x04	; 4
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <drawline>

	drawline(buff, 63 , 59, 63, 63, BLACK);
     e52:	0f e3       	ldi	r16, 0x3F	; 63
     e54:	2f e3       	ldi	r18, 0x3F	; 63
     e56:	4b e3       	ldi	r20, 0x3B	; 59
     e58:	6f e3       	ldi	r22, 0x3F	; 63
     e5a:	84 e0       	ldi	r24, 0x04	; 4
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <drawline>
	drawline(buff, 63 , 51, 63, 55, BLACK);
     e62:	07 e3       	ldi	r16, 0x37	; 55
     e64:	2f e3       	ldi	r18, 0x3F	; 63
     e66:	43 e3       	ldi	r20, 0x33	; 51
     e68:	6f e3       	ldi	r22, 0x3F	; 63
     e6a:	84 e0       	ldi	r24, 0x04	; 4
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <drawline>
	drawline(buff, 63 , 43, 63, 47, BLACK);
     e72:	0f e2       	ldi	r16, 0x2F	; 47
     e74:	2f e3       	ldi	r18, 0x3F	; 63
     e76:	4b e2       	ldi	r20, 0x2B	; 43
     e78:	6f e3       	ldi	r22, 0x3F	; 63
     e7a:	84 e0       	ldi	r24, 0x04	; 4
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <drawline>
	drawline(buff, 63 , 35, 63, 39, BLACK);
     e82:	07 e2       	ldi	r16, 0x27	; 39
     e84:	2f e3       	ldi	r18, 0x3F	; 63
     e86:	43 e2       	ldi	r20, 0x23	; 35
     e88:	6f e3       	ldi	r22, 0x3F	; 63
     e8a:	84 e0       	ldi	r24, 0x04	; 4
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <drawline>

}
     e92:	0f 91       	pop	r16
     e94:	ef 90       	pop	r14
     e96:	08 95       	ret

00000e98 <draw_mood>:
void draw_mood(void){
     e98:	ef 92       	push	r14
     e9a:	0f 93       	push	r16
	clear_buffer(buff);
     e9c:	84 e0       	ldi	r24, 0x04	; 4
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	0e 94 04 04 	call	0x808	; 0x808 <clear_buffer>
	drawstring(buff, 5, 0, "Please Select Mode");
     ea4:	20 e3       	ldi	r18, 0x30	; 48
     ea6:	35 e0       	ldi	r19, 0x05	; 5
     ea8:	40 e0       	ldi	r20, 0x00	; 0
     eaa:	65 e0       	ldi	r22, 0x05	; 5
     eac:	84 e0       	ldi	r24, 0x04	; 4
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	0e 94 42 04 	call	0x884	; 0x884 <drawstring>
	drawrect(buff, 20, 12, 97, 16, BLACK);
     eb4:	ee 24       	eor	r14, r14
     eb6:	e3 94       	inc	r14
     eb8:	00 e1       	ldi	r16, 0x10	; 16
     eba:	21 e6       	ldi	r18, 0x61	; 97
     ebc:	4c e0       	ldi	r20, 0x0C	; 12
     ebe:	64 e1       	ldi	r22, 0x14	; 20
     ec0:	84 e0       	ldi	r24, 0x04	; 4
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	0e 94 50 05 	call	0xaa0	; 0xaa0 <drawrect>
	drawstring(buff, 35, 2, "Touch");
     ec8:	23 e4       	ldi	r18, 0x43	; 67
     eca:	35 e0       	ldi	r19, 0x05	; 5
     ecc:	42 e0       	ldi	r20, 0x02	; 2
     ece:	63 e2       	ldi	r22, 0x23	; 35
     ed0:	84 e0       	ldi	r24, 0x04	; 4
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	0e 94 42 04 	call	0x884	; 0x884 <drawstring>
	drawrect(buff, 20, 28, 97, 16, BLACK);
     ed8:	21 e6       	ldi	r18, 0x61	; 97
     eda:	4c e1       	ldi	r20, 0x1C	; 28
     edc:	64 e1       	ldi	r22, 0x14	; 20
     ede:	84 e0       	ldi	r24, 0x04	; 4
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	0e 94 50 05 	call	0xaa0	; 0xaa0 <drawrect>
	drawstring(buff, 35, 4, "Accelerometer");
     ee6:	29 e4       	ldi	r18, 0x49	; 73
     ee8:	35 e0       	ldi	r19, 0x05	; 5
     eea:	44 e0       	ldi	r20, 0x04	; 4
     eec:	63 e2       	ldi	r22, 0x23	; 35
     eee:	84 e0       	ldi	r24, 0x04	; 4
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	0e 94 42 04 	call	0x884	; 0x884 <drawstring>
	drawrect(buff, 20, 44, 97, 16, BLACK);
     ef6:	21 e6       	ldi	r18, 0x61	; 97
     ef8:	4c e2       	ldi	r20, 0x2C	; 44
     efa:	64 e1       	ldi	r22, 0x14	; 20
     efc:	84 e0       	ldi	r24, 0x04	; 4
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	0e 94 50 05 	call	0xaa0	; 0xaa0 <drawrect>
	drawstring(buff, 35, 6, "Two Players");
     f04:	27 e5       	ldi	r18, 0x57	; 87
     f06:	35 e0       	ldi	r19, 0x05	; 5
     f08:	46 e0       	ldi	r20, 0x06	; 6
     f0a:	63 e2       	ldi	r22, 0x23	; 35
     f0c:	84 e0       	ldi	r24, 0x04	; 4
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	0e 94 42 04 	call	0x884	; 0x884 <drawstring>
	write_buffer(buff);
     f14:	84 e0       	ldi	r24, 0x04	; 4
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	0e 94 c5 03 	call	0x78a	; 0x78a <write_buffer>
}
     f1c:	0f 91       	pop	r16
     f1e:	ef 90       	pop	r14
     f20:	08 95       	ret

00000f22 <choose_mood>:
int choose_mood(void){
     f22:	cf 92       	push	r12
     f24:	df 92       	push	r13
     f26:	ef 92       	push	r14
     f28:	0f 93       	push	r16
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	ec 97       	sbiw	r28, 0x3c	; 60
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
	int temp_counter = 0;
	int temp_x_array[30] = {0};
	int temp_y_array[30] = {0};	
     f40:	fe 01       	movw	r30, r28
     f42:	31 96       	adiw	r30, 0x01	; 1
     f44:	8c e3       	ldi	r24, 0x3C	; 60
     f46:	df 01       	movw	r26, r30
     f48:	1d 92       	st	X+, r1
     f4a:	8a 95       	dec	r24
     f4c:	e9 f7       	brne	.-6      	; 0xf48 <choose_mood+0x26>
	drawrect(buff, 20, 44, 97, 16, BLACK);
	drawstring(buff, 35, 6, "Two Players");
	write_buffer(buff);
}
int choose_mood(void){
	int temp_counter = 0;
     f4e:	00 e0       	ldi	r16, 0x00	; 0
     f50:	10 e0       	ldi	r17, 0x00	; 0
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <choose_mood+0x36>
			temp_y_array[temp_counter-1] = touch_yvalue();
			temp_counter++;
			_delay_ms(2);
		}
		else{
			temp_counter=0;
     f54:	00 e0       	ldi	r16, 0x00	; 0
     f56:	10 e0       	ldi	r17, 0x00	; 0
	int temp_sum_y = 0;
	int avg_x = 0;
	int avg_y = 0;

	while(temp_counter<30){
		if (touch_detect()==1){
     f58:	0e 94 30 0c 	call	0x1860	; 0x1860 <touch_detect>
     f5c:	6c 01       	movw	r12, r24
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	c9 f7       	brne	.-14     	; 0xf54 <choose_mood+0x32>
			temp_x_array[temp_counter-1] = touch_xvalue();
     f62:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <touch_xvalue>
			temp_y_array[temp_counter-1] = touch_yvalue();
     f66:	0e 94 18 0c 	call	0x1830	; 0x1830 <touch_yvalue>
     f6a:	f8 01       	movw	r30, r16
     f6c:	31 97       	sbiw	r30, 0x01	; 1
     f6e:	ee 0f       	add	r30, r30
     f70:	ff 1f       	adc	r31, r31
     f72:	21 e0       	ldi	r18, 0x01	; 1
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	2c 0f       	add	r18, r28
     f78:	3d 1f       	adc	r19, r29
     f7a:	e2 0f       	add	r30, r18
     f7c:	f3 1f       	adc	r31, r19
     f7e:	91 83       	std	Z+1, r25	; 0x01
     f80:	80 83       	st	Z, r24
			temp_counter++;
     f82:	0f 5f       	subi	r16, 0xFF	; 255
     f84:	1f 4f       	sbci	r17, 0xFF	; 255
     f86:	8f e3       	ldi	r24, 0x3F	; 63
     f88:	9f e1       	ldi	r25, 0x1F	; 31
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <choose_mood+0x68>
     f8e:	00 c0       	rjmp	.+0      	; 0xf90 <choose_mood+0x6e>
     f90:	00 00       	nop
	int temp_sum_x = 0;
	int temp_sum_y = 0;
	int avg_x = 0;
	int avg_y = 0;

	while(temp_counter<30){
     f92:	0e 31       	cpi	r16, 0x1E	; 30
     f94:	11 05       	cpc	r17, r1
     f96:	04 f3       	brlt	.-64     	; 0xf58 <choose_mood+0x36>
     f98:	f9 01       	movw	r30, r18
     f9a:	ae 01       	movw	r20, r28
     f9c:	43 5c       	subi	r20, 0xC3	; 195
     f9e:	5f 4f       	sbci	r21, 0xFF	; 255
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	for (int i=0; i<30; i++){
		temp_sum_x += temp_x_array[i];
		temp_sum_y += temp_y_array[i];	
     fa4:	21 91       	ld	r18, Z+
     fa6:	31 91       	ld	r19, Z+
     fa8:	82 0f       	add	r24, r18
     faa:	93 1f       	adc	r25, r19
		else{
			temp_counter=0;
		}
	}

	for (int i=0; i<30; i++){
     fac:	4e 17       	cp	r20, r30
     fae:	5f 07       	cpc	r21, r31
     fb0:	c9 f7       	brne	.-14     	; 0xfa4 <choose_mood+0x82>
	}

	avg_x = temp_sum_x/30;
	avg_y = temp_sum_y/30;

	if (360>=avg_y && avg_y>200){
     fb2:	6e e1       	ldi	r22, 0x1E	; 30
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divmodhi4>
     fba:	cb 01       	movw	r24, r22
     fbc:	89 5c       	subi	r24, 0xC9	; 201
     fbe:	91 09       	sbc	r25, r1
     fc0:	80 3a       	cpi	r24, 0xA0	; 160
     fc2:	91 05       	cpc	r25, r1
     fc4:	30 f5       	brcc	.+76     	; 0x1012 <choose_mood+0xf0>
		clear_buffer(buff);
     fc6:	84 e0       	ldi	r24, 0x04	; 4
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	0e 94 04 04 	call	0x808	; 0x808 <clear_buffer>
		drawrect(buff, 20, 12, 97, 16, BLACK);
     fce:	ee 24       	eor	r14, r14
     fd0:	e3 94       	inc	r14
     fd2:	00 e1       	ldi	r16, 0x10	; 16
     fd4:	21 e6       	ldi	r18, 0x61	; 97
     fd6:	4c e0       	ldi	r20, 0x0C	; 12
     fd8:	64 e1       	ldi	r22, 0x14	; 20
     fda:	84 e0       	ldi	r24, 0x04	; 4
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	0e 94 50 05 	call	0xaa0	; 0xaa0 <drawrect>
		drawstring(buff, 35, 2, "Touch");
     fe2:	23 e4       	ldi	r18, 0x43	; 67
     fe4:	35 e0       	ldi	r19, 0x05	; 5
     fe6:	42 e0       	ldi	r20, 0x02	; 2
     fe8:	63 e2       	ldi	r22, 0x23	; 35
     fea:	84 e0       	ldi	r24, 0x04	; 4
     fec:	91 e0       	ldi	r25, 0x01	; 1
     fee:	0e 94 42 04 	call	0x884	; 0x884 <drawstring>
		write_buffer(buff);
     ff2:	84 e0       	ldi	r24, 0x04	; 4
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	0e 94 c5 03 	call	0x78a	; 0x78a <write_buffer>
     ffa:	9f ef       	ldi	r25, 0xFF	; 255
     ffc:	a9 e7       	ldi	r26, 0x79	; 121
     ffe:	bf e3       	ldi	r27, 0x3F	; 63
    1000:	91 50       	subi	r25, 0x01	; 1
    1002:	a0 40       	sbci	r26, 0x00	; 0
    1004:	b0 40       	sbci	r27, 0x00	; 0
    1006:	e1 f7       	brne	.-8      	; 0x1000 <choose_mood+0xde>
    1008:	00 c0       	rjmp	.+0      	; 0x100a <choose_mood+0xe8>
    100a:	00 00       	nop
		_delay_ms(1300);
		return MOOD_TOUCH;
    100c:	c1 2c       	mov	r12, r1
    100e:	d1 2c       	mov	r13, r1
    1010:	58 c0       	rjmp	.+176    	; 0x10c2 <choose_mood+0x1a0>
	}
	else if (480>=avg_y && avg_y>360){
    1012:	cb 01       	movw	r24, r22
    1014:	89 56       	subi	r24, 0x69	; 105
    1016:	91 40       	sbci	r25, 0x01	; 1
    1018:	88 37       	cpi	r24, 0x78	; 120
    101a:	91 05       	cpc	r25, r1
    101c:	20 f5       	brcc	.+72     	; 0x1066 <choose_mood+0x144>
		clear_buffer(buff);
    101e:	84 e0       	ldi	r24, 0x04	; 4
    1020:	91 e0       	ldi	r25, 0x01	; 1
    1022:	0e 94 04 04 	call	0x808	; 0x808 <clear_buffer>
		drawrect(buff, 20, 12, 97, 16, BLACK);
    1026:	ee 24       	eor	r14, r14
    1028:	e3 94       	inc	r14
    102a:	00 e1       	ldi	r16, 0x10	; 16
    102c:	21 e6       	ldi	r18, 0x61	; 97
    102e:	4c e0       	ldi	r20, 0x0C	; 12
    1030:	64 e1       	ldi	r22, 0x14	; 20
    1032:	84 e0       	ldi	r24, 0x04	; 4
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	0e 94 50 05 	call	0xaa0	; 0xaa0 <drawrect>
		drawstring(buff, 35, 2, "Accelerometer");
    103a:	29 e4       	ldi	r18, 0x49	; 73
    103c:	35 e0       	ldi	r19, 0x05	; 5
    103e:	42 e0       	ldi	r20, 0x02	; 2
    1040:	63 e2       	ldi	r22, 0x23	; 35
    1042:	84 e0       	ldi	r24, 0x04	; 4
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	0e 94 42 04 	call	0x884	; 0x884 <drawstring>
		write_buffer(buff);
    104a:	84 e0       	ldi	r24, 0x04	; 4
    104c:	91 e0       	ldi	r25, 0x01	; 1
    104e:	0e 94 c5 03 	call	0x78a	; 0x78a <write_buffer>
    1052:	2f ef       	ldi	r18, 0xFF	; 255
    1054:	39 e7       	ldi	r19, 0x79	; 121
    1056:	8f e3       	ldi	r24, 0x3F	; 63
    1058:	21 50       	subi	r18, 0x01	; 1
    105a:	30 40       	sbci	r19, 0x00	; 0
    105c:	80 40       	sbci	r24, 0x00	; 0
    105e:	e1 f7       	brne	.-8      	; 0x1058 <choose_mood+0x136>
    1060:	00 c0       	rjmp	.+0      	; 0x1062 <choose_mood+0x140>
    1062:	00 00       	nop
		_delay_ms(1300);
		return MOOD_ACCEL;
    1064:	2e c0       	rjmp	.+92     	; 0x10c2 <choose_mood+0x1a0>
	}
	else if (650>=avg_y && avg_y>480){
    1066:	61 5e       	subi	r22, 0xE1	; 225
    1068:	71 40       	sbci	r23, 0x01	; 1
    106a:	6a 3a       	cpi	r22, 0xAA	; 170
    106c:	71 05       	cpc	r23, r1
    106e:	40 f5       	brcc	.+80     	; 0x10c0 <choose_mood+0x19e>
		clear_buffer(buff);
    1070:	84 e0       	ldi	r24, 0x04	; 4
    1072:	91 e0       	ldi	r25, 0x01	; 1
    1074:	0e 94 04 04 	call	0x808	; 0x808 <clear_buffer>
		drawrect(buff, 20, 12, 97, 16, BLACK);
    1078:	ee 24       	eor	r14, r14
    107a:	e3 94       	inc	r14
    107c:	00 e1       	ldi	r16, 0x10	; 16
    107e:	21 e6       	ldi	r18, 0x61	; 97
    1080:	4c e0       	ldi	r20, 0x0C	; 12
    1082:	64 e1       	ldi	r22, 0x14	; 20
    1084:	84 e0       	ldi	r24, 0x04	; 4
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	0e 94 50 05 	call	0xaa0	; 0xaa0 <drawrect>
		drawstring(buff, 35, 2, "Two Players");
    108c:	27 e5       	ldi	r18, 0x57	; 87
    108e:	35 e0       	ldi	r19, 0x05	; 5
    1090:	42 e0       	ldi	r20, 0x02	; 2
    1092:	63 e2       	ldi	r22, 0x23	; 35
    1094:	84 e0       	ldi	r24, 0x04	; 4
    1096:	91 e0       	ldi	r25, 0x01	; 1
    1098:	0e 94 42 04 	call	0x884	; 0x884 <drawstring>
		write_buffer(buff);
    109c:	84 e0       	ldi	r24, 0x04	; 4
    109e:	91 e0       	ldi	r25, 0x01	; 1
    10a0:	0e 94 c5 03 	call	0x78a	; 0x78a <write_buffer>
    10a4:	9f ef       	ldi	r25, 0xFF	; 255
    10a6:	a9 e7       	ldi	r26, 0x79	; 121
    10a8:	bf e3       	ldi	r27, 0x3F	; 63
    10aa:	91 50       	subi	r25, 0x01	; 1
    10ac:	a0 40       	sbci	r26, 0x00	; 0
    10ae:	b0 40       	sbci	r27, 0x00	; 0
    10b0:	e1 f7       	brne	.-8      	; 0x10aa <choose_mood+0x188>
    10b2:	00 c0       	rjmp	.+0      	; 0x10b4 <choose_mood+0x192>
    10b4:	00 00       	nop
		_delay_ms(1300);
		return MOOD_TWOPL;
    10b6:	68 94       	set
    10b8:	cc 24       	eor	r12, r12
    10ba:	c1 f8       	bld	r12, 1
    10bc:	d1 2c       	mov	r13, r1
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <choose_mood+0x1a0>
	}
}
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <choose_mood+0x1a4>
    10c2:	8c 2d       	mov	r24, r12
    10c4:	9d 2d       	mov	r25, r13
    10c6:	ec 96       	adiw	r28, 0x3c	; 60
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	08 95       	ret

000010e2 <score>:

void score(void){
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	2e 97       	sbiw	r28, 0x0e	; 14
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
	char player1_score_display[] = "Score:";
    10f6:	87 e0       	ldi	r24, 0x07	; 7
    10f8:	e3 e6       	ldi	r30, 0x63	; 99
    10fa:	f5 e0       	ldi	r31, 0x05	; 5
    10fc:	de 01       	movw	r26, r28
    10fe:	11 96       	adiw	r26, 0x01	; 1
    1100:	01 90       	ld	r0, Z+
    1102:	0d 92       	st	X+, r0
    1104:	8a 95       	dec	r24
    1106:	e1 f7       	brne	.-8      	; 0x1100 <score+0x1e>
	char player2_score_display[] = "Score:";
    1108:	87 e0       	ldi	r24, 0x07	; 7
    110a:	e3 e6       	ldi	r30, 0x63	; 99
    110c:	f5 e0       	ldi	r31, 0x05	; 5
    110e:	de 01       	movw	r26, r28
    1110:	18 96       	adiw	r26, 0x08	; 8
    1112:	01 90       	ld	r0, Z+
    1114:	0d 92       	st	X+, r0
    1116:	8a 95       	dec	r24
    1118:	e1 f7       	brne	.-8      	; 0x1112 <score+0x30>
	drawstring(buff, 15, 0, player1_score_display);
    111a:	9e 01       	movw	r18, r28
    111c:	2f 5f       	subi	r18, 0xFF	; 255
    111e:	3f 4f       	sbci	r19, 0xFF	; 255
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	6f e0       	ldi	r22, 0x0F	; 15
    1124:	84 e0       	ldi	r24, 0x04	; 4
    1126:	91 e0       	ldi	r25, 0x01	; 1
    1128:	0e 94 42 04 	call	0x884	; 0x884 <drawstring>
	drawstring(buff, 76, 0, player2_score_display);
    112c:	9e 01       	movw	r18, r28
    112e:	28 5f       	subi	r18, 0xF8	; 248
    1130:	3f 4f       	sbci	r19, 0xFF	; 255
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	6c e4       	ldi	r22, 0x4C	; 76
    1136:	84 e0       	ldi	r24, 0x04	; 4
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	0e 94 42 04 	call	0x884	; 0x884 <drawstring>
	drawchar(buff, 50, 0, play1_score + 48);
    113e:	20 91 9f 05 	lds	r18, 0x059F	; 0x80059f <play1_score>
    1142:	20 5d       	subi	r18, 0xD0	; 208
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	62 e3       	ldi	r22, 0x32	; 50
    1148:	84 e0       	ldi	r24, 0x04	; 4
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	0e 94 0d 04 	call	0x81a	; 0x81a <drawchar>
	drawchar(buff, 111, 0, play2_score + 48);
    1150:	20 91 9e 05 	lds	r18, 0x059E	; 0x80059e <play2_score>
    1154:	20 5d       	subi	r18, 0xD0	; 208
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	6f e6       	ldi	r22, 0x6F	; 111
    115a:	84 e0       	ldi	r24, 0x04	; 4
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	0e 94 0d 04 	call	0x81a	; 0x81a <drawchar>
}
    1162:	2e 96       	adiw	r28, 0x0e	; 14
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	08 95       	ret

00001174 <move_paddle_ai>:
	}
	return win;
}

int move_paddle_ai(int c_ai, int ball_y){
	if(c_ai <= 0){
    1174:	18 16       	cp	r1, r24
    1176:	19 06       	cpc	r1, r25
    1178:	14 f0       	brlt	.+4      	; 0x117e <move_paddle_ai+0xa>
		c_ai++;
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	08 95       	ret
	}
	else if(c_ai + 10 >= 63){
    117e:	9c 01       	movw	r18, r24
    1180:	26 5f       	subi	r18, 0xF6	; 246
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	2f 33       	cpi	r18, 0x3F	; 63
    1186:	31 05       	cpc	r19, r1
    1188:	14 f0       	brlt	.+4      	; 0x118e <move_paddle_ai+0x1a>
		c_ai--;
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	08 95       	ret
	}
	else{
		if(ball_y > c_ai + 5){
    118e:	9c 01       	movw	r18, r24
    1190:	2b 5f       	subi	r18, 0xFB	; 251
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	26 17       	cp	r18, r22
    1196:	37 07       	cpc	r19, r23
    1198:	14 f4       	brge	.+4      	; 0x119e <move_paddle_ai+0x2a>
			c_ai++;
    119a:	01 96       	adiw	r24, 0x01	; 1
    119c:	08 95       	ret
		}
		else if(ball_y < c_ai + 5){
    119e:	62 17       	cp	r22, r18
    11a0:	73 07       	cpc	r23, r19
    11a2:	0c f4       	brge	.+2      	; 0x11a6 <move_paddle_ai+0x32>
			c_ai--;
    11a4:	01 97       	sbiw	r24, 0x01	; 1
		}
	}
	return c_ai;
}
    11a6:	08 95       	ret

000011a8 <move_paddle_pl1>:

int move_paddle_pl1(int x_value, int y_value, int p_c){
    11a8:	ef 92       	push	r14
    11aa:	ff 92       	push	r15
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	7c 01       	movw	r14, r24
    11b6:	8b 01       	movw	r16, r22
    11b8:	ea 01       	movw	r28, r20
	_Bool y_range = (y_value > 120) && (y_value < 630);
	_Bool x_range = (x_value >580);
	
	if(touch_detect() == 1){
    11ba:	0e 94 30 0c 	call	0x1860	; 0x1860 <touch_detect>
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	f1 f4       	brne	.+60     	; 0x11fe <move_paddle_pl1+0x56>
		if(y_range && x_range){
    11c2:	c8 01       	movw	r24, r16
    11c4:	89 57       	subi	r24, 0x79	; 121
    11c6:	91 09       	sbc	r25, r1
    11c8:	8d 3f       	cpi	r24, 0xFD	; 253
    11ca:	91 40       	sbci	r25, 0x01	; 1
    11cc:	c0 f4       	brcc	.+48     	; 0x11fe <move_paddle_pl1+0x56>
    11ce:	85 e4       	ldi	r24, 0x45	; 69
    11d0:	e8 16       	cp	r14, r24
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	f8 06       	cpc	r15, r24
    11d6:	9c f0       	brlt	.+38     	; 0x11fe <move_paddle_pl1+0x56>
			if(y_value < ((p_c * 8) + 120)){
    11d8:	ce 01       	movw	r24, r28
    11da:	0f 96       	adiw	r24, 0x0f	; 15
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	08 17       	cp	r16, r24
    11ea:	19 07       	cpc	r17, r25
    11ec:	14 f4       	brge	.+4      	; 0x11f2 <move_paddle_pl1+0x4a>
				p_c--;
    11ee:	21 97       	sbiw	r28, 0x01	; 1
    11f0:	06 c0       	rjmp	.+12     	; 0x11fe <move_paddle_pl1+0x56>
			}
			else if(y_value > (((p_c + 10) * 8) + 120)){
    11f2:	80 5b       	subi	r24, 0xB0	; 176
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	80 17       	cp	r24, r16
    11f8:	91 07       	cpc	r25, r17
    11fa:	0c f4       	brge	.+2      	; 0x11fe <move_paddle_pl1+0x56>
				p_c++;
    11fc:	21 96       	adiw	r28, 0x01	; 1
			}
		}
	}

	return p_c;
}
    11fe:	ce 01       	movw	r24, r28
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	1f 91       	pop	r17
    1206:	0f 91       	pop	r16
    1208:	ff 90       	pop	r15
    120a:	ef 90       	pop	r14
    120c:	08 95       	ret

0000120e <move_paddle_pl2>:

int move_paddle_pl2(int x_value, int y_value, int p_c){
    120e:	ef 92       	push	r14
    1210:	ff 92       	push	r15
    1212:	0f 93       	push	r16
    1214:	1f 93       	push	r17
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	7c 01       	movw	r14, r24
    121c:	8b 01       	movw	r16, r22
    121e:	ea 01       	movw	r28, r20
	_Bool y_range = (y_value > 120) && (y_value < 630);
	_Bool x_range = (x_value < 380);
	if(touch_detect() == 1){
    1220:	0e 94 30 0c 	call	0x1860	; 0x1860 <touch_detect>
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f4       	brne	.+60     	; 0x1264 <move_paddle_pl2+0x56>
		if(y_range && x_range){
    1228:	c8 01       	movw	r24, r16
    122a:	89 57       	subi	r24, 0x79	; 121
    122c:	91 09       	sbc	r25, r1
    122e:	8d 3f       	cpi	r24, 0xFD	; 253
    1230:	91 40       	sbci	r25, 0x01	; 1
    1232:	c0 f4       	brcc	.+48     	; 0x1264 <move_paddle_pl2+0x56>
    1234:	8c e7       	ldi	r24, 0x7C	; 124
    1236:	e8 16       	cp	r14, r24
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	f8 06       	cpc	r15, r24
    123c:	9c f4       	brge	.+38     	; 0x1264 <move_paddle_pl2+0x56>
			if(y_value < ((p_c * 8) + 120)){
    123e:	ce 01       	movw	r24, r28
    1240:	0f 96       	adiw	r24, 0x0f	; 15
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	08 17       	cp	r16, r24
    1250:	19 07       	cpc	r17, r25
    1252:	14 f4       	brge	.+4      	; 0x1258 <move_paddle_pl2+0x4a>
				p_c--;
    1254:	21 97       	sbiw	r28, 0x01	; 1
    1256:	06 c0       	rjmp	.+12     	; 0x1264 <move_paddle_pl2+0x56>
			}
			else if(y_value > (((p_c + 10) * 8) + 120)){
    1258:	80 5b       	subi	r24, 0xB0	; 176
    125a:	9f 4f       	sbci	r25, 0xFF	; 255
    125c:	80 17       	cp	r24, r16
    125e:	91 07       	cpc	r25, r17
    1260:	0c f4       	brge	.+2      	; 0x1264 <move_paddle_pl2+0x56>
				p_c++;
    1262:	21 96       	adiw	r28, 0x01	; 1
			}
		}
	}

	return p_c;
}
    1264:	ce 01       	movw	r24, r28
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	ff 90       	pop	r15
    1270:	ef 90       	pop	r14
    1272:	08 95       	ret

00001274 <move_paddle_pl1_acc>:

int move_paddle_pl1_acc(int ADC_value, int p_c){
	
	if(ADC_value > 360){
    1274:	89 36       	cpi	r24, 0x69	; 105
    1276:	21 e0       	ldi	r18, 0x01	; 1
    1278:	92 07       	cpc	r25, r18
    127a:	1c f0       	brlt	.+6      	; 0x1282 <move_paddle_pl1_acc+0xe>
		p_c++;
    127c:	6f 5f       	subi	r22, 0xFF	; 255
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	05 c0       	rjmp	.+10     	; 0x128c <move_paddle_pl1_acc+0x18>
	}
	else if(ADC_value < 300){
    1282:	8c 32       	cpi	r24, 0x2C	; 44
    1284:	91 40       	sbci	r25, 0x01	; 1
    1286:	14 f4       	brge	.+4      	; 0x128c <move_paddle_pl1_acc+0x18>
		p_c--;
    1288:	61 50       	subi	r22, 0x01	; 1
    128a:	71 09       	sbc	r23, r1
	}
	if(p_c < 2){
    128c:	62 30       	cpi	r22, 0x02	; 2
    128e:	71 05       	cpc	r23, r1
    1290:	14 f4       	brge	.+4      	; 0x1296 <move_paddle_pl1_acc+0x22>
		p_c++;
    1292:	6f 5f       	subi	r22, 0xFF	; 255
    1294:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	if(p_c > 50){
    1296:	63 33       	cpi	r22, 0x33	; 51
    1298:	71 05       	cpc	r23, r1
    129a:	14 f0       	brlt	.+4      	; 0x12a0 <move_paddle_pl1_acc+0x2c>
		p_c--;
    129c:	61 50       	subi	r22, 0x01	; 1
    129e:	71 09       	sbc	r23, r1
	}
	return p_c;
}
    12a0:	cb 01       	movw	r24, r22
    12a2:	08 95       	ret

000012a4 <draw_now>:

void draw_now(int c_ai, int c_pl, int ball_x, int ball_y)
{
    12a4:	ef 92       	push	r14
    12a6:	ff 92       	push	r15
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	d8 2f       	mov	r29, r24
    12b2:	c6 2f       	mov	r28, r22
    12b4:	14 2f       	mov	r17, r20
    12b6:	f2 2e       	mov	r15, r18
	clear_buffer(buff);
    12b8:	84 e0       	ldi	r24, 0x04	; 4
    12ba:	91 e0       	ldi	r25, 0x01	; 1
    12bc:	0e 94 04 04 	call	0x808	; 0x808 <clear_buffer>
	draw_background();
    12c0:	0e 94 e7 06 	call	0xdce	; 0xdce <draw_background>
	score();
    12c4:	0e 94 71 08 	call	0x10e2	; 0x10e2 <score>
	drawcircle(buff, ball_x, ball_y, 3, BLACK);
    12c8:	01 e0       	ldi	r16, 0x01	; 1
    12ca:	23 e0       	ldi	r18, 0x03	; 3
    12cc:	4f 2d       	mov	r20, r15
    12ce:	61 2f       	mov	r22, r17
    12d0:	84 e0       	ldi	r24, 0x04	; 4
    12d2:	91 e0       	ldi	r25, 0x01	; 1
    12d4:	0e 94 82 05 	call	0xb04	; 0xb04 <drawcircle>
	fillrect(buff, 2, c_ai, 3, 11, BLACK);
    12d8:	ee 24       	eor	r14, r14
    12da:	e3 94       	inc	r14
    12dc:	0b e0       	ldi	r16, 0x0B	; 11
    12de:	23 e0       	ldi	r18, 0x03	; 3
    12e0:	4d 2f       	mov	r20, r29
    12e2:	62 e0       	ldi	r22, 0x02	; 2
    12e4:	84 e0       	ldi	r24, 0x04	; 4
    12e6:	91 e0       	ldi	r25, 0x01	; 1
    12e8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fillrect>
	fillrect(buff, 122, c_pl, 3, 11, BLACK);
    12ec:	23 e0       	ldi	r18, 0x03	; 3
    12ee:	4c 2f       	mov	r20, r28
    12f0:	6a e7       	ldi	r22, 0x7A	; 122
    12f2:	84 e0       	ldi	r24, 0x04	; 4
    12f4:	91 e0       	ldi	r25, 0x01	; 1
    12f6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fillrect>
	write_buffer(buff);
    12fa:	84 e0       	ldi	r24, 0x04	; 4
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	0e 94 c5 03 	call	0x78a	; 0x78a <write_buffer>
	return 0;
}
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	ff 90       	pop	r15
    130c:	ef 90       	pop	r14
    130e:	08 95       	ret

00001310 <beep_tone>:

//buzzer
void beep_tone(){
	DDRB |= (1 << PORTB1);   // set Port B pin 1 to output
    1310:	21 9a       	sbi	0x04, 1	; 4
	TCCR1A |= (1 << COM1A0);
    1312:	e0 e8       	ldi	r30, 0x80	; 128
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	80 64       	ori	r24, 0x40	; 64
    131a:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10) | (1 << WGM12);
    131c:	a1 e8       	ldi	r26, 0x81	; 129
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	8c 91       	ld	r24, X
    1322:	89 60       	ori	r24, 0x09	; 9
    1324:	8c 93       	st	X, r24
	OCR1A =  1000; 
    1326:	88 ee       	ldi	r24, 0xE8	; 232
    1328:	93 e0       	ldi	r25, 0x03	; 3
    132a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    132e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1332:	2f ef       	ldi	r18, 0xFF	; 255
    1334:	80 e7       	ldi	r24, 0x70	; 112
    1336:	92 e0       	ldi	r25, 0x02	; 2
    1338:	21 50       	subi	r18, 0x01	; 1
    133a:	80 40       	sbci	r24, 0x00	; 0
    133c:	90 40       	sbci	r25, 0x00	; 0
    133e:	e1 f7       	brne	.-8      	; 0x1338 <beep_tone+0x28>
    1340:	00 c0       	rjmp	.+0      	; 0x1342 <beep_tone+0x32>
    1342:	00 00       	nop
	_delay_ms(50);
	TCCR1A &= ~(1 << COM1A0);
    1344:	80 81       	ld	r24, Z
    1346:	8f 7b       	andi	r24, 0xBF	; 191
    1348:	80 83       	st	Z, r24
    134a:	08 95       	ret

0000134c <move_ball>:
	drawstring(buff, 76, 0, player2_score_display);
	drawchar(buff, 50, 0, play1_score + 48);
	drawchar(buff, 111, 0, play2_score + 48);
}

int move_ball(int c_ai, int c_pl){
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	7c 01       	movw	r14, r24
    1358:	8b 01       	movw	r16, r22
	
	int win = 0;
	
	//update ball position
	ball.x += ball.dx;
    135a:	e1 ea       	ldi	r30, 0xA1	; 161
    135c:	f5 e0       	ldi	r31, 0x05	; 5
    135e:	c0 81       	ld	r28, Z
    1360:	82 81       	ldd	r24, Z+2	; 0x02
    1362:	c8 0f       	add	r28, r24
    1364:	c0 83       	st	Z, r28
	ball.y += ball.dy;
    1366:	23 81       	ldd	r18, Z+3	; 0x03
    1368:	81 81       	ldd	r24, Z+1	; 0x01
    136a:	82 0f       	add	r24, r18
    136c:	81 83       	std	Z+1, r24	; 0x01
	
	//ball boundary
	uint8_t	ball_left = ball.y - ball.r;
    136e:	94 81       	ldd	r25, Z+4	; 0x04
	uint8_t	ball_right = ball.y + ball.r;
    1370:	38 2f       	mov	r19, r24
    1372:	39 0f       	add	r19, r25
	uint8_t	ball_top = ball.x + ball.r;
    1374:	c9 0f       	add	r28, r25
	//game finish flag
	_Bool	game_finish;
	
	/*rebound judge*/
	//ball hit boundary
	if((ball_left <= 0) || (ball_right >= 63)){
    1376:	89 17       	cp	r24, r25
    1378:	11 f0       	breq	.+4      	; 0x137e <move_ball+0x32>
    137a:	3f 33       	cpi	r19, 0x3F	; 63
    137c:	40 f0       	brcs	.+16     	; 0x138e <move_ball+0x42>
		ball.dy = -ball.dy;
    137e:	21 95       	neg	r18
    1380:	20 93 a4 05 	sts	0x05A4, r18	; 0x8005a4 <ball+0x3>
		beep_tone();
    1384:	0e 94 88 09 	call	0x1310	; 0x1310 <beep_tone>
		PORTB &= ~(1 << PORTB0);
    1388:	28 98       	cbi	0x05, 0	; 5
		PORTB &= ~(1 << PORTB2);
    138a:	2a 98       	cbi	0x05, 2	; 5
		PORTD |= (1 << PORTD7);
    138c:	5f 9a       	sbi	0x0b, 7	; 11
	}

	hit_ai_paddle = (ball.x >= (122 - ball.r))
    138e:	e1 ea       	ldi	r30, 0xA1	; 161
    1390:	f5 e0       	ldi	r31, 0x05	; 5
    1392:	60 81       	ld	r22, Z
    1394:	46 2f       	mov	r20, r22
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	24 81       	ldd	r18, Z+4	; 0x04
    139a:	30 e0       	ldi	r19, 0x00	; 0
	&& (ball.y >= c_ai - 1) && (ball.y <= c_ai + 11);
    139c:	8a e7       	ldi	r24, 0x7A	; 122
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	82 1b       	sub	r24, r18
    13a2:	93 0b       	sbc	r25, r19
    13a4:	48 17       	cp	r20, r24
    13a6:	59 07       	cpc	r21, r25
    13a8:	0c f4       	brge	.+2      	; 0x13ac <move_ball+0x60>
    13aa:	58 c0       	rjmp	.+176    	; 0x145c <move_ball+0x110>
    13ac:	80 91 a2 05 	lds	r24, 0x05A2	; 0x8005a2 <ball+0x1>
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	f7 01       	movw	r30, r14
    13b4:	31 97       	sbiw	r30, 0x01	; 1
    13b6:	8e 17       	cp	r24, r30
    13b8:	9f 07       	cpc	r25, r31
    13ba:	0c f4       	brge	.+2      	; 0x13be <move_ball+0x72>
    13bc:	4f c0       	rjmp	.+158    	; 0x145c <move_ball+0x110>
    13be:	7b e0       	ldi	r23, 0x0B	; 11
    13c0:	e7 0e       	add	r14, r23
    13c2:	f1 1c       	adc	r15, r1
    13c4:	e8 16       	cp	r14, r24
    13c6:	f9 06       	cpc	r15, r25
    13c8:	0c f0       	brlt	.+2      	; 0x13cc <move_ball+0x80>
    13ca:	4f c0       	rjmp	.+158    	; 0x146a <move_ball+0x11e>
    13cc:	47 c0       	rjmp	.+142    	; 0x145c <move_ball+0x110>
		PORTB &= ~(1 << PORTB0);
		PORTB &= ~(1 << PORTB2);
		PORTD |= (1 << PORTD7);
	}

	hit_ai_paddle = (ball.x >= (122 - ball.r))
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	01 c0       	rjmp	.+2      	; 0x13d4 <move_ball+0x88>
    13d2:	21 e0       	ldi	r18, 0x01	; 1
	&& (ball.y >= c_ai - 1) && (ball.y <= c_ai + 11);
	
	hit_player_paddle = (ball.x <= (5 + ball.r))
	&& (ball.y >= c_pl - 1) && (ball.y <= c_pl + 11);
    13d4:	80 91 a2 05 	lds	r24, 0x05A2	; 0x8005a2 <ball+0x1>
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	a8 01       	movw	r20, r16
    13dc:	41 50       	subi	r20, 0x01	; 1
    13de:	51 09       	sbc	r21, r1
    13e0:	84 17       	cp	r24, r20
    13e2:	95 07       	cpc	r25, r21
    13e4:	c4 f1       	brlt	.+112    	; 0x1456 <move_ball+0x10a>
    13e6:	05 5f       	subi	r16, 0xF5	; 245
    13e8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ea:	08 17       	cp	r16, r24
    13ec:	19 07       	cpc	r17, r25
    13ee:	84 f5       	brge	.+96     	; 0x1450 <move_ball+0x104>
    13f0:	32 c0       	rjmp	.+100    	; 0x1456 <move_ball+0x10a>

	if (hit_ai_paddle){
		ball.dx = -ball.dx;
    13f2:	e1 ea       	ldi	r30, 0xA1	; 161
    13f4:	f5 e0       	ldi	r31, 0x05	; 5
    13f6:	82 81       	ldd	r24, Z+2	; 0x02
    13f8:	81 95       	neg	r24
    13fa:	82 83       	std	Z+2, r24	; 0x02
		ball.x  = ball.x - 3;
    13fc:	63 50       	subi	r22, 0x03	; 3
    13fe:	60 83       	st	Z, r22
		beep_tone();
    1400:	0e 94 88 09 	call	0x1310	; 0x1310 <beep_tone>
		PORTB &= ~(1 << PORTB0);
    1404:	28 98       	cbi	0x05, 0	; 5
		PORTB |= (1 << PORTB2);
    1406:	2a 9a       	sbi	0x05, 2	; 5
		PORTD &= ~(1 << PORTD7);
    1408:	5f 98       	cbi	0x0b, 7	; 11
    140a:	0c c0       	rjmp	.+24     	; 0x1424 <move_ball+0xd8>
	}
	else if (hit_player_paddle){
		ball.dx = -ball.dx;
    140c:	e1 ea       	ldi	r30, 0xA1	; 161
    140e:	f5 e0       	ldi	r31, 0x05	; 5
    1410:	82 81       	ldd	r24, Z+2	; 0x02
    1412:	81 95       	neg	r24
    1414:	82 83       	std	Z+2, r24	; 0x02
		ball.x  = ball.x + 3;
    1416:	6d 5f       	subi	r22, 0xFD	; 253
    1418:	60 83       	st	Z, r22
		beep_tone();
    141a:	0e 94 88 09 	call	0x1310	; 0x1310 <beep_tone>
		PORTB &= ~(1 << PORTB0);
    141e:	28 98       	cbi	0x05, 0	; 5
		PORTB |= (1 << PORTB2);
    1420:	2a 9a       	sbi	0x05, 2	; 5
		PORTD &= ~(1 << PORTD7);
    1422:	5f 98       	cbi	0x0b, 7	; 11
	}
	
	
	if(ball_top >= 126){
    1424:	ce 37       	cpi	r28, 0x7E	; 126
    1426:	40 f0       	brcs	.+16     	; 0x1438 <move_ball+0xec>
		play1_score ++;
    1428:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <play1_score>
    142c:	8f 5f       	subi	r24, 0xFF	; 255
    142e:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <play1_score>
		win = 1;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 c0       	rjmp	.+4      	; 0x143c <move_ball+0xf0>
	drawchar(buff, 111, 0, play2_score + 48);
}

int move_ball(int c_ai, int c_pl){
	
	int win = 0;
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e0       	ldi	r25, 0x00	; 0
	
	if(ball_top >= 126){
		play1_score ++;
		win = 1;
	}
	if(ball_top <= 2){
    143c:	c3 30       	cpi	r28, 0x03	; 3
    143e:	e0 f4       	brcc	.+56     	; 0x1478 <move_ball+0x12c>
		play2_score ++;
    1440:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <play2_score>
    1444:	8f 5f       	subi	r24, 0xFF	; 255
    1446:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <play2_score>
		win = 1;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
	}
	return win;
    144e:	14 c0       	rjmp	.+40     	; 0x1478 <move_ball+0x12c>
	&& (ball.y >= c_ai - 1) && (ball.y <= c_ai + 11);
	
	hit_player_paddle = (ball.x <= (5 + ball.r))
	&& (ball.y >= c_pl - 1) && (ball.y <= c_pl + 11);

	if (hit_ai_paddle){
    1450:	22 23       	and	r18, r18
    1452:	e1 f2       	breq	.-72     	; 0x140c <move_ball+0xc0>
    1454:	ce cf       	rjmp	.-100    	; 0x13f2 <move_ball+0xa6>
    1456:	21 11       	cpse	r18, r1
    1458:	cc cf       	rjmp	.-104    	; 0x13f2 <move_ball+0xa6>
    145a:	e4 cf       	rjmp	.-56     	; 0x1424 <move_ball+0xd8>

	hit_ai_paddle = (ball.x >= (122 - ball.r))
	&& (ball.y >= c_ai - 1) && (ball.y <= c_ai + 11);
	
	hit_player_paddle = (ball.x <= (5 + ball.r))
	&& (ball.y >= c_pl - 1) && (ball.y <= c_pl + 11);
    145c:	2b 5f       	subi	r18, 0xFB	; 251
    145e:	3f 4f       	sbci	r19, 0xFF	; 255
    1460:	24 17       	cp	r18, r20
    1462:	35 07       	cpc	r19, r21
    1464:	0c f0       	brlt	.+2      	; 0x1468 <move_ball+0x11c>
    1466:	b3 cf       	rjmp	.-154    	; 0x13ce <move_ball+0x82>
    1468:	dd cf       	rjmp	.-70     	; 0x1424 <move_ball+0xd8>
    146a:	2b 5f       	subi	r18, 0xFB	; 251
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	24 17       	cp	r18, r20
    1470:	35 07       	cpc	r19, r21
    1472:	0c f4       	brge	.+2      	; 0x1476 <move_ball+0x12a>
    1474:	be cf       	rjmp	.-132    	; 0x13f2 <move_ball+0xa6>
    1476:	ad cf       	rjmp	.-166    	; 0x13d2 <move_ball+0x86>
	if(ball_top <= 2){
		play2_score ++;
		win = 1;
	}
	return win;
}
    1478:	cf 91       	pop	r28
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	ff 90       	pop	r15
    1480:	ef 90       	pop	r14
    1482:	08 95       	ret

00001484 <repeated_filter>:
	int *y = (int*)b;
	return *x-*y;
}

int repeated_filter(int t_array[])
{
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	ec 01       	movw	r28, r24
	int n = sizeof(t_array)/sizeof(*t_array);
	qsort(t_array, n, sizeof(*t_array), compare_function);
    148a:	22 e6       	ldi	r18, 0x62	; 98
    148c:	36 e0       	ldi	r19, 0x06	; 6
    148e:	42 e0       	ldi	r20, 0x02	; 2
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	61 e0       	ldi	r22, 0x01	; 1
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	0e 94 18 12 	call	0x2430	; 0x2430 <qsort>
	if(curr_count>max_count){
		max_count = curr_count;
		res = t_array[n-1];
	}
	return res;
}
    149a:	88 81       	ld	r24, Y
    149c:	99 81       	ldd	r25, Y+1	; 0x01
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	08 95       	ret

000014a4 <filtered_ADC>:

int filtered_ADC(void){
	
	DDRC   |= 0x0;	// init PORTC to be all inputs
    14a4:	87 b1       	in	r24, 0x07	; 7
    14a6:	87 b9       	out	0x07, r24	; 7
	PORTC  &= ~(1 << PORTC4); // set PC0 active high
    14a8:	44 98       	cbi	0x08, 4	; 8
	
	ADMUX  |= (1 << REFS0); //AVcc refer
    14aa:	ec e7       	ldi	r30, 0x7C	; 124
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	80 64       	ori	r24, 0x40	; 64
    14b2:	80 83       	st	Z, r24
	ADMUX  |= 0x04;
    14b4:	80 81       	ld	r24, Z
    14b6:	84 60       	ori	r24, 0x04	; 4
    14b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); //turn on ADC
    14ba:	ea e7       	ldi	r30, 0x7A	; 122
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	80 68       	ori	r24, 0x80	; 128
    14c2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //division factor = 128, ADC works in
    14c4:	80 81       	ld	r24, Z
    14c6:	87 60       	ori	r24, 0x07	; 7
    14c8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); //Signal source, in this case is the free-running
    14ca:	80 81       	ld	r24, Z
    14cc:	80 62       	ori	r24, 0x20	; 32
    14ce:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //Start conversation
    14d0:	80 81       	ld	r24, Z
    14d2:	80 64       	ori	r24, 0x40	; 64
    14d4:	80 83       	st	Z, r24
	ADCSRB &= ~((1 << ADTS2)|(1 << ADTS1)|(1 << ADTS0));//ADC in free-running mode
    14d6:	eb e7       	ldi	r30, 0x7B	; 123
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	88 7f       	andi	r24, 0xF8	; 248
    14de:	80 83       	st	Z, r24
    14e0:	ea e8       	ldi	r30, 0x8A	; 138
    14e2:	f5 e0       	ldi	r31, 0x05	; 5
    14e4:	2e e9       	ldi	r18, 0x9E	; 158
    14e6:	35 e0       	ldi	r19, 0x05	; 5
		
	int count = 0;
	int adc_value = 0;
	static int adc_array[10] = { 0,0,0,0,0,0,0,0,0,0 };
	while (count<10){
		adc_array[count] = ADC;
    14e8:	a8 e7       	ldi	r26, 0x78	; 120
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	8d 91       	ld	r24, X+
    14ee:	9c 91       	ld	r25, X
    14f0:	11 97       	sbiw	r26, 0x01	; 1
    14f2:	81 93       	st	Z+, r24
    14f4:	91 93       	st	Z+, r25
	ADCSRB &= ~((1 << ADTS2)|(1 << ADTS1)|(1 << ADTS0));//ADC in free-running mode
		
	int count = 0;
	int adc_value = 0;
	static int adc_array[10] = { 0,0,0,0,0,0,0,0,0,0 };
	while (count<10){
    14f6:	e2 17       	cp	r30, r18
    14f8:	f3 07       	cpc	r31, r19
    14fa:	c1 f7       	brne	.-16     	; 0x14ec <filtered_ADC+0x48>
		adc_array[count] = ADC;

		count++;
	}
	adc_value = repeated_filter(adc_array);
    14fc:	8a e8       	ldi	r24, 0x8A	; 138
    14fe:	95 e0       	ldi	r25, 0x05	; 5
    1500:	0e 94 42 0a 	call	0x1484	; 0x1484 <repeated_filter>
}
    1504:	08 95       	ret

00001506 <game_over>:

void game_over(void){
    1506:	ef 92       	push	r14
    1508:	0f 93       	push	r16
	clear_buffer(buff);
    150a:	84 e0       	ldi	r24, 0x04	; 4
    150c:	91 e0       	ldi	r25, 0x01	; 1
    150e:	0e 94 04 04 	call	0x808	; 0x808 <clear_buffer>
	drawrect(buff, 20, 12, 97, 16, BLACK);
    1512:	ee 24       	eor	r14, r14
    1514:	e3 94       	inc	r14
    1516:	00 e1       	ldi	r16, 0x10	; 16
    1518:	21 e6       	ldi	r18, 0x61	; 97
    151a:	4c e0       	ldi	r20, 0x0C	; 12
    151c:	64 e1       	ldi	r22, 0x14	; 20
    151e:	84 e0       	ldi	r24, 0x04	; 4
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	0e 94 50 05 	call	0xaa0	; 0xaa0 <drawrect>
	drawstring(buff, 35, 2, "Game Over");
    1526:	2a e6       	ldi	r18, 0x6A	; 106
    1528:	35 e0       	ldi	r19, 0x05	; 5
    152a:	42 e0       	ldi	r20, 0x02	; 2
    152c:	63 e2       	ldi	r22, 0x23	; 35
    152e:	84 e0       	ldi	r24, 0x04	; 4
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	0e 94 42 04 	call	0x884	; 0x884 <drawstring>
	drawrect(buff, 20, 44, 97, 16, BLACK);
    1536:	21 e6       	ldi	r18, 0x61	; 97
    1538:	4c e2       	ldi	r20, 0x2C	; 44
    153a:	64 e1       	ldi	r22, 0x14	; 20
    153c:	84 e0       	ldi	r24, 0x04	; 4
    153e:	91 e0       	ldi	r25, 0x01	; 1
    1540:	0e 94 50 05 	call	0xaa0	; 0xaa0 <drawrect>
	drawstring(buff, 35, 6, "Restart");
    1544:	24 e7       	ldi	r18, 0x74	; 116
    1546:	35 e0       	ldi	r19, 0x05	; 5
    1548:	46 e0       	ldi	r20, 0x06	; 6
    154a:	63 e2       	ldi	r22, 0x23	; 35
    154c:	84 e0       	ldi	r24, 0x04	; 4
    154e:	91 e0       	ldi	r25, 0x01	; 1
    1550:	0e 94 42 04 	call	0x884	; 0x884 <drawstring>
	write_buffer(buff);
    1554:	84 e0       	ldi	r24, 0x04	; 4
    1556:	91 e0       	ldi	r25, 0x01	; 1
    1558:	0e 94 c5 03 	call	0x78a	; 0x78a <write_buffer>
}
    155c:	0f 91       	pop	r16
    155e:	ef 90       	pop	r14
    1560:	08 95       	ret

00001562 <main>:



int main(void)
{
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	00 d0       	rcall	.+0      	; 0x1568 <main+0x6>
    1568:	00 d0       	rcall	.+0      	; 0x156a <main+0x8>
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
	uart_init();
    156e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <uart_init>
	init();	
    1572:	0e 94 86 06 	call	0xd0c	; 0xd0c <init>
	ball_init();
    1576:	0e 94 bb 06 	call	0xd76	; 0xd76 <ball_init>
	_Bool	if_dead		= false;

	int		ADC_value	= 0;
	int		next_round	= 0;
	
	draw_mood();
    157a:	0e 94 4c 07 	call	0xe98	; 0xe98 <draw_mood>
    157e:	2f ef       	ldi	r18, 0xFF	; 255
    1580:	83 ed       	ldi	r24, 0xD3	; 211
    1582:	90 e3       	ldi	r25, 0x30	; 48
    1584:	21 50       	subi	r18, 0x01	; 1
    1586:	80 40       	sbci	r24, 0x00	; 0
    1588:	90 40       	sbci	r25, 0x00	; 0
    158a:	e1 f7       	brne	.-8      	; 0x1584 <main+0x22>
    158c:	00 c0       	rjmp	.+0      	; 0x158e <main+0x2c>
    158e:	00 00       	nop
	_delay_ms(1000);
	int game_mood = choose_mood();
    1590:	0e 94 91 07 	call	0xf22	; 0xf22 <choose_mood>
    1594:	8c 01       	movw	r16, r24
	
	sei();
    1596:	78 94       	sei
	int		touch_y		= 0;
	_Bool	if_touched	= false;
	_Bool	if_dead		= false;

	int		ADC_value	= 0;
	int		next_round	= 0;
    1598:	c1 2c       	mov	r12, r1
    159a:	d1 2c       	mov	r13, r1
	int		paddle_ai	= 27;
	int		paddle_pl	= 27;
	int		paddle_pl2	= 27;

	int		touch_x		= 0;
	int		touch_y		= 0;
    159c:	1c 82       	std	Y+4, r1	; 0x04
    159e:	1b 82       	std	Y+3, r1	; 0x03
	
	int		paddle_ai	= 27;
	int		paddle_pl	= 27;
	int		paddle_pl2	= 27;

	int		touch_x		= 0;
    15a0:	1a 82       	std	Y+2, r1	; 0x02
    15a2:	19 82       	std	Y+1, r1	; 0x01
	init();	
	ball_init();
	
	int		paddle_ai	= 27;
	int		paddle_pl	= 27;
	int		paddle_pl2	= 27;
    15a4:	0f 2e       	mov	r0, r31
    15a6:	fb e1       	ldi	r31, 0x1B	; 27
    15a8:	2f 2e       	mov	r2, r31
    15aa:	f0 2d       	mov	r31, r0
    15ac:	31 2c       	mov	r3, r1
	uart_init();
	init();	
	ball_init();
	
	int		paddle_ai	= 27;
	int		paddle_pl	= 27;
    15ae:	0f 2e       	mov	r0, r31
    15b0:	fb e1       	ldi	r31, 0x1B	; 27
    15b2:	ef 2e       	mov	r14, r31
    15b4:	f0 2d       	mov	r31, r0
    15b6:	f1 2c       	mov	r15, r1
{
	uart_init();
	init();	
	ball_init();
	
	int		paddle_ai	= 27;
    15b8:	0f 2e       	mov	r0, r31
    15ba:	fb e1       	ldi	r31, 0x1B	; 27
    15bc:	4f 2e       	mov	r4, r31
    15be:	f0 2d       	mov	r31, r0
    15c0:	51 2c       	mov	r5, r1
				play1_score = 0;
				play2_score = 0;
				paddle_ai	= 27;
				paddle_pl	= 27;
				paddle_pl2	= 27;
				printf("game_mood: %d",game_mood);
    15c2:	0f 2e       	mov	r0, r31
    15c4:	fc e7       	ldi	r31, 0x7C	; 124
    15c6:	8f 2e       	mov	r8, r31
    15c8:	f5 e0       	ldi	r31, 0x05	; 5
    15ca:	9f 2e       	mov	r9, r31
    15cc:	f0 2d       	mov	r31, r0
				game_mood = choose_mood();
				play1_score = 0;
				play2_score = 0;
				paddle_ai	= 27;
				paddle_pl	= 27;
				paddle_pl2	= 27;
    15ce:	0f 2e       	mov	r0, r31
    15d0:	fb e1       	ldi	r31, 0x1B	; 27
    15d2:	6f 2e       	mov	r6, r31
    15d4:	f0 2d       	mov	r31, r0
    15d6:	71 2c       	mov	r7, r1
						break;

					case MOOD_ACCEL:
						ADC_value = filtered_ADC();
						paddle_pl = move_paddle_pl1_acc(ADC_value, paddle_pl);
						paddle_ai = move_paddle_ai(paddle_ai,ball.y);
    15d8:	0f 2e       	mov	r0, r31
    15da:	f1 ea       	ldi	r31, 0xA1	; 161
    15dc:	af 2e       	mov	r10, r31
    15de:	f5 e0       	ldi	r31, 0x05	; 5
    15e0:	bf 2e       	mov	r11, r31
    15e2:	f0 2d       	mov	r31, r0
	sei();


	while (1)
	{
		if((play1_score < 3) && (play2_score < 3)){
    15e4:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <play1_score>
    15e8:	83 30       	cpi	r24, 0x03	; 3
    15ea:	08 f0       	brcs	.+2      	; 0x15ee <main+0x8c>
    15ec:	ab c0       	rjmp	.+342    	; 0x1744 <main+0x1e2>
    15ee:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <play2_score>
    15f2:	83 30       	cpi	r24, 0x03	; 3
    15f4:	08 f0       	brcs	.+2      	; 0x15f8 <main+0x96>
    15f6:	a6 c0       	rjmp	.+332    	; 0x1744 <main+0x1e2>
			if(next_round == 0){
    15f8:	c1 14       	cp	r12, r1
    15fa:	d1 04       	cpc	r13, r1
    15fc:	09 f0       	breq	.+2      	; 0x1600 <main+0x9e>
    15fe:	94 c0       	rjmp	.+296    	; 0x1728 <main+0x1c6>
				switch (game_mood){
    1600:	01 30       	cpi	r16, 0x01	; 1
    1602:	11 05       	cpc	r17, r1
    1604:	c1 f1       	breq	.+112    	; 0x1676 <main+0x114>
    1606:	02 30       	cpi	r16, 0x02	; 2
    1608:	11 05       	cpc	r17, r1
    160a:	09 f4       	brne	.+2      	; 0x160e <main+0xac>
    160c:	56 c0       	rjmp	.+172    	; 0x16ba <main+0x158>
    160e:	01 15       	cp	r16, r1
    1610:	11 05       	cpc	r17, r1
    1612:	09 f0       	breq	.+2      	; 0x1616 <main+0xb4>
    1614:	82 c0       	rjmp	.+260    	; 0x171a <main+0x1b8>
					case MOOD_TOUCH:
						//while(if_dead || if_touched){
						//draw_background();
						//}
						if (touch_detect()==1){
    1616:	0e 94 30 0c 	call	0x1860	; 0x1860 <touch_detect>
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	41 f4       	brne	.+16     	; 0x162e <main+0xcc>
							touch_x = touch_xvalue();
    161e:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <touch_xvalue>
    1622:	9a 83       	std	Y+2, r25	; 0x02
    1624:	89 83       	std	Y+1, r24	; 0x01
							touch_y = touch_yvalue();
    1626:	0e 94 18 0c 	call	0x1830	; 0x1830 <touch_yvalue>
    162a:	9c 83       	std	Y+4, r25	; 0x04
    162c:	8b 83       	std	Y+3, r24	; 0x03
						}


						paddle_pl = move_paddle_pl1(touch_x,touch_y,paddle_pl);
    162e:	4e 2d       	mov	r20, r14
    1630:	5f 2d       	mov	r21, r15
    1632:	6b 81       	ldd	r22, Y+3	; 0x03
    1634:	7c 81       	ldd	r23, Y+4	; 0x04
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	9a 81       	ldd	r25, Y+2	; 0x02
    163a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <move_paddle_pl1>
    163e:	e8 2e       	mov	r14, r24
    1640:	f9 2e       	mov	r15, r25
						paddle_ai = move_paddle_ai(paddle_ai,ball.y);
    1642:	f5 01       	movw	r30, r10
    1644:	61 81       	ldd	r22, Z+1	; 0x01
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	84 2d       	mov	r24, r4
    164a:	95 2d       	mov	r25, r5
    164c:	0e 94 ba 08 	call	0x1174	; 0x1174 <move_paddle_ai>
    1650:	48 2e       	mov	r4, r24
    1652:	59 2e       	mov	r5, r25
						next_round = move_ball(paddle_ai, paddle_pl);
    1654:	6e 2d       	mov	r22, r14
    1656:	7f 2d       	mov	r23, r15
    1658:	0e 94 a6 09 	call	0x134c	; 0x134c <move_ball>
    165c:	6c 01       	movw	r12, r24
						draw_now(paddle_pl,paddle_ai,ball.x,ball.y);
    165e:	f5 01       	movw	r30, r10
    1660:	21 81       	ldd	r18, Z+1	; 0x01
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 81       	ld	r20, Z
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	64 2d       	mov	r22, r4
    166a:	75 2d       	mov	r23, r5
    166c:	8e 2d       	mov	r24, r14
    166e:	9f 2d       	mov	r25, r15
    1670:	0e 94 52 09 	call	0x12a4	; 0x12a4 <draw_now>
						break;
    1674:	52 c0       	rjmp	.+164    	; 0x171a <main+0x1b8>

					case MOOD_ACCEL:
						ADC_value = filtered_ADC();
    1676:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <filtered_ADC>
						paddle_pl = move_paddle_pl1_acc(ADC_value, paddle_pl);
    167a:	6e 2d       	mov	r22, r14
    167c:	7f 2d       	mov	r23, r15
    167e:	0e 94 3a 09 	call	0x1274	; 0x1274 <move_paddle_pl1_acc>
    1682:	e8 2e       	mov	r14, r24
    1684:	f9 2e       	mov	r15, r25
						paddle_ai = move_paddle_ai(paddle_ai,ball.y);
    1686:	f5 01       	movw	r30, r10
    1688:	61 81       	ldd	r22, Z+1	; 0x01
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	84 2d       	mov	r24, r4
    168e:	95 2d       	mov	r25, r5
    1690:	0e 94 ba 08 	call	0x1174	; 0x1174 <move_paddle_ai>
    1694:	48 2e       	mov	r4, r24
    1696:	59 2e       	mov	r5, r25
						next_round = move_ball(paddle_ai, paddle_pl);
    1698:	6e 2d       	mov	r22, r14
    169a:	7f 2d       	mov	r23, r15
    169c:	0e 94 a6 09 	call	0x134c	; 0x134c <move_ball>
    16a0:	6c 01       	movw	r12, r24
						draw_now(paddle_pl,paddle_ai,ball.x,ball.y);
    16a2:	f5 01       	movw	r30, r10
    16a4:	21 81       	ldd	r18, Z+1	; 0x01
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 81       	ld	r20, Z
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	64 2d       	mov	r22, r4
    16ae:	75 2d       	mov	r23, r5
    16b0:	8e 2d       	mov	r24, r14
    16b2:	9f 2d       	mov	r25, r15
    16b4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <draw_now>
						break;
    16b8:	30 c0       	rjmp	.+96     	; 0x171a <main+0x1b8>

					case MOOD_TWOPL:
						//while(if_dead || if_touched){
						//draw_background();
						//}
						if (touch_detect()==1){
    16ba:	0e 94 30 0c 	call	0x1860	; 0x1860 <touch_detect>
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	41 f4       	brne	.+16     	; 0x16d2 <main+0x170>
							touch_x = touch_xvalue();
    16c2:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <touch_xvalue>
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	89 83       	std	Y+1, r24	; 0x01
							touch_y = touch_yvalue();
    16ca:	0e 94 18 0c 	call	0x1830	; 0x1830 <touch_yvalue>
    16ce:	9c 83       	std	Y+4, r25	; 0x04
    16d0:	8b 83       	std	Y+3, r24	; 0x03
						}


						paddle_pl = move_paddle_pl1(touch_x,touch_y,paddle_pl);
    16d2:	4e 2d       	mov	r20, r14
    16d4:	5f 2d       	mov	r21, r15
    16d6:	6b 81       	ldd	r22, Y+3	; 0x03
    16d8:	7c 81       	ldd	r23, Y+4	; 0x04
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	9a 81       	ldd	r25, Y+2	; 0x02
    16de:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <move_paddle_pl1>
    16e2:	e8 2e       	mov	r14, r24
    16e4:	f9 2e       	mov	r15, r25
						paddle_pl2 = move_paddle_pl2(touch_x,touch_y,paddle_pl2);
    16e6:	42 2d       	mov	r20, r2
    16e8:	53 2d       	mov	r21, r3
    16ea:	6b 81       	ldd	r22, Y+3	; 0x03
    16ec:	7c 81       	ldd	r23, Y+4	; 0x04
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
    16f2:	0e 94 07 09 	call	0x120e	; 0x120e <move_paddle_pl2>
    16f6:	28 2e       	mov	r2, r24
    16f8:	39 2e       	mov	r3, r25
						next_round = move_ball(paddle_pl2, paddle_pl);
    16fa:	6e 2d       	mov	r22, r14
    16fc:	7f 2d       	mov	r23, r15
    16fe:	0e 94 a6 09 	call	0x134c	; 0x134c <move_ball>
    1702:	6c 01       	movw	r12, r24
						draw_now(paddle_pl,paddle_pl2,ball.x,ball.y);		
    1704:	f5 01       	movw	r30, r10
    1706:	21 81       	ldd	r18, Z+1	; 0x01
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 81       	ld	r20, Z
    170c:	50 e0       	ldi	r21, 0x00	; 0
    170e:	62 2d       	mov	r22, r2
    1710:	73 2d       	mov	r23, r3
    1712:	8e 2d       	mov	r24, r14
    1714:	9f 2d       	mov	r25, r15
    1716:	0e 94 52 09 	call	0x12a4	; 0x12a4 <draw_now>
    171a:	8f e3       	ldi	r24, 0x3F	; 63
    171c:	9c e9       	ldi	r25, 0x9C	; 156
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	f1 f7       	brne	.-4      	; 0x171e <main+0x1bc>
    1722:	00 c0       	rjmp	.+0      	; 0x1724 <main+0x1c2>
    1724:	00 00       	nop
    1726:	5e cf       	rjmp	.-324    	; 0x15e4 <main+0x82>
						break;
				}
				_delay_ms(10);
			}
			else{
				ball_init();
    1728:	0e 94 bb 06 	call	0xd76	; 0xd76 <ball_init>
    172c:	9f ef       	ldi	r25, 0xFF	; 255
    172e:	e3 ed       	ldi	r30, 0xD3	; 211
    1730:	f0 e3       	ldi	r31, 0x30	; 48
    1732:	91 50       	subi	r25, 0x01	; 1
    1734:	e0 40       	sbci	r30, 0x00	; 0
    1736:	f0 40       	sbci	r31, 0x00	; 0
    1738:	e1 f7       	brne	.-8      	; 0x1732 <main+0x1d0>
    173a:	00 c0       	rjmp	.+0      	; 0x173c <main+0x1da>
    173c:	00 00       	nop
				next_round = 0;
    173e:	c1 2c       	mov	r12, r1
    1740:	d1 2c       	mov	r13, r1
    1742:	50 cf       	rjmp	.-352    	; 0x15e4 <main+0x82>
				_delay_ms(1000);
			}
		}
		else{
			game_over();
    1744:	0e 94 83 0a 	call	0x1506	; 0x1506 <game_over>
    1748:	2f ef       	ldi	r18, 0xFF	; 255
    174a:	89 e6       	ldi	r24, 0x69	; 105
    174c:	98 e1       	ldi	r25, 0x18	; 24
    174e:	21 50       	subi	r18, 0x01	; 1
    1750:	80 40       	sbci	r24, 0x00	; 0
    1752:	90 40       	sbci	r25, 0x00	; 0
    1754:	e1 f7       	brne	.-8      	; 0x174e <main+0x1ec>
    1756:	00 c0       	rjmp	.+0      	; 0x1758 <main+0x1f6>
    1758:	00 00       	nop
			_delay_ms(500);
			touch_y = touch_yvalue();			
    175a:	0e 94 18 0c 	call	0x1830	; 0x1830 <touch_yvalue>
    175e:	9c 83       	std	Y+4, r25	; 0x04
    1760:	8b 83       	std	Y+3, r24	; 0x03
			 if (650>=touch_y && touch_y>480){
    1762:	81 5e       	subi	r24, 0xE1	; 225
    1764:	91 40       	sbci	r25, 0x01	; 1
    1766:	8a 3a       	cpi	r24, 0xAA	; 170
    1768:	91 05       	cpc	r25, r1
    176a:	08 f0       	brcs	.+2      	; 0x176e <main+0x20c>
    176c:	3b cf       	rjmp	.-394    	; 0x15e4 <main+0x82>
				 clear_buffer(buff);
    176e:	84 e0       	ldi	r24, 0x04	; 4
    1770:	91 e0       	ldi	r25, 0x01	; 1
    1772:	0e 94 04 04 	call	0x808	; 0x808 <clear_buffer>
				drawrect(buff, 20, 12, 97, 16, BLACK);
    1776:	ee 24       	eor	r14, r14
    1778:	e3 94       	inc	r14
    177a:	00 e1       	ldi	r16, 0x10	; 16
    177c:	21 e6       	ldi	r18, 0x61	; 97
    177e:	4c e0       	ldi	r20, 0x0C	; 12
    1780:	64 e1       	ldi	r22, 0x14	; 20
    1782:	84 e0       	ldi	r24, 0x04	; 4
    1784:	91 e0       	ldi	r25, 0x01	; 1
    1786:	0e 94 50 05 	call	0xaa0	; 0xaa0 <drawrect>
				drawstring(buff, 35, 2, "Restart");
    178a:	24 e7       	ldi	r18, 0x74	; 116
    178c:	35 e0       	ldi	r19, 0x05	; 5
    178e:	42 e0       	ldi	r20, 0x02	; 2
    1790:	63 e2       	ldi	r22, 0x23	; 35
    1792:	84 e0       	ldi	r24, 0x04	; 4
    1794:	91 e0       	ldi	r25, 0x01	; 1
    1796:	0e 94 42 04 	call	0x884	; 0x884 <drawstring>
				write_buffer(buff);
    179a:	84 e0       	ldi	r24, 0x04	; 4
    179c:	91 e0       	ldi	r25, 0x01	; 1
    179e:	0e 94 c5 03 	call	0x78a	; 0x78a <write_buffer>
    17a2:	ef ef       	ldi	r30, 0xFF	; 255
    17a4:	f9 e7       	ldi	r31, 0x79	; 121
    17a6:	2f e3       	ldi	r18, 0x3F	; 63
    17a8:	e1 50       	subi	r30, 0x01	; 1
    17aa:	f0 40       	sbci	r31, 0x00	; 0
    17ac:	20 40       	sbci	r18, 0x00	; 0
    17ae:	e1 f7       	brne	.-8      	; 0x17a8 <main+0x246>
    17b0:	00 c0       	rjmp	.+0      	; 0x17b2 <main+0x250>
    17b2:	00 00       	nop
				 _delay_ms(1300);
				draw_mood();
    17b4:	0e 94 4c 07 	call	0xe98	; 0xe98 <draw_mood>
    17b8:	8f ef       	ldi	r24, 0xFF	; 255
    17ba:	93 ed       	ldi	r25, 0xD3	; 211
    17bc:	e0 e3       	ldi	r30, 0x30	; 48
    17be:	81 50       	subi	r24, 0x01	; 1
    17c0:	90 40       	sbci	r25, 0x00	; 0
    17c2:	e0 40       	sbci	r30, 0x00	; 0
    17c4:	e1 f7       	brne	.-8      	; 0x17be <main+0x25c>
    17c6:	00 c0       	rjmp	.+0      	; 0x17c8 <main+0x266>
    17c8:	00 00       	nop
				_delay_ms(1000);
				game_mood = choose_mood();
    17ca:	0e 94 91 07 	call	0xf22	; 0xf22 <choose_mood>
    17ce:	8c 01       	movw	r16, r24
				play1_score = 0;
    17d0:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <play1_score>
				play2_score = 0;
    17d4:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <play2_score>
				paddle_ai	= 27;
				paddle_pl	= 27;
				paddle_pl2	= 27;
				printf("game_mood: %d",game_mood);
    17d8:	1f 93       	push	r17
    17da:	8f 93       	push	r24
    17dc:	9f 92       	push	r9
    17de:	8f 92       	push	r8
    17e0:	0e 94 42 15 	call	0x2a84	; 0x2a84 <printf>
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
				game_mood = choose_mood();
				play1_score = 0;
				play2_score = 0;
				paddle_ai	= 27;
				paddle_pl	= 27;
				paddle_pl2	= 27;
    17ec:	26 2c       	mov	r2, r6
    17ee:	37 2c       	mov	r3, r7
				_delay_ms(1000);
				game_mood = choose_mood();
				play1_score = 0;
				play2_score = 0;
				paddle_ai	= 27;
				paddle_pl	= 27;
    17f0:	e6 2c       	mov	r14, r6
    17f2:	f7 2c       	mov	r15, r7
				draw_mood();
				_delay_ms(1000);
				game_mood = choose_mood();
				play1_score = 0;
				play2_score = 0;
				paddle_ai	= 27;
    17f4:	46 2c       	mov	r4, r6
    17f6:	57 2c       	mov	r5, r7
    17f8:	f5 ce       	rjmp	.-534    	; 0x15e4 <main+0x82>

000017fa <touch_xvalue>:


int touch_xvalue(void){
	
	int temp_x;
	ADMUX &= ~0x0F; //reset ADC input port
    17fa:	ec e7       	ldi	r30, 0x7C	; 124
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	80 7f       	andi	r24, 0xF0	; 240
    1802:	80 83       	st	Z, r24
	ADMUX |= 0x03;
    1804:	80 81       	ld	r24, Z
    1806:	83 60       	ori	r24, 0x03	; 3
    1808:	80 83       	st	Z, r24
	DDRC = 0x00;	// init PORTC to be all inputs
    180a:	17 b8       	out	0x07, r1	; 7
	DDRC |= (1 << PORTC0) | (1 << PORTC1); //Port C2/C3 outputs
    180c:	87 b1       	in	r24, 0x07	; 7
    180e:	83 60       	ori	r24, 0x03	; 3
    1810:	87 b9       	out	0x07, r24	; 7
	
	PORTC |= (1 << PORTC1) ;
    1812:	41 9a       	sbi	0x08, 1	; 8
	PORTC &= ~((1 << PORTC0) | (1<< PORTC2)|(1<<PORTC3)); // set PC0 active high
    1814:	88 b1       	in	r24, 0x08	; 8
    1816:	82 7f       	andi	r24, 0xF2	; 242
    1818:	88 b9       	out	0x08, r24	; 8
    181a:	83 ec       	ldi	r24, 0xC3	; 195
    181c:	99 e0       	ldi	r25, 0x09	; 9
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <touch_xvalue+0x24>
    1822:	00 c0       	rjmp	.+0      	; 0x1824 <touch_xvalue+0x2a>
    1824:	00 00       	nop
	_delay_ms(10);

	//printf("X: %d\n", ADC );
	temp_x = ADC;
    1826:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    182a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return temp_x;
}
    182e:	08 95       	ret

00001830 <touch_yvalue>:


int touch_yvalue(void){
	int temp_y;
	ADMUX &= ~0x0F;
    1830:	ec e7       	ldi	r30, 0x7C	; 124
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	80 7f       	andi	r24, 0xF0	; 240
    1838:	80 83       	st	Z, r24
	DDRC = 0x00;	// init PORTC to be all inputs
    183a:	17 b8       	out	0x07, r1	; 7
	DDRC |= (1 << PORTC2) | (1 << PORTC3); //Port C2/C3 outputs
    183c:	87 b1       	in	r24, 0x07	; 7
    183e:	8c 60       	ori	r24, 0x0C	; 12
    1840:	87 b9       	out	0x07, r24	; 7
		
	PORTC |= (1 << PORTC3);
    1842:	43 9a       	sbi	0x08, 3	; 8
	PORTC &= ~((1 << PORTC0) | (1<< PORTC2) |(1 << PORTC1)); // set PC0 active high
    1844:	88 b1       	in	r24, 0x08	; 8
    1846:	88 7f       	andi	r24, 0xF8	; 248
    1848:	88 b9       	out	0x08, r24	; 8
    184a:	83 ec       	ldi	r24, 0xC3	; 195
    184c:	99 e0       	ldi	r25, 0x09	; 9
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <touch_yvalue+0x1e>
    1852:	00 c0       	rjmp	.+0      	; 0x1854 <touch_yvalue+0x24>
    1854:	00 00       	nop
	_delay_ms(10);

	//printf("Y: %d\n", ADC );
	temp_y = ADC;	
    1856:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    185a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return temp_y;
}
    185e:	08 95       	ret

00001860 <touch_detect>:



int touch_detect(void){
	DDRC = 0x00;	// init PORTC to be all inputs
    1860:	17 b8       	out	0x07, r1	; 7
	DDRC |= (1 << PORTC2) | (1 << PORTC3); //Port C2/C3 outputs
    1862:	87 b1       	in	r24, 0x07	; 7
    1864:	8c 60       	ori	r24, 0x0C	; 12
    1866:	87 b9       	out	0x07, r24	; 7
	
	PORTC |= (1 << PORTC1);
    1868:	41 9a       	sbi	0x08, 1	; 8
	PORTC &= ~((1 << PORTC0) | (1<< PORTC2)|(1<<PORTC3) ); // set PC0 active high
    186a:	88 b1       	in	r24, 0x08	; 8
    186c:	82 7f       	andi	r24, 0xF2	; 242
    186e:	88 b9       	out	0x08, r24	; 8
	
	ADMUX |= (1 << REFS0); //AVcc refer
    1870:	ec e7       	ldi	r30, 0x7C	; 124
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	80 64       	ori	r24, 0x40	; 64
    1878:	80 83       	st	Z, r24
	ADMUX |= 0x01;
    187a:	80 81       	ld	r24, Z
    187c:	81 60       	ori	r24, 0x01	; 1
    187e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); //turn on ADC
    1880:	ea e7       	ldi	r30, 0x7A	; 122
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	80 68       	ori	r24, 0x80	; 128
    1888:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //division factor = 128, ADC works in
    188a:	80 81       	ld	r24, Z
    188c:	87 60       	ori	r24, 0x07	; 7
    188e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); //Signal source, in this case is the free-running
    1890:	80 81       	ld	r24, Z
    1892:	80 62       	ori	r24, 0x20	; 32
    1894:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //Start conversation
    1896:	80 81       	ld	r24, Z
    1898:	80 64       	ori	r24, 0x40	; 64
    189a:	80 83       	st	Z, r24
	ADCSRB &= ~((1 << ADTS2)|(1 << ADTS1)|(1 << ADTS0));//ADC in free-running mode
    189c:	eb e7       	ldi	r30, 0x7B	; 123
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	88 7f       	andi	r24, 0xF8	; 248
    18a4:	80 83       	st	Z, r24
    18a6:	83 ec       	ldi	r24, 0xC3	; 195
    18a8:	99 e0       	ldi	r25, 0x09	; 9
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <touch_detect+0x4a>
    18ae:	00 c0       	rjmp	.+0      	; 0x18b0 <touch_detect+0x50>
    18b0:	00 00       	nop
	_delay_ms(10);
	if (ADC > 500){
    18b2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    18b6:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	25 3f       	cpi	r18, 0xF5	; 245
    18c0:	31 40       	sbci	r19, 0x01	; 1
    18c2:	10 f0       	brcs	.+4      	; 0x18c8 <touch_detect+0x68>
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
		return 0; // not touched yet
	}
	else {
		return 1; // touched
	}
}
    18c8:	08 95       	ret

000018ca <__subsf3>:
    18ca:	50 58       	subi	r21, 0x80	; 128

000018cc <__addsf3>:
    18cc:	bb 27       	eor	r27, r27
    18ce:	aa 27       	eor	r26, r26
    18d0:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__addsf3x>
    18d4:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__fp_round>
    18d8:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__fp_pscA>
    18dc:	38 f0       	brcs	.+14     	; 0x18ec <__addsf3+0x20>
    18de:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__fp_pscB>
    18e2:	20 f0       	brcs	.+8      	; 0x18ec <__addsf3+0x20>
    18e4:	39 f4       	brne	.+14     	; 0x18f4 <__addsf3+0x28>
    18e6:	9f 3f       	cpi	r25, 0xFF	; 255
    18e8:	19 f4       	brne	.+6      	; 0x18f0 <__addsf3+0x24>
    18ea:	26 f4       	brtc	.+8      	; 0x18f4 <__addsf3+0x28>
    18ec:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <__fp_nan>
    18f0:	0e f4       	brtc	.+2      	; 0x18f4 <__addsf3+0x28>
    18f2:	e0 95       	com	r30
    18f4:	e7 fb       	bst	r30, 7
    18f6:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__fp_inf>

000018fa <__addsf3x>:
    18fa:	e9 2f       	mov	r30, r25
    18fc:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__fp_split3>
    1900:	58 f3       	brcs	.-42     	; 0x18d8 <__addsf3+0xc>
    1902:	ba 17       	cp	r27, r26
    1904:	62 07       	cpc	r22, r18
    1906:	73 07       	cpc	r23, r19
    1908:	84 07       	cpc	r24, r20
    190a:	95 07       	cpc	r25, r21
    190c:	20 f0       	brcs	.+8      	; 0x1916 <__addsf3x+0x1c>
    190e:	79 f4       	brne	.+30     	; 0x192e <__addsf3x+0x34>
    1910:	a6 f5       	brtc	.+104    	; 0x197a <__addsf3x+0x80>
    1912:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__fp_zero>
    1916:	0e f4       	brtc	.+2      	; 0x191a <__addsf3x+0x20>
    1918:	e0 95       	com	r30
    191a:	0b 2e       	mov	r0, r27
    191c:	ba 2f       	mov	r27, r26
    191e:	a0 2d       	mov	r26, r0
    1920:	0b 01       	movw	r0, r22
    1922:	b9 01       	movw	r22, r18
    1924:	90 01       	movw	r18, r0
    1926:	0c 01       	movw	r0, r24
    1928:	ca 01       	movw	r24, r20
    192a:	a0 01       	movw	r20, r0
    192c:	11 24       	eor	r1, r1
    192e:	ff 27       	eor	r31, r31
    1930:	59 1b       	sub	r21, r25
    1932:	99 f0       	breq	.+38     	; 0x195a <__addsf3x+0x60>
    1934:	59 3f       	cpi	r21, 0xF9	; 249
    1936:	50 f4       	brcc	.+20     	; 0x194c <__addsf3x+0x52>
    1938:	50 3e       	cpi	r21, 0xE0	; 224
    193a:	68 f1       	brcs	.+90     	; 0x1996 <__addsf3x+0x9c>
    193c:	1a 16       	cp	r1, r26
    193e:	f0 40       	sbci	r31, 0x00	; 0
    1940:	a2 2f       	mov	r26, r18
    1942:	23 2f       	mov	r18, r19
    1944:	34 2f       	mov	r19, r20
    1946:	44 27       	eor	r20, r20
    1948:	58 5f       	subi	r21, 0xF8	; 248
    194a:	f3 cf       	rjmp	.-26     	; 0x1932 <__addsf3x+0x38>
    194c:	46 95       	lsr	r20
    194e:	37 95       	ror	r19
    1950:	27 95       	ror	r18
    1952:	a7 95       	ror	r26
    1954:	f0 40       	sbci	r31, 0x00	; 0
    1956:	53 95       	inc	r21
    1958:	c9 f7       	brne	.-14     	; 0x194c <__addsf3x+0x52>
    195a:	7e f4       	brtc	.+30     	; 0x197a <__addsf3x+0x80>
    195c:	1f 16       	cp	r1, r31
    195e:	ba 0b       	sbc	r27, r26
    1960:	62 0b       	sbc	r22, r18
    1962:	73 0b       	sbc	r23, r19
    1964:	84 0b       	sbc	r24, r20
    1966:	ba f0       	brmi	.+46     	; 0x1996 <__addsf3x+0x9c>
    1968:	91 50       	subi	r25, 0x01	; 1
    196a:	a1 f0       	breq	.+40     	; 0x1994 <__addsf3x+0x9a>
    196c:	ff 0f       	add	r31, r31
    196e:	bb 1f       	adc	r27, r27
    1970:	66 1f       	adc	r22, r22
    1972:	77 1f       	adc	r23, r23
    1974:	88 1f       	adc	r24, r24
    1976:	c2 f7       	brpl	.-16     	; 0x1968 <__addsf3x+0x6e>
    1978:	0e c0       	rjmp	.+28     	; 0x1996 <__addsf3x+0x9c>
    197a:	ba 0f       	add	r27, r26
    197c:	62 1f       	adc	r22, r18
    197e:	73 1f       	adc	r23, r19
    1980:	84 1f       	adc	r24, r20
    1982:	48 f4       	brcc	.+18     	; 0x1996 <__addsf3x+0x9c>
    1984:	87 95       	ror	r24
    1986:	77 95       	ror	r23
    1988:	67 95       	ror	r22
    198a:	b7 95       	ror	r27
    198c:	f7 95       	ror	r31
    198e:	9e 3f       	cpi	r25, 0xFE	; 254
    1990:	08 f0       	brcs	.+2      	; 0x1994 <__addsf3x+0x9a>
    1992:	b0 cf       	rjmp	.-160    	; 0x18f4 <__addsf3+0x28>
    1994:	93 95       	inc	r25
    1996:	88 0f       	add	r24, r24
    1998:	08 f0       	brcs	.+2      	; 0x199c <__addsf3x+0xa2>
    199a:	99 27       	eor	r25, r25
    199c:	ee 0f       	add	r30, r30
    199e:	97 95       	ror	r25
    19a0:	87 95       	ror	r24
    19a2:	08 95       	ret

000019a4 <__divsf3>:
    19a4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__divsf3x>
    19a8:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__fp_round>
    19ac:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__fp_pscB>
    19b0:	58 f0       	brcs	.+22     	; 0x19c8 <__divsf3+0x24>
    19b2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__fp_pscA>
    19b6:	40 f0       	brcs	.+16     	; 0x19c8 <__divsf3+0x24>
    19b8:	29 f4       	brne	.+10     	; 0x19c4 <__divsf3+0x20>
    19ba:	5f 3f       	cpi	r21, 0xFF	; 255
    19bc:	29 f0       	breq	.+10     	; 0x19c8 <__divsf3+0x24>
    19be:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__fp_inf>
    19c2:	51 11       	cpse	r21, r1
    19c4:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__fp_szero>
    19c8:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <__fp_nan>

000019cc <__divsf3x>:
    19cc:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__fp_split3>
    19d0:	68 f3       	brcs	.-38     	; 0x19ac <__divsf3+0x8>

000019d2 <__divsf3_pse>:
    19d2:	99 23       	and	r25, r25
    19d4:	b1 f3       	breq	.-20     	; 0x19c2 <__divsf3+0x1e>
    19d6:	55 23       	and	r21, r21
    19d8:	91 f3       	breq	.-28     	; 0x19be <__divsf3+0x1a>
    19da:	95 1b       	sub	r25, r21
    19dc:	55 0b       	sbc	r21, r21
    19de:	bb 27       	eor	r27, r27
    19e0:	aa 27       	eor	r26, r26
    19e2:	62 17       	cp	r22, r18
    19e4:	73 07       	cpc	r23, r19
    19e6:	84 07       	cpc	r24, r20
    19e8:	38 f0       	brcs	.+14     	; 0x19f8 <__divsf3_pse+0x26>
    19ea:	9f 5f       	subi	r25, 0xFF	; 255
    19ec:	5f 4f       	sbci	r21, 0xFF	; 255
    19ee:	22 0f       	add	r18, r18
    19f0:	33 1f       	adc	r19, r19
    19f2:	44 1f       	adc	r20, r20
    19f4:	aa 1f       	adc	r26, r26
    19f6:	a9 f3       	breq	.-22     	; 0x19e2 <__divsf3_pse+0x10>
    19f8:	35 d0       	rcall	.+106    	; 0x1a64 <__divsf3_pse+0x92>
    19fa:	0e 2e       	mov	r0, r30
    19fc:	3a f0       	brmi	.+14     	; 0x1a0c <__divsf3_pse+0x3a>
    19fe:	e0 e8       	ldi	r30, 0x80	; 128
    1a00:	32 d0       	rcall	.+100    	; 0x1a66 <__divsf3_pse+0x94>
    1a02:	91 50       	subi	r25, 0x01	; 1
    1a04:	50 40       	sbci	r21, 0x00	; 0
    1a06:	e6 95       	lsr	r30
    1a08:	00 1c       	adc	r0, r0
    1a0a:	ca f7       	brpl	.-14     	; 0x19fe <__divsf3_pse+0x2c>
    1a0c:	2b d0       	rcall	.+86     	; 0x1a64 <__divsf3_pse+0x92>
    1a0e:	fe 2f       	mov	r31, r30
    1a10:	29 d0       	rcall	.+82     	; 0x1a64 <__divsf3_pse+0x92>
    1a12:	66 0f       	add	r22, r22
    1a14:	77 1f       	adc	r23, r23
    1a16:	88 1f       	adc	r24, r24
    1a18:	bb 1f       	adc	r27, r27
    1a1a:	26 17       	cp	r18, r22
    1a1c:	37 07       	cpc	r19, r23
    1a1e:	48 07       	cpc	r20, r24
    1a20:	ab 07       	cpc	r26, r27
    1a22:	b0 e8       	ldi	r27, 0x80	; 128
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <__divsf3_pse+0x56>
    1a26:	bb 0b       	sbc	r27, r27
    1a28:	80 2d       	mov	r24, r0
    1a2a:	bf 01       	movw	r22, r30
    1a2c:	ff 27       	eor	r31, r31
    1a2e:	93 58       	subi	r25, 0x83	; 131
    1a30:	5f 4f       	sbci	r21, 0xFF	; 255
    1a32:	3a f0       	brmi	.+14     	; 0x1a42 <__divsf3_pse+0x70>
    1a34:	9e 3f       	cpi	r25, 0xFE	; 254
    1a36:	51 05       	cpc	r21, r1
    1a38:	78 f0       	brcs	.+30     	; 0x1a58 <__divsf3_pse+0x86>
    1a3a:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__fp_inf>
    1a3e:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__fp_szero>
    1a42:	5f 3f       	cpi	r21, 0xFF	; 255
    1a44:	e4 f3       	brlt	.-8      	; 0x1a3e <__divsf3_pse+0x6c>
    1a46:	98 3e       	cpi	r25, 0xE8	; 232
    1a48:	d4 f3       	brlt	.-12     	; 0x1a3e <__divsf3_pse+0x6c>
    1a4a:	86 95       	lsr	r24
    1a4c:	77 95       	ror	r23
    1a4e:	67 95       	ror	r22
    1a50:	b7 95       	ror	r27
    1a52:	f7 95       	ror	r31
    1a54:	9f 5f       	subi	r25, 0xFF	; 255
    1a56:	c9 f7       	brne	.-14     	; 0x1a4a <__divsf3_pse+0x78>
    1a58:	88 0f       	add	r24, r24
    1a5a:	91 1d       	adc	r25, r1
    1a5c:	96 95       	lsr	r25
    1a5e:	87 95       	ror	r24
    1a60:	97 f9       	bld	r25, 7
    1a62:	08 95       	ret
    1a64:	e1 e0       	ldi	r30, 0x01	; 1
    1a66:	66 0f       	add	r22, r22
    1a68:	77 1f       	adc	r23, r23
    1a6a:	88 1f       	adc	r24, r24
    1a6c:	bb 1f       	adc	r27, r27
    1a6e:	62 17       	cp	r22, r18
    1a70:	73 07       	cpc	r23, r19
    1a72:	84 07       	cpc	r24, r20
    1a74:	ba 07       	cpc	r27, r26
    1a76:	20 f0       	brcs	.+8      	; 0x1a80 <__divsf3_pse+0xae>
    1a78:	62 1b       	sub	r22, r18
    1a7a:	73 0b       	sbc	r23, r19
    1a7c:	84 0b       	sbc	r24, r20
    1a7e:	ba 0b       	sbc	r27, r26
    1a80:	ee 1f       	adc	r30, r30
    1a82:	88 f7       	brcc	.-30     	; 0x1a66 <__divsf3_pse+0x94>
    1a84:	e0 95       	com	r30
    1a86:	08 95       	ret

00001a88 <__floatunsisf>:
    1a88:	e8 94       	clt
    1a8a:	09 c0       	rjmp	.+18     	; 0x1a9e <__floatsisf+0x12>

00001a8c <__floatsisf>:
    1a8c:	97 fb       	bst	r25, 7
    1a8e:	3e f4       	brtc	.+14     	; 0x1a9e <__floatsisf+0x12>
    1a90:	90 95       	com	r25
    1a92:	80 95       	com	r24
    1a94:	70 95       	com	r23
    1a96:	61 95       	neg	r22
    1a98:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9e:	99 23       	and	r25, r25
    1aa0:	a9 f0       	breq	.+42     	; 0x1acc <__floatsisf+0x40>
    1aa2:	f9 2f       	mov	r31, r25
    1aa4:	96 e9       	ldi	r25, 0x96	; 150
    1aa6:	bb 27       	eor	r27, r27
    1aa8:	93 95       	inc	r25
    1aaa:	f6 95       	lsr	r31
    1aac:	87 95       	ror	r24
    1aae:	77 95       	ror	r23
    1ab0:	67 95       	ror	r22
    1ab2:	b7 95       	ror	r27
    1ab4:	f1 11       	cpse	r31, r1
    1ab6:	f8 cf       	rjmp	.-16     	; 0x1aa8 <__floatsisf+0x1c>
    1ab8:	fa f4       	brpl	.+62     	; 0x1af8 <__floatsisf+0x6c>
    1aba:	bb 0f       	add	r27, r27
    1abc:	11 f4       	brne	.+4      	; 0x1ac2 <__floatsisf+0x36>
    1abe:	60 ff       	sbrs	r22, 0
    1ac0:	1b c0       	rjmp	.+54     	; 0x1af8 <__floatsisf+0x6c>
    1ac2:	6f 5f       	subi	r22, 0xFF	; 255
    1ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aca:	16 c0       	rjmp	.+44     	; 0x1af8 <__floatsisf+0x6c>
    1acc:	88 23       	and	r24, r24
    1ace:	11 f0       	breq	.+4      	; 0x1ad4 <__floatsisf+0x48>
    1ad0:	96 e9       	ldi	r25, 0x96	; 150
    1ad2:	11 c0       	rjmp	.+34     	; 0x1af6 <__floatsisf+0x6a>
    1ad4:	77 23       	and	r23, r23
    1ad6:	21 f0       	breq	.+8      	; 0x1ae0 <__floatsisf+0x54>
    1ad8:	9e e8       	ldi	r25, 0x8E	; 142
    1ada:	87 2f       	mov	r24, r23
    1adc:	76 2f       	mov	r23, r22
    1ade:	05 c0       	rjmp	.+10     	; 0x1aea <__floatsisf+0x5e>
    1ae0:	66 23       	and	r22, r22
    1ae2:	71 f0       	breq	.+28     	; 0x1b00 <__floatsisf+0x74>
    1ae4:	96 e8       	ldi	r25, 0x86	; 134
    1ae6:	86 2f       	mov	r24, r22
    1ae8:	70 e0       	ldi	r23, 0x00	; 0
    1aea:	60 e0       	ldi	r22, 0x00	; 0
    1aec:	2a f0       	brmi	.+10     	; 0x1af8 <__floatsisf+0x6c>
    1aee:	9a 95       	dec	r25
    1af0:	66 0f       	add	r22, r22
    1af2:	77 1f       	adc	r23, r23
    1af4:	88 1f       	adc	r24, r24
    1af6:	da f7       	brpl	.-10     	; 0x1aee <__floatsisf+0x62>
    1af8:	88 0f       	add	r24, r24
    1afa:	96 95       	lsr	r25
    1afc:	87 95       	ror	r24
    1afe:	97 f9       	bld	r25, 7
    1b00:	08 95       	ret

00001b02 <__fp_inf>:
    1b02:	97 f9       	bld	r25, 7
    1b04:	9f 67       	ori	r25, 0x7F	; 127
    1b06:	80 e8       	ldi	r24, 0x80	; 128
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	08 95       	ret

00001b0e <__fp_nan>:
    1b0e:	9f ef       	ldi	r25, 0xFF	; 255
    1b10:	80 ec       	ldi	r24, 0xC0	; 192
    1b12:	08 95       	ret

00001b14 <__fp_pscA>:
    1b14:	00 24       	eor	r0, r0
    1b16:	0a 94       	dec	r0
    1b18:	16 16       	cp	r1, r22
    1b1a:	17 06       	cpc	r1, r23
    1b1c:	18 06       	cpc	r1, r24
    1b1e:	09 06       	cpc	r0, r25
    1b20:	08 95       	ret

00001b22 <__fp_pscB>:
    1b22:	00 24       	eor	r0, r0
    1b24:	0a 94       	dec	r0
    1b26:	12 16       	cp	r1, r18
    1b28:	13 06       	cpc	r1, r19
    1b2a:	14 06       	cpc	r1, r20
    1b2c:	05 06       	cpc	r0, r21
    1b2e:	08 95       	ret

00001b30 <__fp_round>:
    1b30:	09 2e       	mov	r0, r25
    1b32:	03 94       	inc	r0
    1b34:	00 0c       	add	r0, r0
    1b36:	11 f4       	brne	.+4      	; 0x1b3c <__fp_round+0xc>
    1b38:	88 23       	and	r24, r24
    1b3a:	52 f0       	brmi	.+20     	; 0x1b50 <__fp_round+0x20>
    1b3c:	bb 0f       	add	r27, r27
    1b3e:	40 f4       	brcc	.+16     	; 0x1b50 <__fp_round+0x20>
    1b40:	bf 2b       	or	r27, r31
    1b42:	11 f4       	brne	.+4      	; 0x1b48 <__fp_round+0x18>
    1b44:	60 ff       	sbrs	r22, 0
    1b46:	04 c0       	rjmp	.+8      	; 0x1b50 <__fp_round+0x20>
    1b48:	6f 5f       	subi	r22, 0xFF	; 255
    1b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b50:	08 95       	ret

00001b52 <__fp_split3>:
    1b52:	57 fd       	sbrc	r21, 7
    1b54:	90 58       	subi	r25, 0x80	; 128
    1b56:	44 0f       	add	r20, r20
    1b58:	55 1f       	adc	r21, r21
    1b5a:	59 f0       	breq	.+22     	; 0x1b72 <__fp_splitA+0x10>
    1b5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b5e:	71 f0       	breq	.+28     	; 0x1b7c <__fp_splitA+0x1a>
    1b60:	47 95       	ror	r20

00001b62 <__fp_splitA>:
    1b62:	88 0f       	add	r24, r24
    1b64:	97 fb       	bst	r25, 7
    1b66:	99 1f       	adc	r25, r25
    1b68:	61 f0       	breq	.+24     	; 0x1b82 <__fp_splitA+0x20>
    1b6a:	9f 3f       	cpi	r25, 0xFF	; 255
    1b6c:	79 f0       	breq	.+30     	; 0x1b8c <__fp_splitA+0x2a>
    1b6e:	87 95       	ror	r24
    1b70:	08 95       	ret
    1b72:	12 16       	cp	r1, r18
    1b74:	13 06       	cpc	r1, r19
    1b76:	14 06       	cpc	r1, r20
    1b78:	55 1f       	adc	r21, r21
    1b7a:	f2 cf       	rjmp	.-28     	; 0x1b60 <__fp_split3+0xe>
    1b7c:	46 95       	lsr	r20
    1b7e:	f1 df       	rcall	.-30     	; 0x1b62 <__fp_splitA>
    1b80:	08 c0       	rjmp	.+16     	; 0x1b92 <__fp_splitA+0x30>
    1b82:	16 16       	cp	r1, r22
    1b84:	17 06       	cpc	r1, r23
    1b86:	18 06       	cpc	r1, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	f1 cf       	rjmp	.-30     	; 0x1b6e <__fp_splitA+0xc>
    1b8c:	86 95       	lsr	r24
    1b8e:	71 05       	cpc	r23, r1
    1b90:	61 05       	cpc	r22, r1
    1b92:	08 94       	sec
    1b94:	08 95       	ret

00001b96 <__fp_zero>:
    1b96:	e8 94       	clt

00001b98 <__fp_szero>:
    1b98:	bb 27       	eor	r27, r27
    1b9a:	66 27       	eor	r22, r22
    1b9c:	77 27       	eor	r23, r23
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	97 f9       	bld	r25, 7
    1ba2:	08 95       	ret

00001ba4 <__gesf2>:
    1ba4:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__fp_cmp>
    1ba8:	08 f4       	brcc	.+2      	; 0x1bac <__gesf2+0x8>
    1baa:	8f ef       	ldi	r24, 0xFF	; 255
    1bac:	08 95       	ret

00001bae <__fp_cmp>:
    1bae:	99 0f       	add	r25, r25
    1bb0:	00 08       	sbc	r0, r0
    1bb2:	55 0f       	add	r21, r21
    1bb4:	aa 0b       	sbc	r26, r26
    1bb6:	e0 e8       	ldi	r30, 0x80	; 128
    1bb8:	fe ef       	ldi	r31, 0xFE	; 254
    1bba:	16 16       	cp	r1, r22
    1bbc:	17 06       	cpc	r1, r23
    1bbe:	e8 07       	cpc	r30, r24
    1bc0:	f9 07       	cpc	r31, r25
    1bc2:	c0 f0       	brcs	.+48     	; 0x1bf4 <__fp_cmp+0x46>
    1bc4:	12 16       	cp	r1, r18
    1bc6:	13 06       	cpc	r1, r19
    1bc8:	e4 07       	cpc	r30, r20
    1bca:	f5 07       	cpc	r31, r21
    1bcc:	98 f0       	brcs	.+38     	; 0x1bf4 <__fp_cmp+0x46>
    1bce:	62 1b       	sub	r22, r18
    1bd0:	73 0b       	sbc	r23, r19
    1bd2:	84 0b       	sbc	r24, r20
    1bd4:	95 0b       	sbc	r25, r21
    1bd6:	39 f4       	brne	.+14     	; 0x1be6 <__fp_cmp+0x38>
    1bd8:	0a 26       	eor	r0, r26
    1bda:	61 f0       	breq	.+24     	; 0x1bf4 <__fp_cmp+0x46>
    1bdc:	23 2b       	or	r18, r19
    1bde:	24 2b       	or	r18, r20
    1be0:	25 2b       	or	r18, r21
    1be2:	21 f4       	brne	.+8      	; 0x1bec <__fp_cmp+0x3e>
    1be4:	08 95       	ret
    1be6:	0a 26       	eor	r0, r26
    1be8:	09 f4       	brne	.+2      	; 0x1bec <__fp_cmp+0x3e>
    1bea:	a1 40       	sbci	r26, 0x01	; 1
    1bec:	a6 95       	lsr	r26
    1bee:	8f ef       	ldi	r24, 0xFF	; 255
    1bf0:	81 1d       	adc	r24, r1
    1bf2:	81 1d       	adc	r24, r1
    1bf4:	08 95       	ret

00001bf6 <vfprintf>:
    1bf6:	a0 e1       	ldi	r26, 0x10	; 16
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e1 e0       	ldi	r30, 0x01	; 1
    1bfc:	fe e0       	ldi	r31, 0x0E	; 14
    1bfe:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__prologue_saves__>
    1c02:	7c 01       	movw	r14, r24
    1c04:	1b 01       	movw	r2, r22
    1c06:	6a 01       	movw	r12, r20
    1c08:	fc 01       	movw	r30, r24
    1c0a:	17 82       	std	Z+7, r1	; 0x07
    1c0c:	16 82       	std	Z+6, r1	; 0x06
    1c0e:	83 81       	ldd	r24, Z+3	; 0x03
    1c10:	81 ff       	sbrs	r24, 1
    1c12:	44 c3       	rjmp	.+1672   	; 0x229c <vfprintf+0x6a6>
    1c14:	9e 01       	movw	r18, r28
    1c16:	2f 5f       	subi	r18, 0xFF	; 255
    1c18:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1a:	39 01       	movw	r6, r18
    1c1c:	f7 01       	movw	r30, r14
    1c1e:	93 81       	ldd	r25, Z+3	; 0x03
    1c20:	f1 01       	movw	r30, r2
    1c22:	93 fd       	sbrc	r25, 3
    1c24:	85 91       	lpm	r24, Z+
    1c26:	93 ff       	sbrs	r25, 3
    1c28:	81 91       	ld	r24, Z+
    1c2a:	1f 01       	movw	r2, r30
    1c2c:	88 23       	and	r24, r24
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <vfprintf+0x3c>
    1c30:	31 c3       	rjmp	.+1634   	; 0x2294 <vfprintf+0x69e>
    1c32:	85 32       	cpi	r24, 0x25	; 37
    1c34:	39 f4       	brne	.+14     	; 0x1c44 <vfprintf+0x4e>
    1c36:	93 fd       	sbrc	r25, 3
    1c38:	85 91       	lpm	r24, Z+
    1c3a:	93 ff       	sbrs	r25, 3
    1c3c:	81 91       	ld	r24, Z+
    1c3e:	1f 01       	movw	r2, r30
    1c40:	85 32       	cpi	r24, 0x25	; 37
    1c42:	39 f4       	brne	.+14     	; 0x1c52 <vfprintf+0x5c>
    1c44:	b7 01       	movw	r22, r14
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    1c4c:	56 01       	movw	r10, r12
    1c4e:	65 01       	movw	r12, r10
    1c50:	e5 cf       	rjmp	.-54     	; 0x1c1c <vfprintf+0x26>
    1c52:	10 e0       	ldi	r17, 0x00	; 0
    1c54:	51 2c       	mov	r5, r1
    1c56:	91 2c       	mov	r9, r1
    1c58:	ff e1       	ldi	r31, 0x1F	; 31
    1c5a:	f9 15       	cp	r31, r9
    1c5c:	d8 f0       	brcs	.+54     	; 0x1c94 <vfprintf+0x9e>
    1c5e:	8b 32       	cpi	r24, 0x2B	; 43
    1c60:	79 f0       	breq	.+30     	; 0x1c80 <vfprintf+0x8a>
    1c62:	38 f4       	brcc	.+14     	; 0x1c72 <vfprintf+0x7c>
    1c64:	80 32       	cpi	r24, 0x20	; 32
    1c66:	79 f0       	breq	.+30     	; 0x1c86 <vfprintf+0x90>
    1c68:	83 32       	cpi	r24, 0x23	; 35
    1c6a:	a1 f4       	brne	.+40     	; 0x1c94 <vfprintf+0x9e>
    1c6c:	f9 2d       	mov	r31, r9
    1c6e:	f0 61       	ori	r31, 0x10	; 16
    1c70:	2e c0       	rjmp	.+92     	; 0x1cce <vfprintf+0xd8>
    1c72:	8d 32       	cpi	r24, 0x2D	; 45
    1c74:	61 f0       	breq	.+24     	; 0x1c8e <vfprintf+0x98>
    1c76:	80 33       	cpi	r24, 0x30	; 48
    1c78:	69 f4       	brne	.+26     	; 0x1c94 <vfprintf+0x9e>
    1c7a:	29 2d       	mov	r18, r9
    1c7c:	21 60       	ori	r18, 0x01	; 1
    1c7e:	2d c0       	rjmp	.+90     	; 0x1cda <vfprintf+0xe4>
    1c80:	39 2d       	mov	r19, r9
    1c82:	32 60       	ori	r19, 0x02	; 2
    1c84:	93 2e       	mov	r9, r19
    1c86:	89 2d       	mov	r24, r9
    1c88:	84 60       	ori	r24, 0x04	; 4
    1c8a:	98 2e       	mov	r9, r24
    1c8c:	2a c0       	rjmp	.+84     	; 0x1ce2 <vfprintf+0xec>
    1c8e:	e9 2d       	mov	r30, r9
    1c90:	e8 60       	ori	r30, 0x08	; 8
    1c92:	15 c0       	rjmp	.+42     	; 0x1cbe <vfprintf+0xc8>
    1c94:	97 fc       	sbrc	r9, 7
    1c96:	2d c0       	rjmp	.+90     	; 0x1cf2 <vfprintf+0xfc>
    1c98:	20 ed       	ldi	r18, 0xD0	; 208
    1c9a:	28 0f       	add	r18, r24
    1c9c:	2a 30       	cpi	r18, 0x0A	; 10
    1c9e:	88 f4       	brcc	.+34     	; 0x1cc2 <vfprintf+0xcc>
    1ca0:	96 fe       	sbrs	r9, 6
    1ca2:	06 c0       	rjmp	.+12     	; 0x1cb0 <vfprintf+0xba>
    1ca4:	3a e0       	ldi	r19, 0x0A	; 10
    1ca6:	13 9f       	mul	r17, r19
    1ca8:	20 0d       	add	r18, r0
    1caa:	11 24       	eor	r1, r1
    1cac:	12 2f       	mov	r17, r18
    1cae:	19 c0       	rjmp	.+50     	; 0x1ce2 <vfprintf+0xec>
    1cb0:	8a e0       	ldi	r24, 0x0A	; 10
    1cb2:	58 9e       	mul	r5, r24
    1cb4:	20 0d       	add	r18, r0
    1cb6:	11 24       	eor	r1, r1
    1cb8:	52 2e       	mov	r5, r18
    1cba:	e9 2d       	mov	r30, r9
    1cbc:	e0 62       	ori	r30, 0x20	; 32
    1cbe:	9e 2e       	mov	r9, r30
    1cc0:	10 c0       	rjmp	.+32     	; 0x1ce2 <vfprintf+0xec>
    1cc2:	8e 32       	cpi	r24, 0x2E	; 46
    1cc4:	31 f4       	brne	.+12     	; 0x1cd2 <vfprintf+0xdc>
    1cc6:	96 fc       	sbrc	r9, 6
    1cc8:	e5 c2       	rjmp	.+1482   	; 0x2294 <vfprintf+0x69e>
    1cca:	f9 2d       	mov	r31, r9
    1ccc:	f0 64       	ori	r31, 0x40	; 64
    1cce:	9f 2e       	mov	r9, r31
    1cd0:	08 c0       	rjmp	.+16     	; 0x1ce2 <vfprintf+0xec>
    1cd2:	8c 36       	cpi	r24, 0x6C	; 108
    1cd4:	21 f4       	brne	.+8      	; 0x1cde <vfprintf+0xe8>
    1cd6:	29 2d       	mov	r18, r9
    1cd8:	20 68       	ori	r18, 0x80	; 128
    1cda:	92 2e       	mov	r9, r18
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <vfprintf+0xec>
    1cde:	88 36       	cpi	r24, 0x68	; 104
    1ce0:	41 f4       	brne	.+16     	; 0x1cf2 <vfprintf+0xfc>
    1ce2:	f1 01       	movw	r30, r2
    1ce4:	93 fd       	sbrc	r25, 3
    1ce6:	85 91       	lpm	r24, Z+
    1ce8:	93 ff       	sbrs	r25, 3
    1cea:	81 91       	ld	r24, Z+
    1cec:	1f 01       	movw	r2, r30
    1cee:	81 11       	cpse	r24, r1
    1cf0:	b3 cf       	rjmp	.-154    	; 0x1c58 <vfprintf+0x62>
    1cf2:	9b eb       	ldi	r25, 0xBB	; 187
    1cf4:	98 0f       	add	r25, r24
    1cf6:	93 30       	cpi	r25, 0x03	; 3
    1cf8:	20 f4       	brcc	.+8      	; 0x1d02 <vfprintf+0x10c>
    1cfa:	99 2d       	mov	r25, r9
    1cfc:	90 61       	ori	r25, 0x10	; 16
    1cfe:	80 5e       	subi	r24, 0xE0	; 224
    1d00:	07 c0       	rjmp	.+14     	; 0x1d10 <vfprintf+0x11a>
    1d02:	9b e9       	ldi	r25, 0x9B	; 155
    1d04:	98 0f       	add	r25, r24
    1d06:	93 30       	cpi	r25, 0x03	; 3
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <vfprintf+0x116>
    1d0a:	66 c1       	rjmp	.+716    	; 0x1fd8 <vfprintf+0x3e2>
    1d0c:	99 2d       	mov	r25, r9
    1d0e:	9f 7e       	andi	r25, 0xEF	; 239
    1d10:	96 ff       	sbrs	r25, 6
    1d12:	16 e0       	ldi	r17, 0x06	; 6
    1d14:	9f 73       	andi	r25, 0x3F	; 63
    1d16:	99 2e       	mov	r9, r25
    1d18:	85 36       	cpi	r24, 0x65	; 101
    1d1a:	19 f4       	brne	.+6      	; 0x1d22 <vfprintf+0x12c>
    1d1c:	90 64       	ori	r25, 0x40	; 64
    1d1e:	99 2e       	mov	r9, r25
    1d20:	08 c0       	rjmp	.+16     	; 0x1d32 <vfprintf+0x13c>
    1d22:	86 36       	cpi	r24, 0x66	; 102
    1d24:	21 f4       	brne	.+8      	; 0x1d2e <vfprintf+0x138>
    1d26:	39 2f       	mov	r19, r25
    1d28:	30 68       	ori	r19, 0x80	; 128
    1d2a:	93 2e       	mov	r9, r19
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <vfprintf+0x13c>
    1d2e:	11 11       	cpse	r17, r1
    1d30:	11 50       	subi	r17, 0x01	; 1
    1d32:	97 fe       	sbrs	r9, 7
    1d34:	07 c0       	rjmp	.+14     	; 0x1d44 <vfprintf+0x14e>
    1d36:	1c 33       	cpi	r17, 0x3C	; 60
    1d38:	50 f4       	brcc	.+20     	; 0x1d4e <vfprintf+0x158>
    1d3a:	44 24       	eor	r4, r4
    1d3c:	43 94       	inc	r4
    1d3e:	41 0e       	add	r4, r17
    1d40:	27 e0       	ldi	r18, 0x07	; 7
    1d42:	0b c0       	rjmp	.+22     	; 0x1d5a <vfprintf+0x164>
    1d44:	18 30       	cpi	r17, 0x08	; 8
    1d46:	38 f0       	brcs	.+14     	; 0x1d56 <vfprintf+0x160>
    1d48:	27 e0       	ldi	r18, 0x07	; 7
    1d4a:	17 e0       	ldi	r17, 0x07	; 7
    1d4c:	05 c0       	rjmp	.+10     	; 0x1d58 <vfprintf+0x162>
    1d4e:	27 e0       	ldi	r18, 0x07	; 7
    1d50:	9c e3       	ldi	r25, 0x3C	; 60
    1d52:	49 2e       	mov	r4, r25
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <vfprintf+0x164>
    1d56:	21 2f       	mov	r18, r17
    1d58:	41 2c       	mov	r4, r1
    1d5a:	56 01       	movw	r10, r12
    1d5c:	84 e0       	ldi	r24, 0x04	; 4
    1d5e:	a8 0e       	add	r10, r24
    1d60:	b1 1c       	adc	r11, r1
    1d62:	f6 01       	movw	r30, r12
    1d64:	60 81       	ld	r22, Z
    1d66:	71 81       	ldd	r23, Z+1	; 0x01
    1d68:	82 81       	ldd	r24, Z+2	; 0x02
    1d6a:	93 81       	ldd	r25, Z+3	; 0x03
    1d6c:	04 2d       	mov	r16, r4
    1d6e:	a3 01       	movw	r20, r6
    1d70:	0e 94 18 14 	call	0x2830	; 0x2830 <__ftoa_engine>
    1d74:	6c 01       	movw	r12, r24
    1d76:	f9 81       	ldd	r31, Y+1	; 0x01
    1d78:	fc 87       	std	Y+12, r31	; 0x0c
    1d7a:	f0 ff       	sbrs	r31, 0
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <vfprintf+0x18c>
    1d7e:	f3 ff       	sbrs	r31, 3
    1d80:	06 c0       	rjmp	.+12     	; 0x1d8e <vfprintf+0x198>
    1d82:	91 fc       	sbrc	r9, 1
    1d84:	06 c0       	rjmp	.+12     	; 0x1d92 <vfprintf+0x19c>
    1d86:	92 fe       	sbrs	r9, 2
    1d88:	06 c0       	rjmp	.+12     	; 0x1d96 <vfprintf+0x1a0>
    1d8a:	00 e2       	ldi	r16, 0x20	; 32
    1d8c:	05 c0       	rjmp	.+10     	; 0x1d98 <vfprintf+0x1a2>
    1d8e:	0d e2       	ldi	r16, 0x2D	; 45
    1d90:	03 c0       	rjmp	.+6      	; 0x1d98 <vfprintf+0x1a2>
    1d92:	0b e2       	ldi	r16, 0x2B	; 43
    1d94:	01 c0       	rjmp	.+2      	; 0x1d98 <vfprintf+0x1a2>
    1d96:	00 e0       	ldi	r16, 0x00	; 0
    1d98:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d9a:	8c 70       	andi	r24, 0x0C	; 12
    1d9c:	19 f0       	breq	.+6      	; 0x1da4 <vfprintf+0x1ae>
    1d9e:	01 11       	cpse	r16, r1
    1da0:	5a c2       	rjmp	.+1204   	; 0x2256 <vfprintf+0x660>
    1da2:	9b c2       	rjmp	.+1334   	; 0x22da <vfprintf+0x6e4>
    1da4:	97 fe       	sbrs	r9, 7
    1da6:	10 c0       	rjmp	.+32     	; 0x1dc8 <vfprintf+0x1d2>
    1da8:	4c 0c       	add	r4, r12
    1daa:	fc 85       	ldd	r31, Y+12	; 0x0c
    1dac:	f4 ff       	sbrs	r31, 4
    1dae:	04 c0       	rjmp	.+8      	; 0x1db8 <vfprintf+0x1c2>
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	81 33       	cpi	r24, 0x31	; 49
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <vfprintf+0x1c2>
    1db6:	4a 94       	dec	r4
    1db8:	14 14       	cp	r1, r4
    1dba:	74 f5       	brge	.+92     	; 0x1e18 <vfprintf+0x222>
    1dbc:	28 e0       	ldi	r18, 0x08	; 8
    1dbe:	24 15       	cp	r18, r4
    1dc0:	78 f5       	brcc	.+94     	; 0x1e20 <vfprintf+0x22a>
    1dc2:	88 e0       	ldi	r24, 0x08	; 8
    1dc4:	48 2e       	mov	r4, r24
    1dc6:	2c c0       	rjmp	.+88     	; 0x1e20 <vfprintf+0x22a>
    1dc8:	96 fc       	sbrc	r9, 6
    1dca:	2a c0       	rjmp	.+84     	; 0x1e20 <vfprintf+0x22a>
    1dcc:	81 2f       	mov	r24, r17
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	8c 15       	cp	r24, r12
    1dd2:	9d 05       	cpc	r25, r13
    1dd4:	9c f0       	brlt	.+38     	; 0x1dfc <vfprintf+0x206>
    1dd6:	3c ef       	ldi	r19, 0xFC	; 252
    1dd8:	c3 16       	cp	r12, r19
    1dda:	3f ef       	ldi	r19, 0xFF	; 255
    1ddc:	d3 06       	cpc	r13, r19
    1dde:	74 f0       	brlt	.+28     	; 0x1dfc <vfprintf+0x206>
    1de0:	89 2d       	mov	r24, r9
    1de2:	80 68       	ori	r24, 0x80	; 128
    1de4:	98 2e       	mov	r9, r24
    1de6:	0a c0       	rjmp	.+20     	; 0x1dfc <vfprintf+0x206>
    1de8:	e2 e0       	ldi	r30, 0x02	; 2
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	ec 0f       	add	r30, r28
    1dee:	fd 1f       	adc	r31, r29
    1df0:	e1 0f       	add	r30, r17
    1df2:	f1 1d       	adc	r31, r1
    1df4:	80 81       	ld	r24, Z
    1df6:	80 33       	cpi	r24, 0x30	; 48
    1df8:	19 f4       	brne	.+6      	; 0x1e00 <vfprintf+0x20a>
    1dfa:	11 50       	subi	r17, 0x01	; 1
    1dfc:	11 11       	cpse	r17, r1
    1dfe:	f4 cf       	rjmp	.-24     	; 0x1de8 <vfprintf+0x1f2>
    1e00:	97 fe       	sbrs	r9, 7
    1e02:	0e c0       	rjmp	.+28     	; 0x1e20 <vfprintf+0x22a>
    1e04:	44 24       	eor	r4, r4
    1e06:	43 94       	inc	r4
    1e08:	41 0e       	add	r4, r17
    1e0a:	81 2f       	mov	r24, r17
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	c8 16       	cp	r12, r24
    1e10:	d9 06       	cpc	r13, r25
    1e12:	2c f4       	brge	.+10     	; 0x1e1e <vfprintf+0x228>
    1e14:	1c 19       	sub	r17, r12
    1e16:	04 c0       	rjmp	.+8      	; 0x1e20 <vfprintf+0x22a>
    1e18:	44 24       	eor	r4, r4
    1e1a:	43 94       	inc	r4
    1e1c:	01 c0       	rjmp	.+2      	; 0x1e20 <vfprintf+0x22a>
    1e1e:	10 e0       	ldi	r17, 0x00	; 0
    1e20:	97 fe       	sbrs	r9, 7
    1e22:	06 c0       	rjmp	.+12     	; 0x1e30 <vfprintf+0x23a>
    1e24:	1c 14       	cp	r1, r12
    1e26:	1d 04       	cpc	r1, r13
    1e28:	34 f4       	brge	.+12     	; 0x1e36 <vfprintf+0x240>
    1e2a:	c6 01       	movw	r24, r12
    1e2c:	01 96       	adiw	r24, 0x01	; 1
    1e2e:	05 c0       	rjmp	.+10     	; 0x1e3a <vfprintf+0x244>
    1e30:	85 e0       	ldi	r24, 0x05	; 5
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <vfprintf+0x244>
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	01 11       	cpse	r16, r1
    1e3c:	01 96       	adiw	r24, 0x01	; 1
    1e3e:	11 23       	and	r17, r17
    1e40:	31 f0       	breq	.+12     	; 0x1e4e <vfprintf+0x258>
    1e42:	21 2f       	mov	r18, r17
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	2f 5f       	subi	r18, 0xFF	; 255
    1e48:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4a:	82 0f       	add	r24, r18
    1e4c:	93 1f       	adc	r25, r19
    1e4e:	25 2d       	mov	r18, r5
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	82 17       	cp	r24, r18
    1e54:	93 07       	cpc	r25, r19
    1e56:	14 f4       	brge	.+4      	; 0x1e5c <vfprintf+0x266>
    1e58:	58 1a       	sub	r5, r24
    1e5a:	01 c0       	rjmp	.+2      	; 0x1e5e <vfprintf+0x268>
    1e5c:	51 2c       	mov	r5, r1
    1e5e:	89 2d       	mov	r24, r9
    1e60:	89 70       	andi	r24, 0x09	; 9
    1e62:	49 f4       	brne	.+18     	; 0x1e76 <vfprintf+0x280>
    1e64:	55 20       	and	r5, r5
    1e66:	39 f0       	breq	.+14     	; 0x1e76 <vfprintf+0x280>
    1e68:	b7 01       	movw	r22, r14
    1e6a:	80 e2       	ldi	r24, 0x20	; 32
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    1e72:	5a 94       	dec	r5
    1e74:	f7 cf       	rjmp	.-18     	; 0x1e64 <vfprintf+0x26e>
    1e76:	00 23       	and	r16, r16
    1e78:	29 f0       	breq	.+10     	; 0x1e84 <vfprintf+0x28e>
    1e7a:	b7 01       	movw	r22, r14
    1e7c:	80 2f       	mov	r24, r16
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    1e84:	93 fc       	sbrc	r9, 3
    1e86:	09 c0       	rjmp	.+18     	; 0x1e9a <vfprintf+0x2a4>
    1e88:	55 20       	and	r5, r5
    1e8a:	39 f0       	breq	.+14     	; 0x1e9a <vfprintf+0x2a4>
    1e8c:	b7 01       	movw	r22, r14
    1e8e:	80 e3       	ldi	r24, 0x30	; 48
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    1e96:	5a 94       	dec	r5
    1e98:	f7 cf       	rjmp	.-18     	; 0x1e88 <vfprintf+0x292>
    1e9a:	97 fe       	sbrs	r9, 7
    1e9c:	4c c0       	rjmp	.+152    	; 0x1f36 <vfprintf+0x340>
    1e9e:	46 01       	movw	r8, r12
    1ea0:	d7 fe       	sbrs	r13, 7
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <vfprintf+0x2b2>
    1ea4:	81 2c       	mov	r8, r1
    1ea6:	91 2c       	mov	r9, r1
    1ea8:	c6 01       	movw	r24, r12
    1eaa:	88 19       	sub	r24, r8
    1eac:	99 09       	sbc	r25, r9
    1eae:	f3 01       	movw	r30, r6
    1eb0:	e8 0f       	add	r30, r24
    1eb2:	f9 1f       	adc	r31, r25
    1eb4:	fe 87       	std	Y+14, r31	; 0x0e
    1eb6:	ed 87       	std	Y+13, r30	; 0x0d
    1eb8:	96 01       	movw	r18, r12
    1eba:	24 19       	sub	r18, r4
    1ebc:	31 09       	sbc	r19, r1
    1ebe:	38 8b       	std	Y+16, r19	; 0x10
    1ec0:	2f 87       	std	Y+15, r18	; 0x0f
    1ec2:	01 2f       	mov	r16, r17
    1ec4:	10 e0       	ldi	r17, 0x00	; 0
    1ec6:	11 95       	neg	r17
    1ec8:	01 95       	neg	r16
    1eca:	11 09       	sbc	r17, r1
    1ecc:	3f ef       	ldi	r19, 0xFF	; 255
    1ece:	83 16       	cp	r8, r19
    1ed0:	93 06       	cpc	r9, r19
    1ed2:	29 f4       	brne	.+10     	; 0x1ede <vfprintf+0x2e8>
    1ed4:	b7 01       	movw	r22, r14
    1ed6:	8e e2       	ldi	r24, 0x2E	; 46
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    1ede:	c8 14       	cp	r12, r8
    1ee0:	d9 04       	cpc	r13, r9
    1ee2:	4c f0       	brlt	.+18     	; 0x1ef6 <vfprintf+0x300>
    1ee4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee6:	98 89       	ldd	r25, Y+16	; 0x10
    1ee8:	88 15       	cp	r24, r8
    1eea:	99 05       	cpc	r25, r9
    1eec:	24 f4       	brge	.+8      	; 0x1ef6 <vfprintf+0x300>
    1eee:	ed 85       	ldd	r30, Y+13	; 0x0d
    1ef0:	fe 85       	ldd	r31, Y+14	; 0x0e
    1ef2:	81 81       	ldd	r24, Z+1	; 0x01
    1ef4:	01 c0       	rjmp	.+2      	; 0x1ef8 <vfprintf+0x302>
    1ef6:	80 e3       	ldi	r24, 0x30	; 48
    1ef8:	f1 e0       	ldi	r31, 0x01	; 1
    1efa:	8f 1a       	sub	r8, r31
    1efc:	91 08       	sbc	r9, r1
    1efe:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f00:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f02:	2f 5f       	subi	r18, 0xFF	; 255
    1f04:	3f 4f       	sbci	r19, 0xFF	; 255
    1f06:	3e 87       	std	Y+14, r19	; 0x0e
    1f08:	2d 87       	std	Y+13, r18	; 0x0d
    1f0a:	80 16       	cp	r8, r16
    1f0c:	91 06       	cpc	r9, r17
    1f0e:	2c f0       	brlt	.+10     	; 0x1f1a <vfprintf+0x324>
    1f10:	b7 01       	movw	r22, r14
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    1f18:	d9 cf       	rjmp	.-78     	; 0x1ecc <vfprintf+0x2d6>
    1f1a:	c8 14       	cp	r12, r8
    1f1c:	d9 04       	cpc	r13, r9
    1f1e:	41 f4       	brne	.+16     	; 0x1f30 <vfprintf+0x33a>
    1f20:	9a 81       	ldd	r25, Y+2	; 0x02
    1f22:	96 33       	cpi	r25, 0x36	; 54
    1f24:	20 f4       	brcc	.+8      	; 0x1f2e <vfprintf+0x338>
    1f26:	95 33       	cpi	r25, 0x35	; 53
    1f28:	19 f4       	brne	.+6      	; 0x1f30 <vfprintf+0x33a>
    1f2a:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f2c:	34 ff       	sbrs	r19, 4
    1f2e:	81 e3       	ldi	r24, 0x31	; 49
    1f30:	b7 01       	movw	r22, r14
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	4e c0       	rjmp	.+156    	; 0x1fd2 <vfprintf+0x3dc>
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	81 33       	cpi	r24, 0x31	; 49
    1f3a:	19 f0       	breq	.+6      	; 0x1f42 <vfprintf+0x34c>
    1f3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f3e:	9f 7e       	andi	r25, 0xEF	; 239
    1f40:	9c 87       	std	Y+12, r25	; 0x0c
    1f42:	b7 01       	movw	r22, r14
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    1f4a:	11 11       	cpse	r17, r1
    1f4c:	05 c0       	rjmp	.+10     	; 0x1f58 <vfprintf+0x362>
    1f4e:	94 fc       	sbrc	r9, 4
    1f50:	18 c0       	rjmp	.+48     	; 0x1f82 <vfprintf+0x38c>
    1f52:	85 e6       	ldi	r24, 0x65	; 101
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	17 c0       	rjmp	.+46     	; 0x1f86 <vfprintf+0x390>
    1f58:	b7 01       	movw	r22, r14
    1f5a:	8e e2       	ldi	r24, 0x2E	; 46
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    1f62:	1e 5f       	subi	r17, 0xFE	; 254
    1f64:	82 e0       	ldi	r24, 0x02	; 2
    1f66:	01 e0       	ldi	r16, 0x01	; 1
    1f68:	08 0f       	add	r16, r24
    1f6a:	f3 01       	movw	r30, r6
    1f6c:	e8 0f       	add	r30, r24
    1f6e:	f1 1d       	adc	r31, r1
    1f70:	80 81       	ld	r24, Z
    1f72:	b7 01       	movw	r22, r14
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    1f7a:	80 2f       	mov	r24, r16
    1f7c:	01 13       	cpse	r16, r17
    1f7e:	f3 cf       	rjmp	.-26     	; 0x1f66 <vfprintf+0x370>
    1f80:	e6 cf       	rjmp	.-52     	; 0x1f4e <vfprintf+0x358>
    1f82:	85 e4       	ldi	r24, 0x45	; 69
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	b7 01       	movw	r22, r14
    1f88:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    1f8c:	d7 fc       	sbrc	r13, 7
    1f8e:	06 c0       	rjmp	.+12     	; 0x1f9c <vfprintf+0x3a6>
    1f90:	c1 14       	cp	r12, r1
    1f92:	d1 04       	cpc	r13, r1
    1f94:	41 f4       	brne	.+16     	; 0x1fa6 <vfprintf+0x3b0>
    1f96:	ec 85       	ldd	r30, Y+12	; 0x0c
    1f98:	e4 ff       	sbrs	r30, 4
    1f9a:	05 c0       	rjmp	.+10     	; 0x1fa6 <vfprintf+0x3b0>
    1f9c:	d1 94       	neg	r13
    1f9e:	c1 94       	neg	r12
    1fa0:	d1 08       	sbc	r13, r1
    1fa2:	8d e2       	ldi	r24, 0x2D	; 45
    1fa4:	01 c0       	rjmp	.+2      	; 0x1fa8 <vfprintf+0x3b2>
    1fa6:	8b e2       	ldi	r24, 0x2B	; 43
    1fa8:	b7 01       	movw	r22, r14
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    1fb0:	80 e3       	ldi	r24, 0x30	; 48
    1fb2:	2a e0       	ldi	r18, 0x0A	; 10
    1fb4:	c2 16       	cp	r12, r18
    1fb6:	d1 04       	cpc	r13, r1
    1fb8:	2c f0       	brlt	.+10     	; 0x1fc4 <vfprintf+0x3ce>
    1fba:	8f 5f       	subi	r24, 0xFF	; 255
    1fbc:	fa e0       	ldi	r31, 0x0A	; 10
    1fbe:	cf 1a       	sub	r12, r31
    1fc0:	d1 08       	sbc	r13, r1
    1fc2:	f7 cf       	rjmp	.-18     	; 0x1fb2 <vfprintf+0x3bc>
    1fc4:	b7 01       	movw	r22, r14
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    1fcc:	b7 01       	movw	r22, r14
    1fce:	c6 01       	movw	r24, r12
    1fd0:	c0 96       	adiw	r24, 0x30	; 48
    1fd2:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    1fd6:	54 c1       	rjmp	.+680    	; 0x2280 <vfprintf+0x68a>
    1fd8:	83 36       	cpi	r24, 0x63	; 99
    1fda:	31 f0       	breq	.+12     	; 0x1fe8 <vfprintf+0x3f2>
    1fdc:	83 37       	cpi	r24, 0x73	; 115
    1fde:	79 f0       	breq	.+30     	; 0x1ffe <vfprintf+0x408>
    1fe0:	83 35       	cpi	r24, 0x53	; 83
    1fe2:	09 f0       	breq	.+2      	; 0x1fe6 <vfprintf+0x3f0>
    1fe4:	56 c0       	rjmp	.+172    	; 0x2092 <vfprintf+0x49c>
    1fe6:	20 c0       	rjmp	.+64     	; 0x2028 <vfprintf+0x432>
    1fe8:	56 01       	movw	r10, r12
    1fea:	32 e0       	ldi	r19, 0x02	; 2
    1fec:	a3 0e       	add	r10, r19
    1fee:	b1 1c       	adc	r11, r1
    1ff0:	f6 01       	movw	r30, r12
    1ff2:	80 81       	ld	r24, Z
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	01 e0       	ldi	r16, 0x01	; 1
    1ff8:	10 e0       	ldi	r17, 0x00	; 0
    1ffa:	63 01       	movw	r12, r6
    1ffc:	12 c0       	rjmp	.+36     	; 0x2022 <vfprintf+0x42c>
    1ffe:	56 01       	movw	r10, r12
    2000:	f2 e0       	ldi	r31, 0x02	; 2
    2002:	af 0e       	add	r10, r31
    2004:	b1 1c       	adc	r11, r1
    2006:	f6 01       	movw	r30, r12
    2008:	c0 80       	ld	r12, Z
    200a:	d1 80       	ldd	r13, Z+1	; 0x01
    200c:	96 fe       	sbrs	r9, 6
    200e:	03 c0       	rjmp	.+6      	; 0x2016 <vfprintf+0x420>
    2010:	61 2f       	mov	r22, r17
    2012:	70 e0       	ldi	r23, 0x00	; 0
    2014:	02 c0       	rjmp	.+4      	; 0x201a <vfprintf+0x424>
    2016:	6f ef       	ldi	r22, 0xFF	; 255
    2018:	7f ef       	ldi	r23, 0xFF	; 255
    201a:	c6 01       	movw	r24, r12
    201c:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <strnlen>
    2020:	8c 01       	movw	r16, r24
    2022:	f9 2d       	mov	r31, r9
    2024:	ff 77       	andi	r31, 0x7F	; 127
    2026:	14 c0       	rjmp	.+40     	; 0x2050 <vfprintf+0x45a>
    2028:	56 01       	movw	r10, r12
    202a:	22 e0       	ldi	r18, 0x02	; 2
    202c:	a2 0e       	add	r10, r18
    202e:	b1 1c       	adc	r11, r1
    2030:	f6 01       	movw	r30, r12
    2032:	c0 80       	ld	r12, Z
    2034:	d1 80       	ldd	r13, Z+1	; 0x01
    2036:	96 fe       	sbrs	r9, 6
    2038:	03 c0       	rjmp	.+6      	; 0x2040 <vfprintf+0x44a>
    203a:	61 2f       	mov	r22, r17
    203c:	70 e0       	ldi	r23, 0x00	; 0
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <vfprintf+0x44e>
    2040:	6f ef       	ldi	r22, 0xFF	; 255
    2042:	7f ef       	ldi	r23, 0xFF	; 255
    2044:	c6 01       	movw	r24, r12
    2046:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <strnlen_P>
    204a:	8c 01       	movw	r16, r24
    204c:	f9 2d       	mov	r31, r9
    204e:	f0 68       	ori	r31, 0x80	; 128
    2050:	9f 2e       	mov	r9, r31
    2052:	f3 fd       	sbrc	r31, 3
    2054:	1a c0       	rjmp	.+52     	; 0x208a <vfprintf+0x494>
    2056:	85 2d       	mov	r24, r5
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	08 17       	cp	r16, r24
    205c:	19 07       	cpc	r17, r25
    205e:	a8 f4       	brcc	.+42     	; 0x208a <vfprintf+0x494>
    2060:	b7 01       	movw	r22, r14
    2062:	80 e2       	ldi	r24, 0x20	; 32
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    206a:	5a 94       	dec	r5
    206c:	f4 cf       	rjmp	.-24     	; 0x2056 <vfprintf+0x460>
    206e:	f6 01       	movw	r30, r12
    2070:	97 fc       	sbrc	r9, 7
    2072:	85 91       	lpm	r24, Z+
    2074:	97 fe       	sbrs	r9, 7
    2076:	81 91       	ld	r24, Z+
    2078:	6f 01       	movw	r12, r30
    207a:	b7 01       	movw	r22, r14
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    2082:	51 10       	cpse	r5, r1
    2084:	5a 94       	dec	r5
    2086:	01 50       	subi	r16, 0x01	; 1
    2088:	11 09       	sbc	r17, r1
    208a:	01 15       	cp	r16, r1
    208c:	11 05       	cpc	r17, r1
    208e:	79 f7       	brne	.-34     	; 0x206e <vfprintf+0x478>
    2090:	f7 c0       	rjmp	.+494    	; 0x2280 <vfprintf+0x68a>
    2092:	84 36       	cpi	r24, 0x64	; 100
    2094:	11 f0       	breq	.+4      	; 0x209a <vfprintf+0x4a4>
    2096:	89 36       	cpi	r24, 0x69	; 105
    2098:	61 f5       	brne	.+88     	; 0x20f2 <vfprintf+0x4fc>
    209a:	56 01       	movw	r10, r12
    209c:	97 fe       	sbrs	r9, 7
    209e:	09 c0       	rjmp	.+18     	; 0x20b2 <vfprintf+0x4bc>
    20a0:	24 e0       	ldi	r18, 0x04	; 4
    20a2:	a2 0e       	add	r10, r18
    20a4:	b1 1c       	adc	r11, r1
    20a6:	f6 01       	movw	r30, r12
    20a8:	60 81       	ld	r22, Z
    20aa:	71 81       	ldd	r23, Z+1	; 0x01
    20ac:	82 81       	ldd	r24, Z+2	; 0x02
    20ae:	93 81       	ldd	r25, Z+3	; 0x03
    20b0:	0a c0       	rjmp	.+20     	; 0x20c6 <vfprintf+0x4d0>
    20b2:	f2 e0       	ldi	r31, 0x02	; 2
    20b4:	af 0e       	add	r10, r31
    20b6:	b1 1c       	adc	r11, r1
    20b8:	f6 01       	movw	r30, r12
    20ba:	60 81       	ld	r22, Z
    20bc:	71 81       	ldd	r23, Z+1	; 0x01
    20be:	07 2e       	mov	r0, r23
    20c0:	00 0c       	add	r0, r0
    20c2:	88 0b       	sbc	r24, r24
    20c4:	99 0b       	sbc	r25, r25
    20c6:	f9 2d       	mov	r31, r9
    20c8:	ff 76       	andi	r31, 0x6F	; 111
    20ca:	9f 2e       	mov	r9, r31
    20cc:	97 ff       	sbrs	r25, 7
    20ce:	09 c0       	rjmp	.+18     	; 0x20e2 <vfprintf+0x4ec>
    20d0:	90 95       	com	r25
    20d2:	80 95       	com	r24
    20d4:	70 95       	com	r23
    20d6:	61 95       	neg	r22
    20d8:	7f 4f       	sbci	r23, 0xFF	; 255
    20da:	8f 4f       	sbci	r24, 0xFF	; 255
    20dc:	9f 4f       	sbci	r25, 0xFF	; 255
    20de:	f0 68       	ori	r31, 0x80	; 128
    20e0:	9f 2e       	mov	r9, r31
    20e2:	2a e0       	ldi	r18, 0x0A	; 10
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	a3 01       	movw	r20, r6
    20e8:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <__ultoa_invert>
    20ec:	c8 2e       	mov	r12, r24
    20ee:	c6 18       	sub	r12, r6
    20f0:	3f c0       	rjmp	.+126    	; 0x2170 <vfprintf+0x57a>
    20f2:	09 2d       	mov	r16, r9
    20f4:	85 37       	cpi	r24, 0x75	; 117
    20f6:	21 f4       	brne	.+8      	; 0x2100 <vfprintf+0x50a>
    20f8:	0f 7e       	andi	r16, 0xEF	; 239
    20fa:	2a e0       	ldi	r18, 0x0A	; 10
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	1d c0       	rjmp	.+58     	; 0x213a <vfprintf+0x544>
    2100:	09 7f       	andi	r16, 0xF9	; 249
    2102:	8f 36       	cpi	r24, 0x6F	; 111
    2104:	91 f0       	breq	.+36     	; 0x212a <vfprintf+0x534>
    2106:	18 f4       	brcc	.+6      	; 0x210e <vfprintf+0x518>
    2108:	88 35       	cpi	r24, 0x58	; 88
    210a:	59 f0       	breq	.+22     	; 0x2122 <vfprintf+0x52c>
    210c:	c3 c0       	rjmp	.+390    	; 0x2294 <vfprintf+0x69e>
    210e:	80 37       	cpi	r24, 0x70	; 112
    2110:	19 f0       	breq	.+6      	; 0x2118 <vfprintf+0x522>
    2112:	88 37       	cpi	r24, 0x78	; 120
    2114:	11 f0       	breq	.+4      	; 0x211a <vfprintf+0x524>
    2116:	be c0       	rjmp	.+380    	; 0x2294 <vfprintf+0x69e>
    2118:	00 61       	ori	r16, 0x10	; 16
    211a:	04 ff       	sbrs	r16, 4
    211c:	09 c0       	rjmp	.+18     	; 0x2130 <vfprintf+0x53a>
    211e:	04 60       	ori	r16, 0x04	; 4
    2120:	07 c0       	rjmp	.+14     	; 0x2130 <vfprintf+0x53a>
    2122:	94 fe       	sbrs	r9, 4
    2124:	08 c0       	rjmp	.+16     	; 0x2136 <vfprintf+0x540>
    2126:	06 60       	ori	r16, 0x06	; 6
    2128:	06 c0       	rjmp	.+12     	; 0x2136 <vfprintf+0x540>
    212a:	28 e0       	ldi	r18, 0x08	; 8
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	05 c0       	rjmp	.+10     	; 0x213a <vfprintf+0x544>
    2130:	20 e1       	ldi	r18, 0x10	; 16
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	02 c0       	rjmp	.+4      	; 0x213a <vfprintf+0x544>
    2136:	20 e1       	ldi	r18, 0x10	; 16
    2138:	32 e0       	ldi	r19, 0x02	; 2
    213a:	56 01       	movw	r10, r12
    213c:	07 ff       	sbrs	r16, 7
    213e:	09 c0       	rjmp	.+18     	; 0x2152 <vfprintf+0x55c>
    2140:	84 e0       	ldi	r24, 0x04	; 4
    2142:	a8 0e       	add	r10, r24
    2144:	b1 1c       	adc	r11, r1
    2146:	f6 01       	movw	r30, r12
    2148:	60 81       	ld	r22, Z
    214a:	71 81       	ldd	r23, Z+1	; 0x01
    214c:	82 81       	ldd	r24, Z+2	; 0x02
    214e:	93 81       	ldd	r25, Z+3	; 0x03
    2150:	08 c0       	rjmp	.+16     	; 0x2162 <vfprintf+0x56c>
    2152:	f2 e0       	ldi	r31, 0x02	; 2
    2154:	af 0e       	add	r10, r31
    2156:	b1 1c       	adc	r11, r1
    2158:	f6 01       	movw	r30, r12
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	a3 01       	movw	r20, r6
    2164:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <__ultoa_invert>
    2168:	c8 2e       	mov	r12, r24
    216a:	c6 18       	sub	r12, r6
    216c:	0f 77       	andi	r16, 0x7F	; 127
    216e:	90 2e       	mov	r9, r16
    2170:	96 fe       	sbrs	r9, 6
    2172:	0b c0       	rjmp	.+22     	; 0x218a <vfprintf+0x594>
    2174:	09 2d       	mov	r16, r9
    2176:	0e 7f       	andi	r16, 0xFE	; 254
    2178:	c1 16       	cp	r12, r17
    217a:	50 f4       	brcc	.+20     	; 0x2190 <vfprintf+0x59a>
    217c:	94 fe       	sbrs	r9, 4
    217e:	0a c0       	rjmp	.+20     	; 0x2194 <vfprintf+0x59e>
    2180:	92 fc       	sbrc	r9, 2
    2182:	08 c0       	rjmp	.+16     	; 0x2194 <vfprintf+0x59e>
    2184:	09 2d       	mov	r16, r9
    2186:	0e 7e       	andi	r16, 0xEE	; 238
    2188:	05 c0       	rjmp	.+10     	; 0x2194 <vfprintf+0x59e>
    218a:	dc 2c       	mov	r13, r12
    218c:	09 2d       	mov	r16, r9
    218e:	03 c0       	rjmp	.+6      	; 0x2196 <vfprintf+0x5a0>
    2190:	dc 2c       	mov	r13, r12
    2192:	01 c0       	rjmp	.+2      	; 0x2196 <vfprintf+0x5a0>
    2194:	d1 2e       	mov	r13, r17
    2196:	04 ff       	sbrs	r16, 4
    2198:	0d c0       	rjmp	.+26     	; 0x21b4 <vfprintf+0x5be>
    219a:	fe 01       	movw	r30, r28
    219c:	ec 0d       	add	r30, r12
    219e:	f1 1d       	adc	r31, r1
    21a0:	80 81       	ld	r24, Z
    21a2:	80 33       	cpi	r24, 0x30	; 48
    21a4:	11 f4       	brne	.+4      	; 0x21aa <vfprintf+0x5b4>
    21a6:	09 7e       	andi	r16, 0xE9	; 233
    21a8:	09 c0       	rjmp	.+18     	; 0x21bc <vfprintf+0x5c6>
    21aa:	02 ff       	sbrs	r16, 2
    21ac:	06 c0       	rjmp	.+12     	; 0x21ba <vfprintf+0x5c4>
    21ae:	d3 94       	inc	r13
    21b0:	d3 94       	inc	r13
    21b2:	04 c0       	rjmp	.+8      	; 0x21bc <vfprintf+0x5c6>
    21b4:	80 2f       	mov	r24, r16
    21b6:	86 78       	andi	r24, 0x86	; 134
    21b8:	09 f0       	breq	.+2      	; 0x21bc <vfprintf+0x5c6>
    21ba:	d3 94       	inc	r13
    21bc:	03 fd       	sbrc	r16, 3
    21be:	11 c0       	rjmp	.+34     	; 0x21e2 <vfprintf+0x5ec>
    21c0:	00 ff       	sbrs	r16, 0
    21c2:	06 c0       	rjmp	.+12     	; 0x21d0 <vfprintf+0x5da>
    21c4:	1c 2d       	mov	r17, r12
    21c6:	d5 14       	cp	r13, r5
    21c8:	80 f4       	brcc	.+32     	; 0x21ea <vfprintf+0x5f4>
    21ca:	15 0d       	add	r17, r5
    21cc:	1d 19       	sub	r17, r13
    21ce:	0d c0       	rjmp	.+26     	; 0x21ea <vfprintf+0x5f4>
    21d0:	d5 14       	cp	r13, r5
    21d2:	58 f4       	brcc	.+22     	; 0x21ea <vfprintf+0x5f4>
    21d4:	b7 01       	movw	r22, r14
    21d6:	80 e2       	ldi	r24, 0x20	; 32
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    21de:	d3 94       	inc	r13
    21e0:	f7 cf       	rjmp	.-18     	; 0x21d0 <vfprintf+0x5da>
    21e2:	d5 14       	cp	r13, r5
    21e4:	10 f4       	brcc	.+4      	; 0x21ea <vfprintf+0x5f4>
    21e6:	5d 18       	sub	r5, r13
    21e8:	01 c0       	rjmp	.+2      	; 0x21ec <vfprintf+0x5f6>
    21ea:	51 2c       	mov	r5, r1
    21ec:	04 ff       	sbrs	r16, 4
    21ee:	10 c0       	rjmp	.+32     	; 0x2210 <vfprintf+0x61a>
    21f0:	b7 01       	movw	r22, r14
    21f2:	80 e3       	ldi	r24, 0x30	; 48
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    21fa:	02 ff       	sbrs	r16, 2
    21fc:	17 c0       	rjmp	.+46     	; 0x222c <vfprintf+0x636>
    21fe:	01 fd       	sbrc	r16, 1
    2200:	03 c0       	rjmp	.+6      	; 0x2208 <vfprintf+0x612>
    2202:	88 e7       	ldi	r24, 0x78	; 120
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	02 c0       	rjmp	.+4      	; 0x220c <vfprintf+0x616>
    2208:	88 e5       	ldi	r24, 0x58	; 88
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	b7 01       	movw	r22, r14
    220e:	0c c0       	rjmp	.+24     	; 0x2228 <vfprintf+0x632>
    2210:	80 2f       	mov	r24, r16
    2212:	86 78       	andi	r24, 0x86	; 134
    2214:	59 f0       	breq	.+22     	; 0x222c <vfprintf+0x636>
    2216:	01 ff       	sbrs	r16, 1
    2218:	02 c0       	rjmp	.+4      	; 0x221e <vfprintf+0x628>
    221a:	8b e2       	ldi	r24, 0x2B	; 43
    221c:	01 c0       	rjmp	.+2      	; 0x2220 <vfprintf+0x62a>
    221e:	80 e2       	ldi	r24, 0x20	; 32
    2220:	07 fd       	sbrc	r16, 7
    2222:	8d e2       	ldi	r24, 0x2D	; 45
    2224:	b7 01       	movw	r22, r14
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    222c:	c1 16       	cp	r12, r17
    222e:	38 f4       	brcc	.+14     	; 0x223e <vfprintf+0x648>
    2230:	b7 01       	movw	r22, r14
    2232:	80 e3       	ldi	r24, 0x30	; 48
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    223a:	11 50       	subi	r17, 0x01	; 1
    223c:	f7 cf       	rjmp	.-18     	; 0x222c <vfprintf+0x636>
    223e:	ca 94       	dec	r12
    2240:	f3 01       	movw	r30, r6
    2242:	ec 0d       	add	r30, r12
    2244:	f1 1d       	adc	r31, r1
    2246:	80 81       	ld	r24, Z
    2248:	b7 01       	movw	r22, r14
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    2250:	c1 10       	cpse	r12, r1
    2252:	f5 cf       	rjmp	.-22     	; 0x223e <vfprintf+0x648>
    2254:	15 c0       	rjmp	.+42     	; 0x2280 <vfprintf+0x68a>
    2256:	f4 e0       	ldi	r31, 0x04	; 4
    2258:	f5 15       	cp	r31, r5
    225a:	60 f5       	brcc	.+88     	; 0x22b4 <vfprintf+0x6be>
    225c:	84 e0       	ldi	r24, 0x04	; 4
    225e:	58 1a       	sub	r5, r24
    2260:	93 fe       	sbrs	r9, 3
    2262:	1f c0       	rjmp	.+62     	; 0x22a2 <vfprintf+0x6ac>
    2264:	01 11       	cpse	r16, r1
    2266:	27 c0       	rjmp	.+78     	; 0x22b6 <vfprintf+0x6c0>
    2268:	2c 85       	ldd	r18, Y+12	; 0x0c
    226a:	23 ff       	sbrs	r18, 3
    226c:	2a c0       	rjmp	.+84     	; 0x22c2 <vfprintf+0x6cc>
    226e:	08 e6       	ldi	r16, 0x68	; 104
    2270:	10 e0       	ldi	r17, 0x00	; 0
    2272:	39 2d       	mov	r19, r9
    2274:	30 71       	andi	r19, 0x10	; 16
    2276:	93 2e       	mov	r9, r19
    2278:	f8 01       	movw	r30, r16
    227a:	84 91       	lpm	r24, Z
    227c:	81 11       	cpse	r24, r1
    227e:	24 c0       	rjmp	.+72     	; 0x22c8 <vfprintf+0x6d2>
    2280:	55 20       	and	r5, r5
    2282:	09 f4       	brne	.+2      	; 0x2286 <vfprintf+0x690>
    2284:	e4 cc       	rjmp	.-1592   	; 0x1c4e <vfprintf+0x58>
    2286:	b7 01       	movw	r22, r14
    2288:	80 e2       	ldi	r24, 0x20	; 32
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    2290:	5a 94       	dec	r5
    2292:	f6 cf       	rjmp	.-20     	; 0x2280 <vfprintf+0x68a>
    2294:	f7 01       	movw	r30, r14
    2296:	86 81       	ldd	r24, Z+6	; 0x06
    2298:	97 81       	ldd	r25, Z+7	; 0x07
    229a:	26 c0       	rjmp	.+76     	; 0x22e8 <vfprintf+0x6f2>
    229c:	8f ef       	ldi	r24, 0xFF	; 255
    229e:	9f ef       	ldi	r25, 0xFF	; 255
    22a0:	23 c0       	rjmp	.+70     	; 0x22e8 <vfprintf+0x6f2>
    22a2:	b7 01       	movw	r22, r14
    22a4:	80 e2       	ldi	r24, 0x20	; 32
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    22ac:	5a 94       	dec	r5
    22ae:	51 10       	cpse	r5, r1
    22b0:	f8 cf       	rjmp	.-16     	; 0x22a2 <vfprintf+0x6ac>
    22b2:	d8 cf       	rjmp	.-80     	; 0x2264 <vfprintf+0x66e>
    22b4:	51 2c       	mov	r5, r1
    22b6:	b7 01       	movw	r22, r14
    22b8:	80 2f       	mov	r24, r16
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    22c0:	d3 cf       	rjmp	.-90     	; 0x2268 <vfprintf+0x672>
    22c2:	0c e6       	ldi	r16, 0x6C	; 108
    22c4:	10 e0       	ldi	r17, 0x00	; 0
    22c6:	d5 cf       	rjmp	.-86     	; 0x2272 <vfprintf+0x67c>
    22c8:	91 10       	cpse	r9, r1
    22ca:	80 52       	subi	r24, 0x20	; 32
    22cc:	b7 01       	movw	r22, r14
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <fputc>
    22d4:	0f 5f       	subi	r16, 0xFF	; 255
    22d6:	1f 4f       	sbci	r17, 0xFF	; 255
    22d8:	cf cf       	rjmp	.-98     	; 0x2278 <vfprintf+0x682>
    22da:	23 e0       	ldi	r18, 0x03	; 3
    22dc:	25 15       	cp	r18, r5
    22de:	10 f4       	brcc	.+4      	; 0x22e4 <vfprintf+0x6ee>
    22e0:	83 e0       	ldi	r24, 0x03	; 3
    22e2:	bd cf       	rjmp	.-134    	; 0x225e <vfprintf+0x668>
    22e4:	51 2c       	mov	r5, r1
    22e6:	c0 cf       	rjmp	.-128    	; 0x2268 <vfprintf+0x672>
    22e8:	60 96       	adiw	r28, 0x10	; 16
    22ea:	e2 e1       	ldi	r30, 0x12	; 18
    22ec:	0c 94 a8 11 	jmp	0x2350	; 0x2350 <__epilogue_restores__>

000022f0 <__divmodhi4>:
    22f0:	97 fb       	bst	r25, 7
    22f2:	07 2e       	mov	r0, r23
    22f4:	16 f4       	brtc	.+4      	; 0x22fa <__divmodhi4+0xa>
    22f6:	00 94       	com	r0
    22f8:	07 d0       	rcall	.+14     	; 0x2308 <__divmodhi4_neg1>
    22fa:	77 fd       	sbrc	r23, 7
    22fc:	09 d0       	rcall	.+18     	; 0x2310 <__divmodhi4_neg2>
    22fe:	0e 94 c3 11 	call	0x2386	; 0x2386 <__udivmodhi4>
    2302:	07 fc       	sbrc	r0, 7
    2304:	05 d0       	rcall	.+10     	; 0x2310 <__divmodhi4_neg2>
    2306:	3e f4       	brtc	.+14     	; 0x2316 <__divmodhi4_exit>

00002308 <__divmodhi4_neg1>:
    2308:	90 95       	com	r25
    230a:	81 95       	neg	r24
    230c:	9f 4f       	sbci	r25, 0xFF	; 255
    230e:	08 95       	ret

00002310 <__divmodhi4_neg2>:
    2310:	70 95       	com	r23
    2312:	61 95       	neg	r22
    2314:	7f 4f       	sbci	r23, 0xFF	; 255

00002316 <__divmodhi4_exit>:
    2316:	08 95       	ret

00002318 <__prologue_saves__>:
    2318:	2f 92       	push	r2
    231a:	3f 92       	push	r3
    231c:	4f 92       	push	r4
    231e:	5f 92       	push	r5
    2320:	6f 92       	push	r6
    2322:	7f 92       	push	r7
    2324:	8f 92       	push	r8
    2326:	9f 92       	push	r9
    2328:	af 92       	push	r10
    232a:	bf 92       	push	r11
    232c:	cf 92       	push	r12
    232e:	df 92       	push	r13
    2330:	ef 92       	push	r14
    2332:	ff 92       	push	r15
    2334:	0f 93       	push	r16
    2336:	1f 93       	push	r17
    2338:	cf 93       	push	r28
    233a:	df 93       	push	r29
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	ca 1b       	sub	r28, r26
    2342:	db 0b       	sbc	r29, r27
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	09 94       	ijmp

00002350 <__epilogue_restores__>:
    2350:	2a 88       	ldd	r2, Y+18	; 0x12
    2352:	39 88       	ldd	r3, Y+17	; 0x11
    2354:	48 88       	ldd	r4, Y+16	; 0x10
    2356:	5f 84       	ldd	r5, Y+15	; 0x0f
    2358:	6e 84       	ldd	r6, Y+14	; 0x0e
    235a:	7d 84       	ldd	r7, Y+13	; 0x0d
    235c:	8c 84       	ldd	r8, Y+12	; 0x0c
    235e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2360:	aa 84       	ldd	r10, Y+10	; 0x0a
    2362:	b9 84       	ldd	r11, Y+9	; 0x09
    2364:	c8 84       	ldd	r12, Y+8	; 0x08
    2366:	df 80       	ldd	r13, Y+7	; 0x07
    2368:	ee 80       	ldd	r14, Y+6	; 0x06
    236a:	fd 80       	ldd	r15, Y+5	; 0x05
    236c:	0c 81       	ldd	r16, Y+4	; 0x04
    236e:	1b 81       	ldd	r17, Y+3	; 0x03
    2370:	aa 81       	ldd	r26, Y+2	; 0x02
    2372:	b9 81       	ldd	r27, Y+1	; 0x01
    2374:	ce 0f       	add	r28, r30
    2376:	d1 1d       	adc	r29, r1
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	ed 01       	movw	r28, r26
    2384:	08 95       	ret

00002386 <__udivmodhi4>:
    2386:	aa 1b       	sub	r26, r26
    2388:	bb 1b       	sub	r27, r27
    238a:	51 e1       	ldi	r21, 0x11	; 17
    238c:	07 c0       	rjmp	.+14     	; 0x239c <__udivmodhi4_ep>

0000238e <__udivmodhi4_loop>:
    238e:	aa 1f       	adc	r26, r26
    2390:	bb 1f       	adc	r27, r27
    2392:	a6 17       	cp	r26, r22
    2394:	b7 07       	cpc	r27, r23
    2396:	10 f0       	brcs	.+4      	; 0x239c <__udivmodhi4_ep>
    2398:	a6 1b       	sub	r26, r22
    239a:	b7 0b       	sbc	r27, r23

0000239c <__udivmodhi4_ep>:
    239c:	88 1f       	adc	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	5a 95       	dec	r21
    23a2:	a9 f7       	brne	.-22     	; 0x238e <__udivmodhi4_loop>
    23a4:	80 95       	com	r24
    23a6:	90 95       	com	r25
    23a8:	bc 01       	movw	r22, r24
    23aa:	cd 01       	movw	r24, r26
    23ac:	08 95       	ret

000023ae <swapfunc>:
    23ae:	dc 01       	movw	r26, r24
    23b0:	fb 01       	movw	r30, r22
    23b2:	8c 91       	ld	r24, X
    23b4:	90 81       	ld	r25, Z
    23b6:	9d 93       	st	X+, r25
    23b8:	81 93       	st	Z+, r24
    23ba:	41 50       	subi	r20, 0x01	; 1
    23bc:	51 09       	sbc	r21, r1
    23be:	14 16       	cp	r1, r20
    23c0:	15 06       	cpc	r1, r21
    23c2:	bc f3       	brlt	.-18     	; 0x23b2 <swapfunc+0x4>
    23c4:	08 95       	ret

000023c6 <med3>:
    23c6:	a0 e0       	ldi	r26, 0x00	; 0
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	e9 ee       	ldi	r30, 0xE9	; 233
    23cc:	f1 e1       	ldi	r31, 0x11	; 17
    23ce:	0c 94 96 11 	jmp	0x232c	; 0x232c <__prologue_saves__+0x14>
    23d2:	7c 01       	movw	r14, r24
    23d4:	6b 01       	movw	r12, r22
    23d6:	d4 2f       	mov	r29, r20
    23d8:	c5 2f       	mov	r28, r21
    23da:	89 01       	movw	r16, r18
    23dc:	f9 01       	movw	r30, r18
    23de:	09 95       	icall
    23e0:	6d 2f       	mov	r22, r29
    23e2:	7c 2f       	mov	r23, r28
    23e4:	97 ff       	sbrs	r25, 7
    23e6:	10 c0       	rjmp	.+32     	; 0x2408 <med3+0x42>
    23e8:	c6 01       	movw	r24, r12
    23ea:	f8 01       	movw	r30, r16
    23ec:	09 95       	icall
    23ee:	97 ff       	sbrs	r25, 7
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <med3+0x30>
    23f2:	c6 01       	movw	r24, r12
    23f4:	18 c0       	rjmp	.+48     	; 0x2426 <med3+0x60>
    23f6:	6d 2f       	mov	r22, r29
    23f8:	7c 2f       	mov	r23, r28
    23fa:	c7 01       	movw	r24, r14
    23fc:	f8 01       	movw	r30, r16
    23fe:	09 95       	icall
    2400:	97 fd       	sbrc	r25, 7
    2402:	0f c0       	rjmp	.+30     	; 0x2422 <med3+0x5c>
    2404:	c7 01       	movw	r24, r14
    2406:	0f c0       	rjmp	.+30     	; 0x2426 <med3+0x60>
    2408:	c6 01       	movw	r24, r12
    240a:	f8 01       	movw	r30, r16
    240c:	09 95       	icall
    240e:	18 16       	cp	r1, r24
    2410:	19 06       	cpc	r1, r25
    2412:	7c f3       	brlt	.-34     	; 0x23f2 <med3+0x2c>
    2414:	6d 2f       	mov	r22, r29
    2416:	7c 2f       	mov	r23, r28
    2418:	c7 01       	movw	r24, r14
    241a:	f8 01       	movw	r30, r16
    241c:	09 95       	icall
    241e:	97 fd       	sbrc	r25, 7
    2420:	f1 cf       	rjmp	.-30     	; 0x2404 <med3+0x3e>
    2422:	8d 2f       	mov	r24, r29
    2424:	9c 2f       	mov	r25, r28
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	e8 e0       	ldi	r30, 0x08	; 8
    242c:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__epilogue_restores__+0x14>

00002430 <qsort>:
    2430:	aa e0       	ldi	r26, 0x0A	; 10
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	ee e1       	ldi	r30, 0x1E	; 30
    2436:	f2 e1       	ldi	r31, 0x12	; 18
    2438:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__prologue_saves__>
    243c:	8c 01       	movw	r16, r24
    243e:	7b 01       	movw	r14, r22
    2440:	5a 87       	std	Y+10, r21	; 0x0a
    2442:	49 87       	std	Y+9, r20	; 0x09
    2444:	69 01       	movw	r12, r18
    2446:	29 85       	ldd	r18, Y+9	; 0x09
    2448:	3a 85       	ldd	r19, Y+10	; 0x0a
    244a:	20 0f       	add	r18, r16
    244c:	31 1f       	adc	r19, r17
    244e:	3a 83       	std	Y+2, r19	; 0x02
    2450:	29 83       	std	Y+1, r18	; 0x01
    2452:	37 e0       	ldi	r19, 0x07	; 7
    2454:	e3 16       	cp	r14, r19
    2456:	f1 04       	cpc	r15, r1
    2458:	70 f5       	brcc	.+92     	; 0x24b6 <qsort+0x86>
    245a:	69 80       	ldd	r6, Y+1	; 0x01
    245c:	7a 80       	ldd	r7, Y+2	; 0x02
    245e:	49 85       	ldd	r20, Y+9	; 0x09
    2460:	5a 85       	ldd	r21, Y+10	; 0x0a
    2462:	e4 9e       	mul	r14, r20
    2464:	50 01       	movw	r10, r0
    2466:	e5 9e       	mul	r14, r21
    2468:	b0 0c       	add	r11, r0
    246a:	f4 9e       	mul	r15, r20
    246c:	b0 0c       	add	r11, r0
    246e:	11 24       	eor	r1, r1
    2470:	a0 0e       	add	r10, r16
    2472:	b1 1e       	adc	r11, r17
    2474:	6a 14       	cp	r6, r10
    2476:	7b 04       	cpc	r7, r11
    2478:	08 f0       	brcs	.+2      	; 0x247c <qsort+0x4c>
    247a:	7a c1       	rjmp	.+756    	; 0x2770 <qsort+0x340>
    247c:	73 01       	movw	r14, r6
    247e:	0e 15       	cp	r16, r14
    2480:	1f 05       	cpc	r17, r15
    2482:	28 f0       	brcs	.+10     	; 0x248e <qsort+0x5e>
    2484:	89 85       	ldd	r24, Y+9	; 0x09
    2486:	9a 85       	ldd	r25, Y+10	; 0x0a
    2488:	68 0e       	add	r6, r24
    248a:	79 1e       	adc	r7, r25
    248c:	f3 cf       	rjmp	.-26     	; 0x2474 <qsort+0x44>
    248e:	47 01       	movw	r8, r14
    2490:	e9 85       	ldd	r30, Y+9	; 0x09
    2492:	fa 85       	ldd	r31, Y+10	; 0x0a
    2494:	8e 1a       	sub	r8, r30
    2496:	9f 0a       	sbc	r9, r31
    2498:	b7 01       	movw	r22, r14
    249a:	c4 01       	movw	r24, r8
    249c:	f6 01       	movw	r30, r12
    249e:	09 95       	icall
    24a0:	18 16       	cp	r1, r24
    24a2:	19 06       	cpc	r1, r25
    24a4:	7c f7       	brge	.-34     	; 0x2484 <qsort+0x54>
    24a6:	49 85       	ldd	r20, Y+9	; 0x09
    24a8:	5a 85       	ldd	r21, Y+10	; 0x0a
    24aa:	b4 01       	movw	r22, r8
    24ac:	c7 01       	movw	r24, r14
    24ae:	0e 94 d7 11 	call	0x23ae	; 0x23ae <swapfunc>
    24b2:	74 01       	movw	r14, r8
    24b4:	e4 cf       	rjmp	.-56     	; 0x247e <qsort+0x4e>
    24b6:	c7 01       	movw	r24, r14
    24b8:	96 95       	lsr	r25
    24ba:	87 95       	ror	r24
    24bc:	29 85       	ldd	r18, Y+9	; 0x09
    24be:	3a 85       	ldd	r19, Y+10	; 0x0a
    24c0:	82 9f       	mul	r24, r18
    24c2:	50 01       	movw	r10, r0
    24c4:	83 9f       	mul	r24, r19
    24c6:	b0 0c       	add	r11, r0
    24c8:	92 9f       	mul	r25, r18
    24ca:	b0 0c       	add	r11, r0
    24cc:	11 24       	eor	r1, r1
    24ce:	a0 0e       	add	r10, r16
    24d0:	b1 1e       	adc	r11, r17
    24d2:	a7 01       	movw	r20, r14
    24d4:	41 50       	subi	r20, 0x01	; 1
    24d6:	51 09       	sbc	r21, r1
    24d8:	5c 83       	std	Y+4, r21	; 0x04
    24da:	4b 83       	std	Y+3, r20	; 0x03
    24dc:	57 e0       	ldi	r21, 0x07	; 7
    24de:	e5 16       	cp	r14, r21
    24e0:	f1 04       	cpc	r15, r1
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <qsort+0xb6>
    24e4:	4c c0       	rjmp	.+152    	; 0x257e <qsort+0x14e>
    24e6:	8b 81       	ldd	r24, Y+3	; 0x03
    24e8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ea:	82 9f       	mul	r24, r18
    24ec:	30 01       	movw	r6, r0
    24ee:	83 9f       	mul	r24, r19
    24f0:	70 0c       	add	r7, r0
    24f2:	92 9f       	mul	r25, r18
    24f4:	70 0c       	add	r7, r0
    24f6:	11 24       	eor	r1, r1
    24f8:	60 0e       	add	r6, r16
    24fa:	71 1e       	adc	r7, r17
    24fc:	99 e2       	ldi	r25, 0x29	; 41
    24fe:	e9 16       	cp	r14, r25
    2500:	f1 04       	cpc	r15, r1
    2502:	a8 f1       	brcs	.+106    	; 0x256e <qsort+0x13e>
    2504:	c7 01       	movw	r24, r14
    2506:	43 e0       	ldi	r20, 0x03	; 3
    2508:	96 95       	lsr	r25
    250a:	87 95       	ror	r24
    250c:	4a 95       	dec	r20
    250e:	e1 f7       	brne	.-8      	; 0x2508 <qsort+0xd8>
    2510:	82 9f       	mul	r24, r18
    2512:	40 01       	movw	r8, r0
    2514:	83 9f       	mul	r24, r19
    2516:	90 0c       	add	r9, r0
    2518:	92 9f       	mul	r25, r18
    251a:	90 0c       	add	r9, r0
    251c:	11 24       	eor	r1, r1
    251e:	14 01       	movw	r2, r8
    2520:	22 0c       	add	r2, r2
    2522:	33 1c       	adc	r3, r3
    2524:	a8 01       	movw	r20, r16
    2526:	42 0d       	add	r20, r2
    2528:	53 1d       	adc	r21, r3
    252a:	b8 01       	movw	r22, r16
    252c:	68 0d       	add	r22, r8
    252e:	79 1d       	adc	r23, r9
    2530:	96 01       	movw	r18, r12
    2532:	c8 01       	movw	r24, r16
    2534:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <med3>
    2538:	2c 01       	movw	r4, r24
    253a:	a5 01       	movw	r20, r10
    253c:	48 0d       	add	r20, r8
    253e:	59 1d       	adc	r21, r9
    2540:	91 94       	neg	r9
    2542:	81 94       	neg	r8
    2544:	91 08       	sbc	r9, r1
    2546:	96 01       	movw	r18, r12
    2548:	b5 01       	movw	r22, r10
    254a:	c5 01       	movw	r24, r10
    254c:	88 0d       	add	r24, r8
    254e:	99 1d       	adc	r25, r9
    2550:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <med3>
    2554:	5c 01       	movw	r10, r24
    2556:	b3 01       	movw	r22, r6
    2558:	68 0d       	add	r22, r8
    255a:	79 1d       	adc	r23, r9
    255c:	96 01       	movw	r18, r12
    255e:	a3 01       	movw	r20, r6
    2560:	c3 01       	movw	r24, r6
    2562:	82 19       	sub	r24, r2
    2564:	93 09       	sbc	r25, r3
    2566:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <med3>
    256a:	3c 01       	movw	r6, r24
    256c:	01 c0       	rjmp	.+2      	; 0x2570 <qsort+0x140>
    256e:	28 01       	movw	r4, r16
    2570:	96 01       	movw	r18, r12
    2572:	a3 01       	movw	r20, r6
    2574:	b5 01       	movw	r22, r10
    2576:	c2 01       	movw	r24, r4
    2578:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <med3>
    257c:	5c 01       	movw	r10, r24
    257e:	49 85       	ldd	r20, Y+9	; 0x09
    2580:	5a 85       	ldd	r21, Y+10	; 0x0a
    2582:	b5 01       	movw	r22, r10
    2584:	c8 01       	movw	r24, r16
    2586:	0e 94 d7 11 	call	0x23ae	; 0x23ae <swapfunc>
    258a:	69 80       	ldd	r6, Y+1	; 0x01
    258c:	7a 80       	ldd	r7, Y+2	; 0x02
    258e:	2b 81       	ldd	r18, Y+3	; 0x03
    2590:	3c 81       	ldd	r19, Y+4	; 0x04
    2592:	49 85       	ldd	r20, Y+9	; 0x09
    2594:	5a 85       	ldd	r21, Y+10	; 0x0a
    2596:	24 9f       	mul	r18, r20
    2598:	f0 01       	movw	r30, r0
    259a:	25 9f       	mul	r18, r21
    259c:	f0 0d       	add	r31, r0
    259e:	34 9f       	mul	r19, r20
    25a0:	f0 0d       	add	r31, r0
    25a2:	11 24       	eor	r1, r1
    25a4:	fe 83       	std	Y+6, r31	; 0x06
    25a6:	ed 83       	std	Y+5, r30	; 0x05
    25a8:	5f 01       	movw	r10, r30
    25aa:	a0 0e       	add	r10, r16
    25ac:	b1 1e       	adc	r11, r17
    25ae:	46 0d       	add	r20, r6
    25b0:	57 1d       	adc	r21, r7
    25b2:	5c 83       	std	Y+4, r21	; 0x04
    25b4:	4b 83       	std	Y+3, r20	; 0x03
    25b6:	25 01       	movw	r4, r10
    25b8:	13 01       	movw	r2, r6
    25ba:	1a 82       	std	Y+2, r1	; 0x02
    25bc:	19 82       	std	Y+1, r1	; 0x01
    25be:	8b 80       	ldd	r8, Y+3	; 0x03
    25c0:	9c 80       	ldd	r9, Y+4	; 0x04
    25c2:	89 85       	ldd	r24, Y+9	; 0x09
    25c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c6:	88 1a       	sub	r8, r24
    25c8:	99 0a       	sbc	r9, r25
    25ca:	a8 14       	cp	r10, r8
    25cc:	b9 04       	cpc	r11, r9
    25ce:	08 f4       	brcc	.+2      	; 0x25d2 <qsort+0x1a2>
    25d0:	50 c0       	rjmp	.+160    	; 0x2672 <qsort+0x242>
    25d2:	b8 01       	movw	r22, r16
    25d4:	c4 01       	movw	r24, r8
    25d6:	f6 01       	movw	r30, r12
    25d8:	09 95       	icall
    25da:	18 16       	cp	r1, r24
    25dc:	19 06       	cpc	r1, r25
    25de:	c4 f1       	brlt	.+112    	; 0x2650 <qsort+0x220>
    25e0:	89 2b       	or	r24, r25
    25e2:	71 f4       	brne	.+28     	; 0x2600 <qsort+0x1d0>
    25e4:	49 85       	ldd	r20, Y+9	; 0x09
    25e6:	5a 85       	ldd	r21, Y+10	; 0x0a
    25e8:	b4 01       	movw	r22, r8
    25ea:	c1 01       	movw	r24, r2
    25ec:	0e 94 d7 11 	call	0x23ae	; 0x23ae <swapfunc>
    25f0:	89 85       	ldd	r24, Y+9	; 0x09
    25f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f4:	28 0e       	add	r2, r24
    25f6:	39 1e       	adc	r3, r25
    25f8:	e1 e0       	ldi	r30, 0x01	; 1
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	fa 83       	std	Y+2, r31	; 0x02
    25fe:	e9 83       	std	Y+1, r30	; 0x01
    2600:	2b 81       	ldd	r18, Y+3	; 0x03
    2602:	3c 81       	ldd	r19, Y+4	; 0x04
    2604:	49 85       	ldd	r20, Y+9	; 0x09
    2606:	5a 85       	ldd	r21, Y+10	; 0x0a
    2608:	24 0f       	add	r18, r20
    260a:	35 1f       	adc	r19, r21
    260c:	3c 83       	std	Y+4, r19	; 0x04
    260e:	2b 83       	std	Y+3, r18	; 0x03
    2610:	d6 cf       	rjmp	.-84     	; 0x25be <qsort+0x18e>
    2612:	b8 01       	movw	r22, r16
    2614:	c5 01       	movw	r24, r10
    2616:	f6 01       	movw	r30, r12
    2618:	09 95       	icall
    261a:	95 01       	movw	r18, r10
    261c:	49 85       	ldd	r20, Y+9	; 0x09
    261e:	5a 85       	ldd	r21, Y+10	; 0x0a
    2620:	24 1b       	sub	r18, r20
    2622:	35 0b       	sbc	r19, r21
    2624:	38 87       	std	Y+8, r19	; 0x08
    2626:	2f 83       	std	Y+7, r18	; 0x07
    2628:	97 fd       	sbrc	r25, 7
    262a:	16 c0       	rjmp	.+44     	; 0x2658 <qsort+0x228>
    262c:	89 2b       	or	r24, r25
    262e:	71 f4       	brne	.+28     	; 0x264c <qsort+0x21c>
    2630:	49 85       	ldd	r20, Y+9	; 0x09
    2632:	5a 85       	ldd	r21, Y+10	; 0x0a
    2634:	b2 01       	movw	r22, r4
    2636:	c5 01       	movw	r24, r10
    2638:	0e 94 d7 11 	call	0x23ae	; 0x23ae <swapfunc>
    263c:	29 85       	ldd	r18, Y+9	; 0x09
    263e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2640:	42 1a       	sub	r4, r18
    2642:	53 0a       	sbc	r5, r19
    2644:	41 e0       	ldi	r20, 0x01	; 1
    2646:	50 e0       	ldi	r21, 0x00	; 0
    2648:	5a 83       	std	Y+2, r21	; 0x02
    264a:	49 83       	std	Y+1, r20	; 0x01
    264c:	af 80       	ldd	r10, Y+7	; 0x07
    264e:	b8 84       	ldd	r11, Y+8	; 0x08
    2650:	a8 14       	cp	r10, r8
    2652:	b9 04       	cpc	r11, r9
    2654:	f0 f6       	brcc	.-68     	; 0x2612 <qsort+0x1e2>
    2656:	0d c0       	rjmp	.+26     	; 0x2672 <qsort+0x242>
    2658:	49 85       	ldd	r20, Y+9	; 0x09
    265a:	5a 85       	ldd	r21, Y+10	; 0x0a
    265c:	b5 01       	movw	r22, r10
    265e:	c4 01       	movw	r24, r8
    2660:	0e 94 d7 11 	call	0x23ae	; 0x23ae <swapfunc>
    2664:	af 80       	ldd	r10, Y+7	; 0x07
    2666:	b8 84       	ldd	r11, Y+8	; 0x08
    2668:	41 e0       	ldi	r20, 0x01	; 1
    266a:	50 e0       	ldi	r21, 0x00	; 0
    266c:	5a 83       	std	Y+2, r21	; 0x02
    266e:	49 83       	std	Y+1, r20	; 0x01
    2670:	c7 cf       	rjmp	.-114    	; 0x2600 <qsort+0x1d0>
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	9a 81       	ldd	r25, Y+2	; 0x02
    2676:	89 2b       	or	r24, r25
    2678:	09 f4       	brne	.+2      	; 0x267c <qsort+0x24c>
    267a:	4f c0       	rjmp	.+158    	; 0x271a <qsort+0x2ea>
    267c:	6d 80       	ldd	r6, Y+5	; 0x05
    267e:	7e 80       	ldd	r7, Y+6	; 0x06
    2680:	29 85       	ldd	r18, Y+9	; 0x09
    2682:	3a 85       	ldd	r19, Y+10	; 0x0a
    2684:	62 0e       	add	r6, r18
    2686:	73 1e       	adc	r7, r19
    2688:	60 0e       	add	r6, r16
    268a:	71 1e       	adc	r7, r17
    268c:	74 01       	movw	r14, r8
    268e:	e2 18       	sub	r14, r2
    2690:	f3 08       	sbc	r15, r3
    2692:	a1 01       	movw	r20, r2
    2694:	40 1b       	sub	r20, r16
    2696:	51 0b       	sbc	r21, r17
    2698:	e4 16       	cp	r14, r20
    269a:	f5 06       	cpc	r15, r21
    269c:	0c f4       	brge	.+2      	; 0x26a0 <qsort+0x270>
    269e:	a7 01       	movw	r20, r14
    26a0:	14 16       	cp	r1, r20
    26a2:	15 06       	cpc	r1, r21
    26a4:	34 f4       	brge	.+12     	; 0x26b2 <qsort+0x282>
    26a6:	b4 01       	movw	r22, r8
    26a8:	64 1b       	sub	r22, r20
    26aa:	75 0b       	sbc	r23, r21
    26ac:	c8 01       	movw	r24, r16
    26ae:	0e 94 d7 11 	call	0x23ae	; 0x23ae <swapfunc>
    26b2:	a2 01       	movw	r20, r4
    26b4:	4a 19       	sub	r20, r10
    26b6:	5b 09       	sbc	r21, r11
    26b8:	5a 01       	movw	r10, r20
    26ba:	a3 01       	movw	r20, r6
    26bc:	44 19       	sub	r20, r4
    26be:	55 09       	sbc	r21, r5
    26c0:	89 85       	ldd	r24, Y+9	; 0x09
    26c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c4:	48 1b       	sub	r20, r24
    26c6:	59 0b       	sbc	r21, r25
    26c8:	a4 16       	cp	r10, r20
    26ca:	b5 06       	cpc	r11, r21
    26cc:	08 f4       	brcc	.+2      	; 0x26d0 <qsort+0x2a0>
    26ce:	a5 01       	movw	r20, r10
    26d0:	14 16       	cp	r1, r20
    26d2:	15 06       	cpc	r1, r21
    26d4:	34 f4       	brge	.+12     	; 0x26e2 <qsort+0x2b2>
    26d6:	b3 01       	movw	r22, r6
    26d8:	64 1b       	sub	r22, r20
    26da:	75 0b       	sbc	r23, r21
    26dc:	c4 01       	movw	r24, r8
    26de:	0e 94 d7 11 	call	0x23ae	; 0x23ae <swapfunc>
    26e2:	e9 85       	ldd	r30, Y+9	; 0x09
    26e4:	fa 85       	ldd	r31, Y+10	; 0x0a
    26e6:	ee 15       	cp	r30, r14
    26e8:	ff 05       	cpc	r31, r15
    26ea:	48 f4       	brcc	.+18     	; 0x26fe <qsort+0x2ce>
    26ec:	c7 01       	movw	r24, r14
    26ee:	bf 01       	movw	r22, r30
    26f0:	0e 94 c3 11 	call	0x2386	; 0x2386 <__udivmodhi4>
    26f4:	96 01       	movw	r18, r12
    26f6:	af 01       	movw	r20, r30
    26f8:	c8 01       	movw	r24, r16
    26fa:	0e 94 18 12 	call	0x2430	; 0x2430 <qsort>
    26fe:	29 85       	ldd	r18, Y+9	; 0x09
    2700:	3a 85       	ldd	r19, Y+10	; 0x0a
    2702:	2a 15       	cp	r18, r10
    2704:	3b 05       	cpc	r19, r11
    2706:	a0 f5       	brcc	.+104    	; 0x2770 <qsort+0x340>
    2708:	83 01       	movw	r16, r6
    270a:	0a 19       	sub	r16, r10
    270c:	1b 09       	sbc	r17, r11
    270e:	c5 01       	movw	r24, r10
    2710:	b9 01       	movw	r22, r18
    2712:	0e 94 c3 11 	call	0x2386	; 0x2386 <__udivmodhi4>
    2716:	7b 01       	movw	r14, r22
    2718:	96 ce       	rjmp	.-724    	; 0x2446 <qsort+0x16>
    271a:	e9 85       	ldd	r30, Y+9	; 0x09
    271c:	fa 85       	ldd	r31, Y+10	; 0x0a
    271e:	ee 9e       	mul	r14, r30
    2720:	50 01       	movw	r10, r0
    2722:	ef 9e       	mul	r14, r31
    2724:	b0 0c       	add	r11, r0
    2726:	fe 9e       	mul	r15, r30
    2728:	b0 0c       	add	r11, r0
    272a:	11 24       	eor	r1, r1
    272c:	a0 0e       	add	r10, r16
    272e:	b1 1e       	adc	r11, r17
    2730:	6a 14       	cp	r6, r10
    2732:	7b 04       	cpc	r7, r11
    2734:	e8 f4       	brcc	.+58     	; 0x2770 <qsort+0x340>
    2736:	73 01       	movw	r14, r6
    2738:	0e 15       	cp	r16, r14
    273a:	1f 05       	cpc	r17, r15
    273c:	28 f0       	brcs	.+10     	; 0x2748 <qsort+0x318>
    273e:	89 85       	ldd	r24, Y+9	; 0x09
    2740:	9a 85       	ldd	r25, Y+10	; 0x0a
    2742:	68 0e       	add	r6, r24
    2744:	79 1e       	adc	r7, r25
    2746:	f4 cf       	rjmp	.-24     	; 0x2730 <qsort+0x300>
    2748:	47 01       	movw	r8, r14
    274a:	e9 85       	ldd	r30, Y+9	; 0x09
    274c:	fa 85       	ldd	r31, Y+10	; 0x0a
    274e:	8e 1a       	sub	r8, r30
    2750:	9f 0a       	sbc	r9, r31
    2752:	b7 01       	movw	r22, r14
    2754:	c4 01       	movw	r24, r8
    2756:	f6 01       	movw	r30, r12
    2758:	09 95       	icall
    275a:	18 16       	cp	r1, r24
    275c:	19 06       	cpc	r1, r25
    275e:	7c f7       	brge	.-34     	; 0x273e <qsort+0x30e>
    2760:	49 85       	ldd	r20, Y+9	; 0x09
    2762:	5a 85       	ldd	r21, Y+10	; 0x0a
    2764:	b4 01       	movw	r22, r8
    2766:	c7 01       	movw	r24, r14
    2768:	0e 94 d7 11 	call	0x23ae	; 0x23ae <swapfunc>
    276c:	74 01       	movw	r14, r8
    276e:	e4 cf       	rjmp	.-56     	; 0x2738 <qsort+0x308>
    2770:	2a 96       	adiw	r28, 0x0a	; 10
    2772:	e2 e1       	ldi	r30, 0x12	; 18
    2774:	0c 94 a8 11 	jmp	0x2350	; 0x2350 <__epilogue_restores__>

00002778 <do_rand>:
    2778:	8f 92       	push	r8
    277a:	9f 92       	push	r9
    277c:	af 92       	push	r10
    277e:	bf 92       	push	r11
    2780:	cf 92       	push	r12
    2782:	df 92       	push	r13
    2784:	ef 92       	push	r14
    2786:	ff 92       	push	r15
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	ec 01       	movw	r28, r24
    278e:	68 81       	ld	r22, Y
    2790:	79 81       	ldd	r23, Y+1	; 0x01
    2792:	8a 81       	ldd	r24, Y+2	; 0x02
    2794:	9b 81       	ldd	r25, Y+3	; 0x03
    2796:	61 15       	cp	r22, r1
    2798:	71 05       	cpc	r23, r1
    279a:	81 05       	cpc	r24, r1
    279c:	91 05       	cpc	r25, r1
    279e:	21 f4       	brne	.+8      	; 0x27a8 <do_rand+0x30>
    27a0:	64 e2       	ldi	r22, 0x24	; 36
    27a2:	79 ed       	ldi	r23, 0xD9	; 217
    27a4:	8b e5       	ldi	r24, 0x5B	; 91
    27a6:	97 e0       	ldi	r25, 0x07	; 7
    27a8:	2d e1       	ldi	r18, 0x1D	; 29
    27aa:	33 ef       	ldi	r19, 0xF3	; 243
    27ac:	41 e0       	ldi	r20, 0x01	; 1
    27ae:	50 e0       	ldi	r21, 0x00	; 0
    27b0:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__divmodsi4>
    27b4:	49 01       	movw	r8, r18
    27b6:	5a 01       	movw	r10, r20
    27b8:	9b 01       	movw	r18, r22
    27ba:	ac 01       	movw	r20, r24
    27bc:	a7 ea       	ldi	r26, 0xA7	; 167
    27be:	b1 e4       	ldi	r27, 0x41	; 65
    27c0:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__muluhisi3>
    27c4:	6b 01       	movw	r12, r22
    27c6:	7c 01       	movw	r14, r24
    27c8:	ac ee       	ldi	r26, 0xEC	; 236
    27ca:	b4 ef       	ldi	r27, 0xF4	; 244
    27cc:	a5 01       	movw	r20, r10
    27ce:	94 01       	movw	r18, r8
    27d0:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <__mulohisi3>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	8c 0d       	add	r24, r12
    27da:	9d 1d       	adc	r25, r13
    27dc:	ae 1d       	adc	r26, r14
    27de:	bf 1d       	adc	r27, r15
    27e0:	b7 ff       	sbrs	r27, 7
    27e2:	03 c0       	rjmp	.+6      	; 0x27ea <do_rand+0x72>
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	a1 09       	sbc	r26, r1
    27e8:	b0 48       	sbci	r27, 0x80	; 128
    27ea:	88 83       	st	Y, r24
    27ec:	99 83       	std	Y+1, r25	; 0x01
    27ee:	aa 83       	std	Y+2, r26	; 0x02
    27f0:	bb 83       	std	Y+3, r27	; 0x03
    27f2:	9f 77       	andi	r25, 0x7F	; 127
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	ff 90       	pop	r15
    27fa:	ef 90       	pop	r14
    27fc:	df 90       	pop	r13
    27fe:	cf 90       	pop	r12
    2800:	bf 90       	pop	r11
    2802:	af 90       	pop	r10
    2804:	9f 90       	pop	r9
    2806:	8f 90       	pop	r8
    2808:	08 95       	ret

0000280a <rand_r>:
    280a:	0e 94 bc 13 	call	0x2778	; 0x2778 <do_rand>
    280e:	08 95       	ret

00002810 <rand>:
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	91 e0       	ldi	r25, 0x01	; 1
    2814:	0e 94 bc 13 	call	0x2778	; 0x2778 <do_rand>
    2818:	08 95       	ret

0000281a <srand>:
    281a:	a0 e0       	ldi	r26, 0x00	; 0
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2822:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2826:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    282a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    282e:	08 95       	ret

00002830 <__ftoa_engine>:
    2830:	28 30       	cpi	r18, 0x08	; 8
    2832:	08 f0       	brcs	.+2      	; 0x2836 <__ftoa_engine+0x6>
    2834:	27 e0       	ldi	r18, 0x07	; 7
    2836:	33 27       	eor	r19, r19
    2838:	da 01       	movw	r26, r20
    283a:	99 0f       	add	r25, r25
    283c:	31 1d       	adc	r19, r1
    283e:	87 fd       	sbrc	r24, 7
    2840:	91 60       	ori	r25, 0x01	; 1
    2842:	00 96       	adiw	r24, 0x00	; 0
    2844:	61 05       	cpc	r22, r1
    2846:	71 05       	cpc	r23, r1
    2848:	39 f4       	brne	.+14     	; 0x2858 <__ftoa_engine+0x28>
    284a:	32 60       	ori	r19, 0x02	; 2
    284c:	2e 5f       	subi	r18, 0xFE	; 254
    284e:	3d 93       	st	X+, r19
    2850:	30 e3       	ldi	r19, 0x30	; 48
    2852:	2a 95       	dec	r18
    2854:	e1 f7       	brne	.-8      	; 0x284e <__ftoa_engine+0x1e>
    2856:	08 95       	ret
    2858:	9f 3f       	cpi	r25, 0xFF	; 255
    285a:	30 f0       	brcs	.+12     	; 0x2868 <__ftoa_engine+0x38>
    285c:	80 38       	cpi	r24, 0x80	; 128
    285e:	71 05       	cpc	r23, r1
    2860:	61 05       	cpc	r22, r1
    2862:	09 f0       	breq	.+2      	; 0x2866 <__ftoa_engine+0x36>
    2864:	3c 5f       	subi	r19, 0xFC	; 252
    2866:	3c 5f       	subi	r19, 0xFC	; 252
    2868:	3d 93       	st	X+, r19
    286a:	91 30       	cpi	r25, 0x01	; 1
    286c:	08 f0       	brcs	.+2      	; 0x2870 <__ftoa_engine+0x40>
    286e:	80 68       	ori	r24, 0x80	; 128
    2870:	91 1d       	adc	r25, r1
    2872:	df 93       	push	r29
    2874:	cf 93       	push	r28
    2876:	1f 93       	push	r17
    2878:	0f 93       	push	r16
    287a:	ff 92       	push	r15
    287c:	ef 92       	push	r14
    287e:	19 2f       	mov	r17, r25
    2880:	98 7f       	andi	r25, 0xF8	; 248
    2882:	96 95       	lsr	r25
    2884:	e9 2f       	mov	r30, r25
    2886:	96 95       	lsr	r25
    2888:	96 95       	lsr	r25
    288a:	e9 0f       	add	r30, r25
    288c:	ff 27       	eor	r31, r31
    288e:	e6 53       	subi	r30, 0x36	; 54
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	99 27       	eor	r25, r25
    2894:	33 27       	eor	r19, r19
    2896:	ee 24       	eor	r14, r14
    2898:	ff 24       	eor	r15, r15
    289a:	a7 01       	movw	r20, r14
    289c:	e7 01       	movw	r28, r14
    289e:	05 90       	lpm	r0, Z+
    28a0:	08 94       	sec
    28a2:	07 94       	ror	r0
    28a4:	28 f4       	brcc	.+10     	; 0x28b0 <__ftoa_engine+0x80>
    28a6:	36 0f       	add	r19, r22
    28a8:	e7 1e       	adc	r14, r23
    28aa:	f8 1e       	adc	r15, r24
    28ac:	49 1f       	adc	r20, r25
    28ae:	51 1d       	adc	r21, r1
    28b0:	66 0f       	add	r22, r22
    28b2:	77 1f       	adc	r23, r23
    28b4:	88 1f       	adc	r24, r24
    28b6:	99 1f       	adc	r25, r25
    28b8:	06 94       	lsr	r0
    28ba:	a1 f7       	brne	.-24     	; 0x28a4 <__ftoa_engine+0x74>
    28bc:	05 90       	lpm	r0, Z+
    28be:	07 94       	ror	r0
    28c0:	28 f4       	brcc	.+10     	; 0x28cc <__ftoa_engine+0x9c>
    28c2:	e7 0e       	add	r14, r23
    28c4:	f8 1e       	adc	r15, r24
    28c6:	49 1f       	adc	r20, r25
    28c8:	56 1f       	adc	r21, r22
    28ca:	c1 1d       	adc	r28, r1
    28cc:	77 0f       	add	r23, r23
    28ce:	88 1f       	adc	r24, r24
    28d0:	99 1f       	adc	r25, r25
    28d2:	66 1f       	adc	r22, r22
    28d4:	06 94       	lsr	r0
    28d6:	a1 f7       	brne	.-24     	; 0x28c0 <__ftoa_engine+0x90>
    28d8:	05 90       	lpm	r0, Z+
    28da:	07 94       	ror	r0
    28dc:	28 f4       	brcc	.+10     	; 0x28e8 <__ftoa_engine+0xb8>
    28de:	f8 0e       	add	r15, r24
    28e0:	49 1f       	adc	r20, r25
    28e2:	56 1f       	adc	r21, r22
    28e4:	c7 1f       	adc	r28, r23
    28e6:	d1 1d       	adc	r29, r1
    28e8:	88 0f       	add	r24, r24
    28ea:	99 1f       	adc	r25, r25
    28ec:	66 1f       	adc	r22, r22
    28ee:	77 1f       	adc	r23, r23
    28f0:	06 94       	lsr	r0
    28f2:	a1 f7       	brne	.-24     	; 0x28dc <__ftoa_engine+0xac>
    28f4:	05 90       	lpm	r0, Z+
    28f6:	07 94       	ror	r0
    28f8:	20 f4       	brcc	.+8      	; 0x2902 <__ftoa_engine+0xd2>
    28fa:	49 0f       	add	r20, r25
    28fc:	56 1f       	adc	r21, r22
    28fe:	c7 1f       	adc	r28, r23
    2900:	d8 1f       	adc	r29, r24
    2902:	99 0f       	add	r25, r25
    2904:	66 1f       	adc	r22, r22
    2906:	77 1f       	adc	r23, r23
    2908:	88 1f       	adc	r24, r24
    290a:	06 94       	lsr	r0
    290c:	a9 f7       	brne	.-22     	; 0x28f8 <__ftoa_engine+0xc8>
    290e:	84 91       	lpm	r24, Z
    2910:	10 95       	com	r17
    2912:	17 70       	andi	r17, 0x07	; 7
    2914:	41 f0       	breq	.+16     	; 0x2926 <__ftoa_engine+0xf6>
    2916:	d6 95       	lsr	r29
    2918:	c7 95       	ror	r28
    291a:	57 95       	ror	r21
    291c:	47 95       	ror	r20
    291e:	f7 94       	ror	r15
    2920:	e7 94       	ror	r14
    2922:	1a 95       	dec	r17
    2924:	c1 f7       	brne	.-16     	; 0x2916 <__ftoa_engine+0xe6>
    2926:	e0 e7       	ldi	r30, 0x70	; 112
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	68 94       	set
    292c:	15 90       	lpm	r1, Z+
    292e:	15 91       	lpm	r17, Z+
    2930:	35 91       	lpm	r19, Z+
    2932:	65 91       	lpm	r22, Z+
    2934:	95 91       	lpm	r25, Z+
    2936:	05 90       	lpm	r0, Z+
    2938:	7f e2       	ldi	r23, 0x2F	; 47
    293a:	73 95       	inc	r23
    293c:	e1 18       	sub	r14, r1
    293e:	f1 0a       	sbc	r15, r17
    2940:	43 0b       	sbc	r20, r19
    2942:	56 0b       	sbc	r21, r22
    2944:	c9 0b       	sbc	r28, r25
    2946:	d0 09       	sbc	r29, r0
    2948:	c0 f7       	brcc	.-16     	; 0x293a <__ftoa_engine+0x10a>
    294a:	e1 0c       	add	r14, r1
    294c:	f1 1e       	adc	r15, r17
    294e:	43 1f       	adc	r20, r19
    2950:	56 1f       	adc	r21, r22
    2952:	c9 1f       	adc	r28, r25
    2954:	d0 1d       	adc	r29, r0
    2956:	7e f4       	brtc	.+30     	; 0x2976 <__ftoa_engine+0x146>
    2958:	70 33       	cpi	r23, 0x30	; 48
    295a:	11 f4       	brne	.+4      	; 0x2960 <__ftoa_engine+0x130>
    295c:	8a 95       	dec	r24
    295e:	e6 cf       	rjmp	.-52     	; 0x292c <__ftoa_engine+0xfc>
    2960:	e8 94       	clt
    2962:	01 50       	subi	r16, 0x01	; 1
    2964:	30 f0       	brcs	.+12     	; 0x2972 <__ftoa_engine+0x142>
    2966:	08 0f       	add	r16, r24
    2968:	0a f4       	brpl	.+2      	; 0x296c <__ftoa_engine+0x13c>
    296a:	00 27       	eor	r16, r16
    296c:	02 17       	cp	r16, r18
    296e:	08 f4       	brcc	.+2      	; 0x2972 <__ftoa_engine+0x142>
    2970:	20 2f       	mov	r18, r16
    2972:	23 95       	inc	r18
    2974:	02 2f       	mov	r16, r18
    2976:	7a 33       	cpi	r23, 0x3A	; 58
    2978:	28 f0       	brcs	.+10     	; 0x2984 <__ftoa_engine+0x154>
    297a:	79 e3       	ldi	r23, 0x39	; 57
    297c:	7d 93       	st	X+, r23
    297e:	2a 95       	dec	r18
    2980:	e9 f7       	brne	.-6      	; 0x297c <__ftoa_engine+0x14c>
    2982:	10 c0       	rjmp	.+32     	; 0x29a4 <__ftoa_engine+0x174>
    2984:	7d 93       	st	X+, r23
    2986:	2a 95       	dec	r18
    2988:	89 f6       	brne	.-94     	; 0x292c <__ftoa_engine+0xfc>
    298a:	06 94       	lsr	r0
    298c:	97 95       	ror	r25
    298e:	67 95       	ror	r22
    2990:	37 95       	ror	r19
    2992:	17 95       	ror	r17
    2994:	17 94       	ror	r1
    2996:	e1 18       	sub	r14, r1
    2998:	f1 0a       	sbc	r15, r17
    299a:	43 0b       	sbc	r20, r19
    299c:	56 0b       	sbc	r21, r22
    299e:	c9 0b       	sbc	r28, r25
    29a0:	d0 09       	sbc	r29, r0
    29a2:	98 f0       	brcs	.+38     	; 0x29ca <__ftoa_engine+0x19a>
    29a4:	23 95       	inc	r18
    29a6:	7e 91       	ld	r23, -X
    29a8:	73 95       	inc	r23
    29aa:	7a 33       	cpi	r23, 0x3A	; 58
    29ac:	08 f0       	brcs	.+2      	; 0x29b0 <__ftoa_engine+0x180>
    29ae:	70 e3       	ldi	r23, 0x30	; 48
    29b0:	7c 93       	st	X, r23
    29b2:	20 13       	cpse	r18, r16
    29b4:	b8 f7       	brcc	.-18     	; 0x29a4 <__ftoa_engine+0x174>
    29b6:	7e 91       	ld	r23, -X
    29b8:	70 61       	ori	r23, 0x10	; 16
    29ba:	7d 93       	st	X+, r23
    29bc:	30 f0       	brcs	.+12     	; 0x29ca <__ftoa_engine+0x19a>
    29be:	83 95       	inc	r24
    29c0:	71 e3       	ldi	r23, 0x31	; 49
    29c2:	7d 93       	st	X+, r23
    29c4:	70 e3       	ldi	r23, 0x30	; 48
    29c6:	2a 95       	dec	r18
    29c8:	e1 f7       	brne	.-8      	; 0x29c2 <__ftoa_engine+0x192>
    29ca:	11 24       	eor	r1, r1
    29cc:	ef 90       	pop	r14
    29ce:	ff 90       	pop	r15
    29d0:	0f 91       	pop	r16
    29d2:	1f 91       	pop	r17
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	99 27       	eor	r25, r25
    29da:	87 fd       	sbrc	r24, 7
    29dc:	90 95       	com	r25
    29de:	08 95       	ret

000029e0 <strnlen_P>:
    29e0:	fc 01       	movw	r30, r24
    29e2:	05 90       	lpm	r0, Z+
    29e4:	61 50       	subi	r22, 0x01	; 1
    29e6:	70 40       	sbci	r23, 0x00	; 0
    29e8:	01 10       	cpse	r0, r1
    29ea:	d8 f7       	brcc	.-10     	; 0x29e2 <strnlen_P+0x2>
    29ec:	80 95       	com	r24
    29ee:	90 95       	com	r25
    29f0:	8e 0f       	add	r24, r30
    29f2:	9f 1f       	adc	r25, r31
    29f4:	08 95       	ret

000029f6 <strnlen>:
    29f6:	fc 01       	movw	r30, r24
    29f8:	61 50       	subi	r22, 0x01	; 1
    29fa:	70 40       	sbci	r23, 0x00	; 0
    29fc:	01 90       	ld	r0, Z+
    29fe:	01 10       	cpse	r0, r1
    2a00:	d8 f7       	brcc	.-10     	; 0x29f8 <strnlen+0x2>
    2a02:	80 95       	com	r24
    2a04:	90 95       	com	r25
    2a06:	8e 0f       	add	r24, r30
    2a08:	9f 1f       	adc	r25, r31
    2a0a:	08 95       	ret

00002a0c <fputc>:
    2a0c:	0f 93       	push	r16
    2a0e:	1f 93       	push	r17
    2a10:	cf 93       	push	r28
    2a12:	df 93       	push	r29
    2a14:	fb 01       	movw	r30, r22
    2a16:	23 81       	ldd	r18, Z+3	; 0x03
    2a18:	21 fd       	sbrc	r18, 1
    2a1a:	03 c0       	rjmp	.+6      	; 0x2a22 <fputc+0x16>
    2a1c:	8f ef       	ldi	r24, 0xFF	; 255
    2a1e:	9f ef       	ldi	r25, 0xFF	; 255
    2a20:	2c c0       	rjmp	.+88     	; 0x2a7a <fputc+0x6e>
    2a22:	22 ff       	sbrs	r18, 2
    2a24:	16 c0       	rjmp	.+44     	; 0x2a52 <fputc+0x46>
    2a26:	46 81       	ldd	r20, Z+6	; 0x06
    2a28:	57 81       	ldd	r21, Z+7	; 0x07
    2a2a:	24 81       	ldd	r18, Z+4	; 0x04
    2a2c:	35 81       	ldd	r19, Z+5	; 0x05
    2a2e:	42 17       	cp	r20, r18
    2a30:	53 07       	cpc	r21, r19
    2a32:	44 f4       	brge	.+16     	; 0x2a44 <fputc+0x38>
    2a34:	a0 81       	ld	r26, Z
    2a36:	b1 81       	ldd	r27, Z+1	; 0x01
    2a38:	9d 01       	movw	r18, r26
    2a3a:	2f 5f       	subi	r18, 0xFF	; 255
    2a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3e:	31 83       	std	Z+1, r19	; 0x01
    2a40:	20 83       	st	Z, r18
    2a42:	8c 93       	st	X, r24
    2a44:	26 81       	ldd	r18, Z+6	; 0x06
    2a46:	37 81       	ldd	r19, Z+7	; 0x07
    2a48:	2f 5f       	subi	r18, 0xFF	; 255
    2a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a4c:	37 83       	std	Z+7, r19	; 0x07
    2a4e:	26 83       	std	Z+6, r18	; 0x06
    2a50:	14 c0       	rjmp	.+40     	; 0x2a7a <fputc+0x6e>
    2a52:	8b 01       	movw	r16, r22
    2a54:	ec 01       	movw	r28, r24
    2a56:	fb 01       	movw	r30, r22
    2a58:	00 84       	ldd	r0, Z+8	; 0x08
    2a5a:	f1 85       	ldd	r31, Z+9	; 0x09
    2a5c:	e0 2d       	mov	r30, r0
    2a5e:	09 95       	icall
    2a60:	89 2b       	or	r24, r25
    2a62:	e1 f6       	brne	.-72     	; 0x2a1c <fputc+0x10>
    2a64:	d8 01       	movw	r26, r16
    2a66:	16 96       	adiw	r26, 0x06	; 6
    2a68:	8d 91       	ld	r24, X+
    2a6a:	9c 91       	ld	r25, X
    2a6c:	17 97       	sbiw	r26, 0x07	; 7
    2a6e:	01 96       	adiw	r24, 0x01	; 1
    2a70:	17 96       	adiw	r26, 0x07	; 7
    2a72:	9c 93       	st	X, r25
    2a74:	8e 93       	st	-X, r24
    2a76:	16 97       	sbiw	r26, 0x06	; 6
    2a78:	ce 01       	movw	r24, r28
    2a7a:	df 91       	pop	r29
    2a7c:	cf 91       	pop	r28
    2a7e:	1f 91       	pop	r17
    2a80:	0f 91       	pop	r16
    2a82:	08 95       	ret

00002a84 <printf>:
    2a84:	a0 e0       	ldi	r26, 0x00	; 0
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	e8 e4       	ldi	r30, 0x48	; 72
    2a8a:	f5 e1       	ldi	r31, 0x15	; 21
    2a8c:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__prologue_saves__+0x20>
    2a90:	ae 01       	movw	r20, r28
    2a92:	4b 5f       	subi	r20, 0xFB	; 251
    2a94:	5f 4f       	sbci	r21, 0xFF	; 255
    2a96:	fa 01       	movw	r30, r20
    2a98:	61 91       	ld	r22, Z+
    2a9a:	71 91       	ld	r23, Z+
    2a9c:	af 01       	movw	r20, r30
    2a9e:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <__iob+0x2>
    2aa2:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <__iob+0x3>
    2aa6:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <vfprintf>
    2aaa:	e2 e0       	ldi	r30, 0x02	; 2
    2aac:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__epilogue_restores__+0x20>

00002ab0 <__ultoa_invert>:
    2ab0:	fa 01       	movw	r30, r20
    2ab2:	aa 27       	eor	r26, r26
    2ab4:	28 30       	cpi	r18, 0x08	; 8
    2ab6:	51 f1       	breq	.+84     	; 0x2b0c <__ultoa_invert+0x5c>
    2ab8:	20 31       	cpi	r18, 0x10	; 16
    2aba:	81 f1       	breq	.+96     	; 0x2b1c <__ultoa_invert+0x6c>
    2abc:	e8 94       	clt
    2abe:	6f 93       	push	r22
    2ac0:	6e 7f       	andi	r22, 0xFE	; 254
    2ac2:	6e 5f       	subi	r22, 0xFE	; 254
    2ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aca:	af 4f       	sbci	r26, 0xFF	; 255
    2acc:	b1 e0       	ldi	r27, 0x01	; 1
    2ace:	3e d0       	rcall	.+124    	; 0x2b4c <__ultoa_invert+0x9c>
    2ad0:	b4 e0       	ldi	r27, 0x04	; 4
    2ad2:	3c d0       	rcall	.+120    	; 0x2b4c <__ultoa_invert+0x9c>
    2ad4:	67 0f       	add	r22, r23
    2ad6:	78 1f       	adc	r23, r24
    2ad8:	89 1f       	adc	r24, r25
    2ada:	9a 1f       	adc	r25, r26
    2adc:	a1 1d       	adc	r26, r1
    2ade:	68 0f       	add	r22, r24
    2ae0:	79 1f       	adc	r23, r25
    2ae2:	8a 1f       	adc	r24, r26
    2ae4:	91 1d       	adc	r25, r1
    2ae6:	a1 1d       	adc	r26, r1
    2ae8:	6a 0f       	add	r22, r26
    2aea:	71 1d       	adc	r23, r1
    2aec:	81 1d       	adc	r24, r1
    2aee:	91 1d       	adc	r25, r1
    2af0:	a1 1d       	adc	r26, r1
    2af2:	20 d0       	rcall	.+64     	; 0x2b34 <__ultoa_invert+0x84>
    2af4:	09 f4       	brne	.+2      	; 0x2af8 <__ultoa_invert+0x48>
    2af6:	68 94       	set
    2af8:	3f 91       	pop	r19
    2afa:	2a e0       	ldi	r18, 0x0A	; 10
    2afc:	26 9f       	mul	r18, r22
    2afe:	11 24       	eor	r1, r1
    2b00:	30 19       	sub	r19, r0
    2b02:	30 5d       	subi	r19, 0xD0	; 208
    2b04:	31 93       	st	Z+, r19
    2b06:	de f6       	brtc	.-74     	; 0x2abe <__ultoa_invert+0xe>
    2b08:	cf 01       	movw	r24, r30
    2b0a:	08 95       	ret
    2b0c:	46 2f       	mov	r20, r22
    2b0e:	47 70       	andi	r20, 0x07	; 7
    2b10:	40 5d       	subi	r20, 0xD0	; 208
    2b12:	41 93       	st	Z+, r20
    2b14:	b3 e0       	ldi	r27, 0x03	; 3
    2b16:	0f d0       	rcall	.+30     	; 0x2b36 <__ultoa_invert+0x86>
    2b18:	c9 f7       	brne	.-14     	; 0x2b0c <__ultoa_invert+0x5c>
    2b1a:	f6 cf       	rjmp	.-20     	; 0x2b08 <__ultoa_invert+0x58>
    2b1c:	46 2f       	mov	r20, r22
    2b1e:	4f 70       	andi	r20, 0x0F	; 15
    2b20:	40 5d       	subi	r20, 0xD0	; 208
    2b22:	4a 33       	cpi	r20, 0x3A	; 58
    2b24:	18 f0       	brcs	.+6      	; 0x2b2c <__ultoa_invert+0x7c>
    2b26:	49 5d       	subi	r20, 0xD9	; 217
    2b28:	31 fd       	sbrc	r19, 1
    2b2a:	40 52       	subi	r20, 0x20	; 32
    2b2c:	41 93       	st	Z+, r20
    2b2e:	02 d0       	rcall	.+4      	; 0x2b34 <__ultoa_invert+0x84>
    2b30:	a9 f7       	brne	.-22     	; 0x2b1c <__ultoa_invert+0x6c>
    2b32:	ea cf       	rjmp	.-44     	; 0x2b08 <__ultoa_invert+0x58>
    2b34:	b4 e0       	ldi	r27, 0x04	; 4
    2b36:	a6 95       	lsr	r26
    2b38:	97 95       	ror	r25
    2b3a:	87 95       	ror	r24
    2b3c:	77 95       	ror	r23
    2b3e:	67 95       	ror	r22
    2b40:	ba 95       	dec	r27
    2b42:	c9 f7       	brne	.-14     	; 0x2b36 <__ultoa_invert+0x86>
    2b44:	00 97       	sbiw	r24, 0x00	; 0
    2b46:	61 05       	cpc	r22, r1
    2b48:	71 05       	cpc	r23, r1
    2b4a:	08 95       	ret
    2b4c:	9b 01       	movw	r18, r22
    2b4e:	ac 01       	movw	r20, r24
    2b50:	0a 2e       	mov	r0, r26
    2b52:	06 94       	lsr	r0
    2b54:	57 95       	ror	r21
    2b56:	47 95       	ror	r20
    2b58:	37 95       	ror	r19
    2b5a:	27 95       	ror	r18
    2b5c:	ba 95       	dec	r27
    2b5e:	c9 f7       	brne	.-14     	; 0x2b52 <__ultoa_invert+0xa2>
    2b60:	62 0f       	add	r22, r18
    2b62:	73 1f       	adc	r23, r19
    2b64:	84 1f       	adc	r24, r20
    2b66:	95 1f       	adc	r25, r21
    2b68:	a0 1d       	adc	r26, r0
    2b6a:	08 95       	ret

00002b6c <__divmodsi4>:
    2b6c:	05 2e       	mov	r0, r21
    2b6e:	97 fb       	bst	r25, 7
    2b70:	1e f4       	brtc	.+6      	; 0x2b78 <__divmodsi4+0xc>
    2b72:	00 94       	com	r0
    2b74:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__negsi2>
    2b78:	57 fd       	sbrc	r21, 7
    2b7a:	07 d0       	rcall	.+14     	; 0x2b8a <__divmodsi4_neg2>
    2b7c:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__udivmodsi4>
    2b80:	07 fc       	sbrc	r0, 7
    2b82:	03 d0       	rcall	.+6      	; 0x2b8a <__divmodsi4_neg2>
    2b84:	4e f4       	brtc	.+18     	; 0x2b98 <__divmodsi4_exit>
    2b86:	0c 94 cd 15 	jmp	0x2b9a	; 0x2b9a <__negsi2>

00002b8a <__divmodsi4_neg2>:
    2b8a:	50 95       	com	r21
    2b8c:	40 95       	com	r20
    2b8e:	30 95       	com	r19
    2b90:	21 95       	neg	r18
    2b92:	3f 4f       	sbci	r19, 0xFF	; 255
    2b94:	4f 4f       	sbci	r20, 0xFF	; 255
    2b96:	5f 4f       	sbci	r21, 0xFF	; 255

00002b98 <__divmodsi4_exit>:
    2b98:	08 95       	ret

00002b9a <__negsi2>:
    2b9a:	90 95       	com	r25
    2b9c:	80 95       	com	r24
    2b9e:	70 95       	com	r23
    2ba0:	61 95       	neg	r22
    2ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba8:	08 95       	ret

00002baa <__muluhisi3>:
    2baa:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__umulhisi3>
    2bae:	a5 9f       	mul	r26, r21
    2bb0:	90 0d       	add	r25, r0
    2bb2:	b4 9f       	mul	r27, r20
    2bb4:	90 0d       	add	r25, r0
    2bb6:	a4 9f       	mul	r26, r20
    2bb8:	80 0d       	add	r24, r0
    2bba:	91 1d       	adc	r25, r1
    2bbc:	11 24       	eor	r1, r1
    2bbe:	08 95       	ret

00002bc0 <__mulshisi3>:
    2bc0:	b7 ff       	sbrs	r27, 7
    2bc2:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__muluhisi3>

00002bc6 <__mulohisi3>:
    2bc6:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__muluhisi3>
    2bca:	82 1b       	sub	r24, r18
    2bcc:	93 0b       	sbc	r25, r19
    2bce:	08 95       	ret

00002bd0 <__udivmodsi4>:
    2bd0:	a1 e2       	ldi	r26, 0x21	; 33
    2bd2:	1a 2e       	mov	r1, r26
    2bd4:	aa 1b       	sub	r26, r26
    2bd6:	bb 1b       	sub	r27, r27
    2bd8:	fd 01       	movw	r30, r26
    2bda:	0d c0       	rjmp	.+26     	; 0x2bf6 <__udivmodsi4_ep>

00002bdc <__udivmodsi4_loop>:
    2bdc:	aa 1f       	adc	r26, r26
    2bde:	bb 1f       	adc	r27, r27
    2be0:	ee 1f       	adc	r30, r30
    2be2:	ff 1f       	adc	r31, r31
    2be4:	a2 17       	cp	r26, r18
    2be6:	b3 07       	cpc	r27, r19
    2be8:	e4 07       	cpc	r30, r20
    2bea:	f5 07       	cpc	r31, r21
    2bec:	20 f0       	brcs	.+8      	; 0x2bf6 <__udivmodsi4_ep>
    2bee:	a2 1b       	sub	r26, r18
    2bf0:	b3 0b       	sbc	r27, r19
    2bf2:	e4 0b       	sbc	r30, r20
    2bf4:	f5 0b       	sbc	r31, r21

00002bf6 <__udivmodsi4_ep>:
    2bf6:	66 1f       	adc	r22, r22
    2bf8:	77 1f       	adc	r23, r23
    2bfa:	88 1f       	adc	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	1a 94       	dec	r1
    2c00:	69 f7       	brne	.-38     	; 0x2bdc <__udivmodsi4_loop>
    2c02:	60 95       	com	r22
    2c04:	70 95       	com	r23
    2c06:	80 95       	com	r24
    2c08:	90 95       	com	r25
    2c0a:	9b 01       	movw	r18, r22
    2c0c:	ac 01       	movw	r20, r24
    2c0e:	bd 01       	movw	r22, r26
    2c10:	cf 01       	movw	r24, r30
    2c12:	08 95       	ret

00002c14 <__umulhisi3>:
    2c14:	a2 9f       	mul	r26, r18
    2c16:	b0 01       	movw	r22, r0
    2c18:	b3 9f       	mul	r27, r19
    2c1a:	c0 01       	movw	r24, r0
    2c1c:	a3 9f       	mul	r26, r19
    2c1e:	70 0d       	add	r23, r0
    2c20:	81 1d       	adc	r24, r1
    2c22:	11 24       	eor	r1, r1
    2c24:	91 1d       	adc	r25, r1
    2c26:	b2 9f       	mul	r27, r18
    2c28:	70 0d       	add	r23, r0
    2c2a:	81 1d       	adc	r24, r1
    2c2c:	11 24       	eor	r1, r1
    2c2e:	91 1d       	adc	r25, r1
    2c30:	08 95       	ret

00002c32 <_exit>:
    2c32:	f8 94       	cli

00002c34 <__stop_program>:
    2c34:	ff cf       	rjmp	.-2      	; 0x2c34 <__stop_program>
